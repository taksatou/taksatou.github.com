<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">mojavy.com</title>
  <subtitle type="text"></subtitle>

  <updated>2011-12-06T15:05:02Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://mojavy.com/blog" />
  <id>http://mojavy.com/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://mojavy.com/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[tmuxに独自機能を追加する]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2011/12/06/tmux_advent_calendar_2011" />
    <id>http://mojavy.com/blog/2011/12/06/tmux_advent_calendar_2011</id>
    <updated>2011-12-06T01:05:10Z</updated>
    <published>2011-12-06T01:05:10Z</published>
    <category scheme="http://mojavy.com/blog" term="tmux" />
    <summary type="html"><![CDATA[tmuxに独自機能を追加する]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2011/12/06/tmux_advent_calendar_2011"><![CDATA[<p>これは<a href="http://atnd.org/events/22320">ターミナルマルチプレクサ Advent Calendar 2011</a>の6日目です。
5日目はyoshikawさんの<a href="http://yskwkzhr.blogspot.com/2011/12/lets-use-development-version-gnu-screen.html">開発版GNU Screenを使ってみよう</a>でした。</p>
<p>この記事ではtmuxのいじり方を簡単に紹介してみます。</p>
<h1 id="">はじめに</h1>
<p>tmuxは比較的若いプロジェクトなこともあってか、かゆいところに手が届かないシチュエーションがたまにあります。
個人的に不満だったのはバッファの挙動です。</p>
<p>tmuxでバッファに文字列をコピーした場合、list-buffersに新しいものほど前方になるように格納されていきます。
choose-bufferコマンドを使えばある程度簡単に過去のものもさかのぼれますがしばらくすると埋もれてしまいます。
tmuxのバッファにはホスト名とかよくつかうコマンドとかをいれておいて番号を指定して最速でとりだしたいのに、
場所が固定されていないといちいち探さなくてはならず不便に感じていました。
なんとかできないかと思ってソースをいじってみたら、意外と簡単だったので簡単な解説をまじえつつ手順を紹介してみます。</p>
<h1 id="_1">目次</h1>
<div class="toc">
<ul>
<li><a href="#">はじめに</a></li>
<li><a href="#_1">目次</a></li>
<li><a href="#_2">準備</a><ul>
<li><a href="#_3">ソースをとってくる</a></li>
<li><a href="#_4">依存パッケージを入れる</a></li>
<li><a href="#_5">ビルド</a></li>
</ul>
</li>
<li><a href="#_6">ソース構成</a></li>
<li><a href="#_7">いじってみる</a></li>
<li><a href="#_8">まとめ</a></li>
</ul>
</div>
<h1 id="_2">準備</h1>
<h2 id="_3">ソースをとってくる</h2>
<p>本家サイトからソースをおとします。とりあえず現在の最新版(1.5)でいいと思います。</p>
<p><a href="http://tmux.sourceforge.net/">http://tmux.sourceforge.net/</a></p>
<h2 id="_4">依存パッケージを入れる</h2>
<p><a href="http://d.hatena.ne.jp/tmatsuu/20111130/1322677832">tmatsuuさんの記事</a>にもちょっとありましたが、
tmuxはlibeventとnlcursesに依存しているのでビルドするにはライブラリのヘッダも必要です。
ubuntuだと以下パッケージを入れとけばたぶん大丈夫です。</p>
<div class="pygments_murphy"><pre>sudo apt-get install libevent-dev libncurses5-dev
</pre></div>

<h2 id="_5">ビルド</h2>
<div class="pygments_murphy"><pre>./configure <span class="o">&amp;&amp;</span> make
</pre></div>

<p>ここまでできたら準備OKです。</p>
<h1 id="_6">ソース構成</h1>
<p>結構たくさんファイルがありますが、ファイル名を見れば大体雰囲気がつかめると思います。</p>
<p>何か機能を追加したいだけなら、いじる必要のあるファイルはごく一部です。</p>
<p>tmux.h
: ほとんどのコマンドは全部ここに宣言がまとめられてるのでほぼ必ずいじります。
options-table.c
: オプション追加する場合はここに追加します。値の肩などを定義するテーブルが宣言されているので、中身を見れば大体わかると思います。</p>
<p>いじる必要はないですがarray.hはいろんなところでつかわれてるので目を通しとくとよいと思います。
Cでリストが使いたい場合は他のとこでも流用できそうな便利なヘッダです。</p>
<p>あとは必要に応じて関係しそうなところをみていけばよいです。</p>
<h1 id="_7">いじってみる</h1>
<p>バッファまわりを改造したいので、paste.cというファイルが主な対象になります。</p>
<p>細かい解説は省略しますが、paste_stackという構造体がグローバルで共有しているリストの本体で、array.hで宣言されているマクロで値がとりだせるようになっています。
本来の動作であるpaste_addを参考にしつつpaste_add_tailなんて関数を追加します。
後に追加した文字列ほど後ろにいってほしいですが、直前のものだけは先頭にあったほうが便利なのでちょっと変則的な感じになってますが、やっていることはシンプルです。</p>
<div class="pygments_murphy"><pre><span class="gh">diff -u tmux-1.5/paste.c tmux-1.5-patched/paste.c</span>
<span class="gd">--- tmux-1.5/paste.c    2011-07-09 18:42:38.000000000 +0900</span>
<span class="gi">+++ tmux-1.5-patched/paste.c    2011-12-06 23:36:31.921805251 +0900</span>
<span class="gu">@@ -119,6 +119,38 @@</span>
        pb-&gt;size = size;
 }

<span class="gi">+/*</span>
<span class="gi">+ * Add an item onto the tail of the stack, freeing the bottom if at limit. Note</span>
<span class="gi">+ * that the caller is responsible for allocating data.</span>
<span class="gi">+ */</span>
<span class="gi">+void</span>
<span class="gi">+paste_add_tail(struct paste_stack *ps, char *data, size_t size, u_int limit)</span>
<span class="gi">+{</span>
<span class="gi">+       struct paste_buffer     *pb;</span>
<span class="gi">+</span>
<span class="gi">+       if (size == 0)</span>
<span class="gi">+               return;</span>
<span class="gi">+</span>
<span class="gi">+       while (ARRAY_LENGTH(ps) &gt;= limit) {</span>
<span class="gi">+               pb = ARRAY_LAST(ps);</span>
<span class="gi">+               xfree(pb-&gt;data);</span>
<span class="gi">+               xfree(pb);</span>
<span class="gi">+               ARRAY_TRUNC(ps, 1);</span>
<span class="gi">+       }</span>
<span class="gi">+</span>
<span class="gi">+       pb = xmalloc(sizeof *pb);</span>
<span class="gi">+</span>
<span class="gi">+       if (ARRAY_LENGTH(ps) &gt; 0) {</span>
<span class="gi">+               ARRAY_ADD(ps, ARRAY_FIRST(ps));</span>
<span class="gi">+               ARRAY_SET(ps, 0, pb);</span>
<span class="gi">+       } else {</span>
<span class="gi">+               ARRAY_ADD(ps, pb);</span>
<span class="gi">+       }</span>
<span class="gi">+       ARRAY_INSERT(ps, 0, pb);</span>
<span class="gi">+</span>
<span class="gi">+       pb-&gt;data = data;</span>
<span class="gi">+       pb-&gt;size = size;</span>
<span class="gi">+}</span>
</pre></div>

<p>ここで追加した関数はtmux.hで宣言しておきます</p>
<div class="pygments_murphy"><pre><span class="gh">diff -u tmux-1.5/tmux.h tmux-1.5-patched/tmux.h</span>
<span class="gd">--- tmux-1.5/tmux.h     2011-07-09 18:42:38.000000000 +0900</span>
<span class="gi">+++ tmux-1.5-patched/tmux.h     2011-12-06 23:36:31.925805201 +0900</span>
<span class="gu">@@ -1487,6 +1487,7 @@</span>
 int             paste_free_top(struct paste_stack *);
 int             paste_free_index(struct paste_stack *, u_int);
 void            paste_add(struct paste_stack *, char *, size_t, u_int);
<span class="gi">+void            paste_add_tail(struct paste_stack *, char *, size_t, u_int);</span>
 int             paste_replace(struct paste_stack *, u_int, char *, size_t);
 char           *paste_print(struct paste_buffer *, size_t);
</pre></div>

<p>また、今回の機能は設定ファイルでon/offを切り替えられるようにしておきたいので、options-table.cも編集します。</p>
<div class="pygments_murphy"><pre><span class="n">diff</span> <span class="o">-</span><span class="n">u</span> <span class="n">tmux</span><span class="o">-</span><span class="mf">1.5</span><span class="o">/</span><span class="n">options</span><span class="o">-</span><span class="n">table</span><span class="p">.</span><span class="n">c</span> <span class="n">tmux</span><span class="o">-</span><span class="mf">1.5</span><span class="o">-</span><span class="n">patched</span><span class="o">/</span><span class="n">options</span><span class="o">-</span><span class="n">table</span><span class="p">.</span><span class="n">c</span>
<span class="o">---</span> <span class="n">tmux</span><span class="o">-</span><span class="mf">1.5</span><span class="o">/</span><span class="n">options</span><span class="o">-</span><span class="n">table</span><span class="p">.</span><span class="n">c</span>    <span class="mi">2011</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">09</span> <span class="mi">18</span><span class="o">:</span><span class="mi">42</span><span class="o">:</span><span class="mf">38.000000000</span> <span class="o">+</span><span class="mi">0900</span>
<span class="o">+++</span> <span class="n">tmux</span><span class="o">-</span><span class="mf">1.5</span><span class="o">-</span><span class="n">patched</span><span class="o">/</span><span class="n">options</span><span class="o">-</span><span class="n">table</span><span class="p">.</span><span class="n">c</span>    <span class="mi">2011</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="mo">06</span> <span class="mi">23</span><span class="o">:</span><span class="mi">36</span><span class="o">:</span><span class="mf">31.921805251</span> <span class="o">+</span><span class="mi">0900</span>
<span class="err">@@</span> <span class="o">-</span><span class="mi">57</span><span class="p">,</span><span class="mi">6</span> <span class="o">+</span><span class="mi">57</span><span class="p">,</span><span class="mi">11</span> <span class="err">@@</span>
          <span class="p">.</span><span class="n">default_num</span> <span class="o">=</span> <span class="mi">20</span>
        <span class="p">},</span>

<p><span class="o">+</span>       <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;reverse-buffer&quot;</span><span class="p">,</span>
<span class="o">+</span>         <span class="p">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">OPTIONS_TABLE_FLAG</span><span class="p">,</span>
<span class="o">+</span>         <span class="p">.</span><span class="n">default_num</span> <span class="o">=</span> <span class="mi">0</span>
<span class="o">+</span>       <span class="p">},</span>
<span class="o">+</span>
        <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;escape-time&quot;</span><span class="p">,</span>
          <span class="p">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">OPTIONS_TABLE_NUMBER</span><span class="p">,</span>
          <span class="p">.</span><span class="n">minimum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</pre></div></p>
<p>実際にバッファの制御関数を呼び出しているのはwindow-copy.cなので、さっき追加したオプションの値をみて切り替えられるようにします。</p>
<div class="pygments_murphy"><pre><span class="gh">diff -u tmux-1.5/window-copy.c tmux-1.5-patched/window-copy.c</span>
<span class="gd">--- tmux-1.5/window-copy.c      2011-07-09 18:42:38.000000000 +0900</span>
<span class="gi">+++ tmux-1.5-patched/window-copy.c      2011-12-06 23:36:31.921805251 +0900</span>
<span class="gu">@@ -1348,7 +1348,11 @@</span>
        /* Add the buffer to the stack. */
        limit = options_get_number(&amp;global_options, &quot;buffer-limit&quot;);
<span class="gd">-       paste_add(&amp;global_buffers, buf, off, limit);</span>
<span class="gi">+       if (options_get_number(&amp;global_options, &quot;reverse-buffer&quot;)) {</span>
<span class="gi">+               paste_add(&amp;global_buffers, buf, off, limit);</span>
<span class="gi">+       } else {</span>
<span class="gi">+               paste_add(&amp;global_buffers, buf, off, limit);</span>
<span class="gi">+       }</span>
 }
</pre></div>

<p>あとは設定ファイルに以下を追加してmakeしたtmuxを起動してみます。</p>
<div class="pygments_murphy"><pre><span class="nb">set</span> -g reverse-buffer on
</pre></div>

<p>バッファにコピーした文字列がlist-buffersの後ろに追加されていけば成功です。
簡単ですよね？</p>
<h1 id="_8">まとめ</h1>
<p>以上、tmuxにreverse-bufferというオプションを追加して、バッファの挙動を変更できるようにしてみました。</p>
<p>端末制御のプログラムは普段あまり触れる機会がないし複雑そうなイメージがあって敬遠しがちですが、ちょっとした機能を追加するだけだったら意外と簡単だったりするのでどんどんいじってみるといいと思います。</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[blogofileでサムネイル画像を表示する方法]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2011/11/06/blofofile-test" />
    <id>http://mojavy.com/blog/2011/11/06/blofofile-test</id>
    <updated>2011-11-06T20:32:51Z</updated>
    <published>2011-11-06T20:32:51Z</published>
    <category scheme="http://mojavy.com/blog" term="python" />
    <category scheme="http://mojavy.com/blog" term="memo" />
    <category scheme="http://mojavy.com/blog" term="blogofile" />
    <summary type="html"><![CDATA[blogofileでサムネイル画像を表示する方法]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2011/11/06/blofofile-test"><![CDATA[<p><img alt="rena" src="/images/rena.jpg" /></p>
<p>こんな風にイメージ画像がある記事の場合は、一覧ページでもこの画像をサムネイルで表示させたい。</p>
<p>例えば、
<a href="http://mojavy.com">http://mojavy.com</a>
のトップページ右カラムにある最近の記事一覧みたいに画像を表示できるようにする。</p>
<p>これをするには、postオブジェクトにそういう属性をもたせればよいので、controllers/blog/post.pyに以下のように一行追加する。</p>
<div class="pygments_murphy"><pre><span class="gi">+++ b/_blogofile/_controllers/blog/post.py</span>
<span class="gu">@@ -93,6 +93,7 @@ class Post(object):</span>
         self.slug = None
         self.draft = False
         self.filters = None
<span class="gi">+        self.image = None</span>
         self.__parse()
         self.__post_process()
</pre></div>

<p>そうしておくと、各記事のヘッダにあるyamlから勝手に読み込んでくれるので、</p>
<div class="pygments_murphy"><pre><span class="l-Scalar-Plain">categories</span><span class="p-Indicator">:</span>
<span class="l-Scalar-Plain">date</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2011/11/06 20:32:51</span>
<span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span>
<span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/images/rena.jpg</span>
</pre></div>

<p>のようにすれば${post.image}のようにして参照できる。</p>
<ul>
<li><a href="https://github.com/taksatou/taksatou.github.com">https://github.com/taksatou/taksatou.github.com</a></li>
</ul>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[ブログ引越しました]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2011/11/06/new_blog" />
    <id>http://mojavy.com/blog/2011/11/06/new_blog</id>
    <updated>2011-11-06T19:44:40Z</updated>
    <published>2011-11-06T19:44:40Z</published>
    <category scheme="http://mojavy.com/blog" term="blog" />
    <category scheme="http://mojavy.com/blog" term="blogofile" />
    <summary type="html"><![CDATA[ブログ引越しました]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2011/11/06/new_blog"><![CDATA[<div class="document">
<p>いままでblogger使ってましたが、github pagesに引越しました。</p>
<p><a class="reference external" href="http://tanarky.com/blog/2011/10/29/002_github_blogofile_original_domain/">http://tanarky.com/blog/2011/10/29/002_github_blogofile_original_domain/</a>
を参考にしてblogofileで構築しました。</p>
<p>デザインは
<a class="reference external" href="http://www.webdesignlondon-tristar.co.uk/website-templates">http://www.webdesignlondon-tristar.co.uk/website-templates</a>
から拝借しました。</p>
<p>blogofileのテンプレートは
<a class="reference external" href="https://github.com/mpirnat/blogofile.com">https://github.com/mpirnat/blogofile.com</a>
あたりを参考にするとよいと思います。</p>
<p>よくあるブログサービスをそのまま使う場合と比べると構築までのハードルが若干高いですが、今後ちょっとしたウェブページをつくりたくなったときもソースをそのまま流用できるし、bloggerで色々不満だったことが解消できてよい感じです。</p>
</div>
]]></content>
  </entry>
</feed>
