<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">mojavy.com</title>
  <subtitle type="text"></subtitle>

  <updated>2012-07-17T09:55:36Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://mojavy.com/blog" />
  <id>http://mojavy.com/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://mojavy.com/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[objective-cのプロトコルとデリゲーションについてのメモ]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2012/07/17/objective-c-memo-protocol" />
    <id>http://mojavy.com/blog/2012/07/17/objective-c-memo-protocol</id>
    <updated>2012-07-17T18:30:00Z</updated>
    <published>2012-07-17T18:30:00Z</published>
    <category scheme="http://mojavy.com/blog" term="objective-c" />
    <summary type="html"><![CDATA[objective-cのプロトコルとデリゲーションについてのメモ]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2012/07/17/objective-c-memo-protocol"><![CDATA[<p><img alt="objective-c" src="/images/nextstep-logo.png" /></p>
<ul>
<li>プロトコルとはクラス間で共有するメソッドのリスト。</li>
<li>javaでいうinterfaceのようなもの。</li>
<li>@optionalディレクティブ以降のメソッドは実装が任意。</li>
<li>@requiredディレクティブで必須。</li>
<li>プロトコルに必要なメソッドは直接そのクラスで実装してもいいし、継承元の親クラスで実装してもよい。</li>
<li>requiredがすべて実装されていなかった場合、コンパイラーはワーニングを出す。(エラーではない)</li>
<li>すべてのrequiredメソッドを実装したクラスはそのプロトコルにconform(もしくはadopt)したという。</li>
<li>そのオブジェクトがconformしているかどうかチェックするには、conformsToProtocolメソッドを使う。</li>
<li>そのオブジェクトがoptionalなメソッドを実装しているかどうかをチェックするには、respondsToSelectorを使う。</li>
<li>コンパイル時に型チェックが行われる。型宣言に<protocol名>を含めるとよい。</li>
<li>カテゴリもプロトコルにadoptできる。</li>
<li>プロトコルの名前はユニークでなければならない。</li>
<li>delegationとはプロトコルで定義されたメソッドを実装したクラスを定義すること。</li>
<li>informal protocolというものもあるが、これは単に実装がないカテゴリのこと。abstract protocolともいう。ドキュメンテーションやモジュラリティのために用いる。コンパイル時チェックはなし。プロトコルの@optionalディレクトリはObjective-C 2.0で追加されたので、こちらをつかえばよい。</li>
<li>eclipseでいうデリゲートは、Composite Objectとよばれる</li>
</ul>
<h2 id="">例</h2>
<h3 id="myprotocolh">myProtocol.h</h3>
<div class="pygments_murphy"><pre><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>

<span class="k">@protocol</span> <span class="nc">myProtocol</span> <span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>

<span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">f1</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">f2:</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">obj0</span> <span class="nf">withObject1:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">obj1</span><span class="p">;</span>

<span class="k">@end</span>
</pre></div>

<h3 id="myprotocolimplh">myProtocolImpl.h</h3>
<div class="pygments_murphy"><pre><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
<span class="cp">#import &quot;myProtocol.h&quot;</span>

<span class="k">@interface</span> <span class="nc">myProtocolImpl</span> : <span class="nc">NSObject</span> <span class="o">&lt;</span><span class="n">myProtocol</span><span class="o">&gt;</span>

<span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">f1</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">f2:</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">obj0</span> <span class="nf">withObject1:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">obj1</span><span class="p">;</span>

<span class="k">@end</span>
</pre></div>

<h3 id="myprotocolimplm">myProtocolImpl.m</h3>
<h1 id="import-myprotocolimplh">import "myProtocolImpl.h"</h1>
<p>@implementation myProtocolImpl</p>
<ul>
<li>
<p>(void)f1
{
    NSLog(@"called f0");
}</p>
</li>
<li>
<p>(void)f2: (id)obj0 withObject1:(id)obj1
{
    NSLog(@"called f2");
}</p>
</li>
</ul>
<p>@end
$$/code</p>
<h2 id="_1">参考</h2>
<p><br>
<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=armyofpigs-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=0321811909" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe></p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[objective-cのカテゴリついてのメモ]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2012/07/13/objective-c-memo" />
    <id>http://mojavy.com/blog/2012/07/13/objective-c-memo</id>
    <updated>2012-07-13T18:30:00Z</updated>
    <published>2012-07-13T18:30:00Z</published>
    <category scheme="http://mojavy.com/blog" term="objective-c" />
    <summary type="html"><![CDATA[objective-cのカテゴリついてのメモ]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2012/07/13/objective-c-memo"><![CDATA[<p><img alt="objective-c" src="/images/nextstep-logo.png" /></p>
<ul>
<li>objective-cではカテゴリという機能を使ってクラスの拡張ができる。</li>
<li>javascriptのprototypeのようなもの。</li>
<li>一旦上書きしたメソッドにアクセスする方法はない。メソッドを上書きする必要がある場合はサブクラスとして実装するべき。</li>
<li>プライベートメソッドは無名カテゴリを使って実装できる。</li>
<li>別の名前のカテゴリでもメソッド名は一意にしなければならない。</li>
<li>別のカテゴリとの間にメソッド名でコンフリクトが発生した場合、どちらが呼ばれるかは未定義。</li>
<li>カテゴリ名自体にソースコード上での可読性以上の実質的な意味は無いらしい。</li>
</ul>
<h2 id="">例</h2>
<div class="pygments_murphy"><pre><span class="k">@interface</span> <span class="nc">NSObject</span> <span class="nl">(MyExt)</span>
<span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">doit:</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span> <span class="n">arg</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">NSObject</span> <span class="nl">(MyExt)</span>
<span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">doit:</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span> <span class="n">arg</span>
<span class="p">{</span>
   <span class="c1">// do something</span>
<span class="p">}</span>
<span class="k">@end</span>
</pre></div>

<h2 id="_1">参考</h2>
<ul>
<li><a href="http://stackoverflow.com/questions/5689088/do-objective-c-category-names-do-anything">http://stackoverflow.com/questions/5689088/do-objective-c-category-names-do-anything</a></li>
</ul>
<p><br>
<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=armyofpigs-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=0321811909" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe></p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[Xcodeのキーバインディングをもっとemacsっぽくする]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2012/07/12/xcode-emacs-like-keybindings" />
    <id>http://mojavy.com/blog/2012/07/12/xcode-emacs-like-keybindings</id>
    <updated>2012-07-12T12:30:00Z</updated>
    <published>2012-07-12T12:30:00Z</published>
    <category scheme="http://mojavy.com/blog" term="xcode" />
    <category scheme="http://mojavy.com/blog" term="mac" />
    <summary type="html"><![CDATA[Xcodeのキーバインディングをもっとemacsっぽくする]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2012/07/12/xcode-emacs-like-keybindings"><![CDATA[<p><img alt="xcode" src="/images/xcode-logo.png" /></p>
<p>xcodeのキーバインディングはデフォルトでemacsっぽいものが使えますが、普段emacsを使ってる身としては中途半端すぎて逆にいらつきます。</p>
<p>C-xC-sで変な文字が入ったり、escで補完リストのポップアップをトグル表示とかやめてほしかったので、
このあたりのうざい動きを抑えつつ最低限の設定を追加した設定をつくりました。</p>
<script src="https://gist.github.com/3095366.js"> </script>

<p>これを$HOME/Library/Developer/Xcode/UserData/KeyBindings あたりに保存すれば、
xcodeのkey bindingsの設定に読ませることができると思います。</p>
<p>もっと良い設定があれば教えてほしいです。</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[rubyのワンライナーで便利な変数まとめ]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2012/07/08/ruby-oneliner-special-variables" />
    <id>http://mojavy.com/blog/2012/07/08/ruby-oneliner-special-variables</id>
    <updated>2012-07-08T18:30:00Z</updated>
    <published>2012-07-08T18:30:00Z</published>
    <category scheme="http://mojavy.com/blog" term="ruby" />
    <summary type="html"><![CDATA[rubyのワンライナーで便利な変数まとめ]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2012/07/08/ruby-oneliner-special-variables"><![CDATA[<p><img alt="ruby" src="/images/ruby-logo.png" /></p>
<h1 id="">$.</h1>
<p>現在の行番号を表します。awkでいうNRと同じです。</p>
<div class="pygments_murphy"><pre><span class="n">ruby</span> <span class="o">-</span><span class="n">ne</span> <span class="s1">&#39;puts &quot;#{$.},#{$_}&quot;&#39;</span>
</pre></div>

<h1 id="-i">$-i</h1>
<p>この値を文字列で上書きするとin-place置換を行うようになります。オリジナルのファイルはここで指定した文字が拡張子についたファイルとして保存されます。オリジナルファイルが不要なら空文字を設定すればOKです。</p>
<div class="pygments_murphy"><pre><span class="n">ruby</span> <span class="o">-</span><span class="n">ne</span> <span class="s1">&#39;BEGIN{$-i=&quot;.old&quot;}; puts($_) if /foo/&#39;</span> <span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">file</span>
</pre></div>

<h1 id="_1">$/</h1>
<p>入力の区切り文字を表わす文字です。デフォルトは改行です。</p>
<div class="pygments_murphy"><pre><span class="n">ruby</span> <span class="o">-</span><span class="n">ne</span> <span class="s1">&#39;BEGIN{$/=&quot;,&quot;}; p $_&#39;</span>
</pre></div>

<h1 id="_2">$, 、$;</h1>
<p>$, はjoinのデフォルト区切り文字で、$; はsplitのデフォルト区切り文字です。
ワンライナーではjoinとsplitをよく使うと思うので、BEGINで上書きしておけばワンライナーを多少短く書けます。</p>
<div class="pygments_murphy"><pre><span class="n">ruby</span> <span class="o">-</span><span class="n">ne</span> <span class="s1">&#39;BEGIN{$,=&quot;\t&quot;;$;=&quot;,&quot;}; puts $_.split.join&#39;</span>
</pre></div>

<h1 id="_3">まとめ</h1>
<p>まだ他にも知らないテクニックがたくさんありそうですが、新しく見つけたら追記していきます。</p>
<h1 id="_4">参考</h1>
<ul>
<li><a href="http://blog.lilyx.net/2007/11/29/writing-one-liner-in-ruby/">http://blog.lilyx.net/2007/11/29/writing-one-liner-in-ruby/</a></li>
<li><a href="http://www.ruby-lang.org/ja/old-man/html/_C1C8A4DFB9FEA4DFCAD1BFF4.html">http://www.ruby-lang.org/ja/old-man/html/_C1C8A4DFB9FEA4DFCAD1BFF4.html</a></li>
</ul>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[sbclでクラスのスロット一覧を取得する方法]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2012/07/06/common-lisp-list-of-slots" />
    <id>http://mojavy.com/blog/2012/07/06/common-lisp-list-of-slots</id>
    <updated>2012-07-06T18:30:00Z</updated>
    <published>2012-07-06T18:30:00Z</published>
    <category scheme="http://mojavy.com/blog" term="memo" />
    <category scheme="http://mojavy.com/blog" term="sbcl" />
    <category scheme="http://mojavy.com/blog" term="common lisp" />
    <summary type="html"><![CDATA[sbclでクラスのスロット一覧を取得する方法]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2012/07/06/common-lisp-list-of-slots"><![CDATA[<p><img alt="lisp" src="/images/lisp-logo.jpg" /></p>
<p>メモメモ</p>
<div class="pygments_murphy"><pre>CL-USER&gt; (sb-mop:class-slots (find-class &#39;sb-posix:stat))
(#&lt;SB-MOP:STANDARD-EFFECTIVE-SLOT-DEFINITION SB-POSIX::MODE&gt;
 #&lt;SB-MOP:STANDARD-EFFECTIVE-SLOT-DEFINITION SB-POSIX::INO&gt;
 #&lt;SB-MOP:STANDARD-EFFECTIVE-SLOT-DEFINITION SB-POSIX::DEV&gt;
 #&lt;SB-MOP:STANDARD-EFFECTIVE-SLOT-DEFINITION SB-POSIX::NLINK&gt;
 #&lt;SB-MOP:STANDARD-EFFECTIVE-SLOT-DEFINITION SB-POSIX::UID&gt;
 #&lt;SB-MOP:STANDARD-EFFECTIVE-SLOT-DEFINITION SB-POSIX::GID&gt;
 #&lt;SB-MOP:STANDARD-EFFECTIVE-SLOT-DEFINITION SB-POSIX::SIZE&gt;
 #&lt;SB-MOP:STANDARD-EFFECTIVE-SLOT-DEFINITION SB-POSIX::ATIME&gt;
 #&lt;SB-MOP:STANDARD-EFFECTIVE-SLOT-DEFINITION SB-POSIX::MTIME&gt;
 #&lt;SB-MOP:STANDARD-EFFECTIVE-SLOT-DEFINITION SB-POSIX::CTIME&gt;)
</pre></div>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[debian lennyのEnd Of Life対応]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2012/06/06/debian-lenny-oldstable" />
    <id>http://mojavy.com/blog/2012/06/06/debian-lenny-oldstable</id>
    <updated>2012-06-06T10:30:00Z</updated>
    <published>2012-06-06T10:30:00Z</published>
    <category scheme="http://mojavy.com/blog" term="python" />
    <summary type="html"><![CDATA[debian lennyのEnd Of Life対応]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2012/06/06/debian-lenny-oldstable"><![CDATA[<p><img alt="debian" src="/images/debian_logo.png" /></p>
<p>debian lennyは2012-02-06にEnd of lifeを迎えました。
それに伴いlennyのリポジトリもoldstable扱いとなりパスが変わったため、デフォルトのsources.listでは404 Not Foundとなってパッケージがインストールできなくなってしまいました。
早めにアップデートしたほうが好ましいですが、そのまま引き続きlennyを使いたい場合もあると思います。
そのような場合は以下のようにsources.listを変更してやれば今までどおりパッケージをとれるようになります。</p>
<div class="pygments_murphy"><pre>deb http://archive.debian.org/debian-security/ lenny/updates main
deb-src http://archive.debian.org/debian-security/ lenny/updates main

deb http://archive.debian.org/debian/ lenny main
deb-src http://archive.debian.org/debian/ lenny main
</pre></div>

<p>backportsなどもarchiveのほうにあるのでお好みで追加してください。</p>
<h1 id="">参考</h1>
<ul>
<li><a href="http://archive.debian.org/">http://archive.debian.org/</a></li>
<li><a href="http://wiki.debian.org/DebianLenny">http://wiki.debian.org/DebianLenny</a></li>
<li><a href="http://wiki.debian.org/DebianOldStable">http://wiki.debian.org/DebianOldStable</a></li>
</ul>
<p><br></p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[1分でpython環境を整える方法]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2012/04/22/virtualenv-burrito" />
    <id>http://mojavy.com/blog/2012/04/22/virtualenv-burrito</id>
    <updated>2012-04-22T17:30:00Z</updated>
    <published>2012-04-22T17:30:00Z</published>
    <category scheme="http://mojavy.com/blog" term="python" />
    <summary type="html"><![CDATA[1分でpython環境を整える方法]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2012/04/22/virtualenv-burrito"><![CDATA[<p><img alt="python" src="/images/python-logo.gif" /></p>
<p>pythonではvirtualenvというユーティリティを使って複数の環境を切り替えることができます。しかしvirtualenvはセットアップがちょっとわかりにくかったりバージョンによってはこけたりしていまいち使いこなせていませんでした。久し振りにブログを書くついでにpython環境を再構築しようと思って調べたところ、<a href="https://github.com/brainsik/virtualenv-burrito">virtualenv-burrito</a> というのが使いやすかったので紹介します。これを使えば非常に簡単にpython環境を整えることができます。</p>
<h1 id="">インストール</h1>
<div class="pygments_murphy"><pre><span class="nv">$ </span>curl -s https://raw.github.com/brainsik/virtualenv-burrito/master/virtualenv-burrito.sh | <span class="nv">$SHELL</span>
</pre></div>

<p>として再ログインするだけです。勝手にパスやシェルの補完設定もしてくれます。</p>
<h1 id="_1">使い方</h1>
<p>新しい環境の構築は、</p>
<div class="pygments_murphy"><pre><span class="nv">$ </span>mkvirtualenv newname
</pre></div>

<p><br></p>
<p>環境の切り替えは、</p>
<div class="pygments_murphy"><pre><span class="nv">$ </span>workon newname
<span class="nv">$ </span><span class="c"># or</span>
<span class="nv">$ </span>workon 2.7
</pre></div>

<p><br></p>
<p>不要な環境の削除は、</p>
<div class="pygments_murphy"><pre><span class="nv">$ </span>rmvirtualenv newname
</pre></div>

<p><br></p>
<p>以上が基本的な使い方です。さらに詳しい使い方は<a href="http://www.doughellmann.com/docs/virtualenvwrapper/command_ref.html">virtualenvwrapperのコマンドリファレンス</a>等をみてください。</p>
<h1 id="_2">解説</h1>
<p>virtualenv-burrito自体はvirtualenv+virtualenvwrapperの環境を構築するだけなので、本格的に使いたい場合はvirtualenvについての理解が必要です。ただ、ほとんどの場合は単にバージョンとパッケージが切り替えられればいいと思うので、mkvirtualenvとworkonさえ覚えておけば十分です。
いくつか注意点もあります。</p>
<ul>
<li>pythonのバイナリはあらかじめインストールされている必要があります。</li>
<li>python3だとうごきません。python3環境が作れないという意味ではなく、デフォルトパスのpythonバージョンが3だとvirtualenv-burritoのセットアップ途中でこけます。その場合はpython2系をつかってください。</li>
<li>pipのインストールでこける場合があります。その場合は以下のようなコマンドで回避できます。 <a href="https://github.com/brainsik/virtualenv-burrito/issues/16">(参考)</a></li>
</ul>
<div class="pygments_murphy"><pre><span class="nv">$ </span>rm -Rf ~/.venvburrito/lib/python/distribute-0.6.24-py2.7.egg
<span class="nv">$ </span>mkvirtualenv -p <span class="k">$(</span>which python3.2<span class="k">)</span> --distribute py32
</pre></div>

<h1 id="_3">まとめ</h1>
<p>いまからpython環境を構築するならvirtualenv-burritoつかっとくと、virtualenvとvirtualenvwrapperをセットアップするまでの手間が省けていいと思います</p>
<h1 id="_4">関連リンク</h1>
<ul>
<li><a href="https://github.com/brainsik/virtualenv-burrito">virtualenv-burrito</a></li>
<li><a href="http://pypi.python.org/pypi/virtualenv">virtualenv</a></li>
<li><a href="http://www.doughellmann.com/docs/virtualenvwrapper/">virtualenvwrapper</a>
<br></li>
</ul>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[tmuxでマウスを使う]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2011/12/13/tmux_advent_calendar_2_2011" />
    <id>http://mojavy.com/blog/2011/12/13/tmux_advent_calendar_2_2011</id>
    <updated>2011-12-13T00:58:29Z</updated>
    <published>2011-12-13T00:58:29Z</published>
    <category scheme="http://mojavy.com/blog" term="advent calendar" />
    <category scheme="http://mojavy.com/blog" term="tmux" />
    <summary type="html"><![CDATA[tmuxでマウスを使う]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2011/12/13/tmux_advent_calendar_2_2011"><![CDATA[<p>これは<a href="http://atnd.org/events/22320">ターミナルマルチプレクサ Advent Calendar 2011</a>の13日目です。
12日目はnetmarkjpさんの<a href="http://netmark.jp/2011/12/gnu-screen-xmodem.html">GNU screen でシリアル通信 + xmodem転送</a>でした。</p>
<p>今日はtmuxのマウスまわりの設定について紹介してみます。</p>
<p>tmuxにはマウスで操作するための機能がいくつか提供されています。ChangeLogを見る限りでは結構前からマウスサポートはされているようですが、mac portから入れたtmuxでは動かなかったのでソースから最新版をいれることをおすすめします。
macでソースから入れる方法は初日に<a href="http://d.hatena.ne.jp/tmatsuu/20111130/1322677832">matsuuさんが紹介してくれている</a>のでそちらを参考にしてください。</p>
<p>tmux-1.5の時点で使えるマウス関連の設定項目は以下の通りです。</p>
<dl>
<dt>mode-mouse</dt>
<dd>onにすると、マウスで画面をドラッグしたときにコピーモードに入ります。マウスホイールでスクロールすることもできます。</dd>
<dt>mouse-select-pane</dt>
<dd>マウスクリックでpaneを選択できるようになります。</dd>
<dt>mouse-select-window</dt>
<dd>statusを有効にしているときに、window名の部分をクリックすることでwindowを切り替えられます。</dd>
<dt>mouse-utf8</dt>
<dd>マウスの入力をutf-8として扱うための設定だそうです。効果はよくわかりませんでした。</dd>
</dl>
<p>なお、shiftを押しながらターミナルをクリックすれば、本来のマウスの動作になります。</p>
<p>macのiTerm, windowsのputty, ubuntuのgnome-terminalで動作確認できました。
たまに画面が乱れることがありますが、再描画すると直ります。</p>
<h1 id="">まとめ</h1>
<p>以下を.tmux.confにコピペするとtmuxでマウスがつかえます。</p>
<div class="pygments_murphy"><pre><span class="nb">set</span> -g mode-mouse on
<span class="nb">set</span> -g mouse-resize-pane on
<span class="nb">set</span> -g mouse-select-pane on
<span class="nb">set</span> -g mouse-select-window on
</pre></div>

<p>本当は、set-clipboardという機能も紹介したかったのですが、ちゃんと動かすことができなかったのでまたの機会にします。
以上非常に簡単でしたがマウスサポート機能の紹介でした。</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[tmuxに独自機能を追加する]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2011/12/06/tmux_advent_calendar_2011" />
    <id>http://mojavy.com/blog/2011/12/06/tmux_advent_calendar_2011</id>
    <updated>2011-12-06T01:05:10Z</updated>
    <published>2011-12-06T01:05:10Z</published>
    <category scheme="http://mojavy.com/blog" term="advent calendar" />
    <category scheme="http://mojavy.com/blog" term="tmux" />
    <summary type="html"><![CDATA[tmuxに独自機能を追加する]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2011/12/06/tmux_advent_calendar_2011"><![CDATA[<p>これは<a href="http://atnd.org/events/22320">ターミナルマルチプレクサ Advent Calendar 2011</a>の<s>6日目</s>7日目です。(netmark.jpさん,matsuuさん、すいません、出遅れました。)</p>
<p>5日目はyoshikawさんの<a href="http://yskwkzhr.blogspot.com/2011/12/lets-use-development-version-gnu-screen.html">開発版GNU Screenを使ってみよう</a>でした。</p>
<p>6日目はnetmark.jpさんの<a href="http://netmark.jp/2011/12/gnu-screen-plusone.html">GNU screenをもうちょっとだけ便利に使おう！</a>でした。</p>
<p>この記事ではtmuxのいじり方を簡単に紹介してみます。</p>
<h1 id="">はじめに</h1>
<p>tmuxは比較的若いプロジェクトなこともあってか、かゆいところに手が届かないシチュエーションがたまにあります。
個人的に不満だったのはバッファの挙動です。</p>
<p>tmuxでバッファに文字列をコピーした場合、list-buffersに新しいものほど前方になるように格納されていきます。
choose-bufferコマンドを使えばある程度簡単に過去のものもさかのぼれますがしばらくすると埋もれてしまいます。
tmuxのバッファにはホスト名とかよくつかうコマンドとかをいれておいて番号を指定して最速でとりだしたいのに、
場所が固定されていないといちいち探さなくてはならず不便に感じていました。
なんとかできないかと思ってソースをいじってみたら、意外と簡単だったので簡単な解説をまじえつつ手順を紹介してみます。</p>
<h1 id="_1">目次</h1>
<div class="toc">
<ul>
<li><a href="#">はじめに</a></li>
<li><a href="#_1">目次</a></li>
<li><a href="#_2">準備</a><ul>
<li><a href="#_3">ソースをとってくる</a></li>
<li><a href="#_4">依存パッケージを入れる</a></li>
<li><a href="#_5">ビルド</a></li>
</ul>
</li>
<li><a href="#_6">ソース構成</a></li>
<li><a href="#_7">いじってみる</a></li>
<li><a href="#_8">まとめ</a></li>
</ul>
</div>
<h1 id="_2">準備</h1>
<h2 id="_3">ソースをとってくる</h2>
<p>本家サイトからソースをおとします。とりあえず現在の最新版(1.5)でいいと思います。</p>
<p><a href="http://tmux.sourceforge.net/">http://tmux.sourceforge.net/</a></p>
<h2 id="_4">依存パッケージを入れる</h2>
<p><a href="http://d.hatena.ne.jp/tmatsuu/20111130/1322677832">tmatsuuさんの記事</a>にもちょっとありましたが、
tmuxはlibeventとnlcursesに依存しているのでビルドするにはライブラリのヘッダも必要です。
ubuntuだと以下パッケージを入れとけばたぶん大丈夫です。</p>
<div class="pygments_murphy"><pre>sudo apt-get install libevent-dev libncurses5-dev
</pre></div>

<h2 id="_5">ビルド</h2>
<div class="pygments_murphy"><pre>./configure <span class="o">&amp;&amp;</span> make
</pre></div>

<p>ここまでできたら準備OKです。</p>
<h1 id="_6">ソース構成</h1>
<p>結構たくさんファイルがありますが、ファイル名を見れば大体雰囲気がつかめると思います。</p>
<p>何か機能を追加したいだけなら、いじる必要のあるファイルはごく一部です。</p>
<dl>
<dt>tmux.h</dt>
<dd>
<dl>
<dt>ほとんどのコマンドは全部ここに宣言がまとめられてるのでほぼ必ずいじります。</dt>
<dt>options-table.c</dt>
<dd>オプション追加する場合はここに追加します。値の肩などを定義するテーブルが宣言されているので、中身を見れば大体わかると思います。</dd>
</dl>
</dd>
</dl>
<p>いじる必要はないですがarray.hはいろんなところでつかわれてるので目を通しとくとよいと思います。
Cでリストが使いたい場合は他のとこでも流用できそうな便利なヘッダです。</p>
<p>あとは必要に応じて関係しそうなところをみていけばよいです。</p>
<h1 id="_7">いじってみる</h1>
<p>バッファまわりを改造したいので、paste.cというファイルが主な対象になります。</p>
<p>細かい解説は省略しますが、paste_stackという構造体がグローバルで共有しているリストの本体で、array.hで宣言されているマクロで値がとりだせるようになっています。
本来の動作であるpaste_addを参考にしつつpaste_add_tailなんて関数を追加します。
後に追加した文字列ほど後ろにいってほしいですが、直前のものだけは先頭にあったほうが便利なのでちょっと変則的な感じになってますが、やっていることはシンプルです。</p>
<div class="pygments_murphy"><pre><span class="gh">diff -u tmux-1.5/paste.c tmux-1.5-patched/paste.c</span>
<span class="gd">--- tmux-1.5/paste.c    2011-07-09 18:42:38.000000000 +0900</span>
<span class="gi">+++ tmux-1.5-patched/paste.c    2011-12-06 23:36:31.921805251 +0900</span>
<span class="gu">@@ -119,6 +119,38 @@</span>
        pb-&gt;size = size;
 }

<span class="gi">+/*</span>
<span class="gi">+ * Add an item onto the tail of the stack, freeing the bottom if at limit. Note</span>
<span class="gi">+ * that the caller is responsible for allocating data.</span>
<span class="gi">+ */</span>
<span class="gi">+void</span>
<span class="gi">+paste_add_tail(struct paste_stack *ps, char *data, size_t size, u_int limit)</span>
<span class="gi">+{</span>
<span class="gi">+       struct paste_buffer     *pb;</span>
<span class="gi">+</span>
<span class="gi">+       if (size == 0)</span>
<span class="gi">+               return;</span>
<span class="gi">+</span>
<span class="gi">+       while (ARRAY_LENGTH(ps) &gt;= limit) {</span>
<span class="gi">+               pb = ARRAY_LAST(ps);</span>
<span class="gi">+               xfree(pb-&gt;data);</span>
<span class="gi">+               xfree(pb);</span>
<span class="gi">+               ARRAY_TRUNC(ps, 1);</span>
<span class="gi">+       }</span>
<span class="gi">+</span>
<span class="gi">+       pb = xmalloc(sizeof *pb);</span>
<span class="gi">+</span>
<span class="gi">+       if (ARRAY_LENGTH(ps) &gt; 0) {</span>
<span class="gi">+               ARRAY_ADD(ps, ARRAY_FIRST(ps));</span>
<span class="gi">+               ARRAY_SET(ps, 0, pb);</span>
<span class="gi">+       } else {</span>
<span class="gi">+               ARRAY_ADD(ps, pb);</span>
<span class="gi">+       }</span>
<span class="gi">+       ARRAY_INSERT(ps, 0, pb);</span>
<span class="gi">+</span>
<span class="gi">+       pb-&gt;data = data;</span>
<span class="gi">+       pb-&gt;size = size;</span>
<span class="gi">+}</span>
</pre></div>

<p>ここで追加した関数はtmux.hで宣言しておきます</p>
<div class="pygments_murphy"><pre><span class="gh">diff -u tmux-1.5/tmux.h tmux-1.5-patched/tmux.h</span>
<span class="gd">--- tmux-1.5/tmux.h     2011-07-09 18:42:38.000000000 +0900</span>
<span class="gi">+++ tmux-1.5-patched/tmux.h     2011-12-06 23:36:31.925805201 +0900</span>
<span class="gu">@@ -1487,6 +1487,7 @@</span>
 int             paste_free_top(struct paste_stack *);
 int             paste_free_index(struct paste_stack *, u_int);
 void            paste_add(struct paste_stack *, char *, size_t, u_int);
<span class="gi">+void            paste_add_tail(struct paste_stack *, char *, size_t, u_int);</span>
 int             paste_replace(struct paste_stack *, u_int, char *, size_t);
 char           *paste_print(struct paste_buffer *, size_t);
</pre></div>

<p>また、今回の機能は設定ファイルでon/offを切り替えられるようにしておきたいので、options-table.cも編集します。</p>
<div class="pygments_murphy"><pre><span class="n">diff</span> <span class="o">-</span><span class="n">u</span> <span class="n">tmux</span><span class="o">-</span><span class="mf">1.5</span><span class="o">/</span><span class="n">options</span><span class="o">-</span><span class="n">table</span><span class="p">.</span><span class="n">c</span> <span class="n">tmux</span><span class="o">-</span><span class="mf">1.5</span><span class="o">-</span><span class="n">patched</span><span class="o">/</span><span class="n">options</span><span class="o">-</span><span class="n">table</span><span class="p">.</span><span class="n">c</span>
<span class="o">---</span> <span class="n">tmux</span><span class="o">-</span><span class="mf">1.5</span><span class="o">/</span><span class="n">options</span><span class="o">-</span><span class="n">table</span><span class="p">.</span><span class="n">c</span>    <span class="mi">2011</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">09</span> <span class="mi">18</span><span class="o">:</span><span class="mi">42</span><span class="o">:</span><span class="mf">38.000000000</span> <span class="o">+</span><span class="mi">0900</span>
<span class="o">+++</span> <span class="n">tmux</span><span class="o">-</span><span class="mf">1.5</span><span class="o">-</span><span class="n">patched</span><span class="o">/</span><span class="n">options</span><span class="o">-</span><span class="n">table</span><span class="p">.</span><span class="n">c</span>    <span class="mi">2011</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="mo">06</span> <span class="mi">23</span><span class="o">:</span><span class="mi">36</span><span class="o">:</span><span class="mf">31.921805251</span> <span class="o">+</span><span class="mi">0900</span>
<span class="err">@@</span> <span class="o">-</span><span class="mi">57</span><span class="p">,</span><span class="mi">6</span> <span class="o">+</span><span class="mi">57</span><span class="p">,</span><span class="mi">11</span> <span class="err">@@</span>
          <span class="p">.</span><span class="n">default_num</span> <span class="o">=</span> <span class="mi">20</span>
        <span class="p">},</span>

<span class="o">+</span>       <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;reverse-buffer&quot;</span><span class="p">,</span>
<span class="o">+</span>         <span class="p">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">OPTIONS_TABLE_FLAG</span><span class="p">,</span>
<span class="o">+</span>         <span class="p">.</span><span class="n">default_num</span> <span class="o">=</span> <span class="mi">0</span>
<span class="o">+</span>       <span class="p">},</span>
<span class="o">+</span>
        <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;escape-time&quot;</span><span class="p">,</span>
          <span class="p">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">OPTIONS_TABLE_NUMBER</span><span class="p">,</span>
          <span class="p">.</span><span class="n">minimum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</pre></div>

<p>実際にバッファの制御関数を呼び出しているのはwindow-copy.cなので、さっき追加したオプションの値をみて切り替えられるようにします。</p>
<div class="pygments_murphy"><pre><span class="gh">diff -u tmux-1.5/window-copy.c tmux-1.5-patched/window-copy.c</span>
<span class="gd">--- tmux-1.5/window-copy.c      2011-07-09 18:42:38.000000000 +0900</span>
<span class="gi">+++ tmux-1.5-patched/window-copy.c      2011-12-06 23:36:31.921805251 +0900</span>
<span class="gu">@@ -1348,7 +1348,11 @@</span>
        /* Add the buffer to the stack. */
        limit = options_get_number(&amp;global_options, &quot;buffer-limit&quot;);
<span class="gd">-       paste_add(&amp;global_buffers, buf, off, limit);</span>
<span class="gi">+       if (options_get_number(&amp;global_options, &quot;reverse-buffer&quot;)) {</span>
<span class="gi">+               paste_add(&amp;global_buffers, buf, off, limit);</span>
<span class="gi">+       } else {</span>
<span class="gi">+               paste_add(&amp;global_buffers, buf, off, limit);</span>
<span class="gi">+       }</span>
 }
</pre></div>

<p>あとは設定ファイルに以下を追加してmakeしたtmuxを起動してみます。</p>
<div class="pygments_murphy"><pre><span class="nb">set</span> -g reverse-buffer on
</pre></div>

<p>バッファにコピーした文字列がlist-buffersの後ろに追加されていけば成功です。
簡単ですよね？</p>
<h1 id="_8">まとめ</h1>
<p>以上、tmuxにreverse-bufferというオプションを追加して、バッファの挙動を変更できるようにしてみました。</p>
<p>端末制御のプログラムは普段あまり触れる機会がないし複雑そうなイメージがあって敬遠しがちですが、ちょっとした機能を追加するだけだったら意外と簡単だったりするのでどんどんいじってみるといいと思います。</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[blogofileでサムネイル画像を表示する方法]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2011/11/06/blofofile-test" />
    <id>http://mojavy.com/blog/2011/11/06/blofofile-test</id>
    <updated>2011-11-06T20:32:51Z</updated>
    <published>2011-11-06T20:32:51Z</published>
    <category scheme="http://mojavy.com/blog" term="python" />
    <category scheme="http://mojavy.com/blog" term="memo" />
    <category scheme="http://mojavy.com/blog" term="blogofile" />
    <summary type="html"><![CDATA[blogofileでサムネイル画像を表示する方法]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2011/11/06/blofofile-test"><![CDATA[<p><img alt="rena" src="/images/rena.jpg" /></p>
<p>こんな風にイメージ画像がある記事の場合は、一覧ページでもこの画像をサムネイルで表示させたい。</p>
<p>例えば、
<a href="http://mojavy.com">http://mojavy.com</a>
のトップページ右カラムにある最近の記事一覧みたいに画像を表示できるようにする。</p>
<p>これをするには、postオブジェクトにそういう属性をもたせればよいので、controllers/blog/post.pyに以下のように一行追加する。</p>
<div class="pygments_murphy"><pre><span class="gi">+++ b/_blogofile/_controllers/blog/post.py</span>
<span class="gu">@@ -93,6 +93,7 @@ class Post(object):</span>
         self.slug = None
         self.draft = False
         self.filters = None
<span class="gi">+        self.image = None</span>
         self.__parse()
         self.__post_process()
</pre></div>

<p>そうしておくと、各記事のヘッダにあるyamlから勝手に読み込んでくれるので、</p>
<div class="pygments_murphy"><pre><span class="l-Scalar-Plain">categories</span><span class="p-Indicator">:</span>
<span class="l-Scalar-Plain">date</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2011/11/06 20:32:51</span>
<span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span>
<span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/images/rena.jpg</span>
</pre></div>

<p>のようにすれば${post.image}のようにして参照できる。</p>
<ul>
<li><a href="https://github.com/taksatou/taksatou.github.com">https://github.com/taksatou/taksatou.github.com</a></li>
</ul>]]></content>
  </entry>
</feed>
