<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>mojavy.com</title>
    <link>http://mojavy.com/blog</link>
    <description></description>
    <pubDate>Wed, 06 Feb 2013 21:50:00 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Quicklinks 4</title>
      <link>http://mojavy.com/blog/2013/02/06/quicklinks4/</link>
      <pubDate>Wed, 06 Feb 2013 21:50:00 JST</pubDate>
      <category><![CDATA[quicklinks]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/02/06/quicklinks4/</guid>
      <description>Quicklinks 4</description>
      <content:encoded><![CDATA[<p><a href="http://mojavy.com/blog/2012/11/14/quicklinks3/">前回</a> から2ヵ月くらいあいてしまいまったのであまり新しくない情報もありますが気にせずいきます。</p>
<h4 id="q-gears"><a href="http://q-gears.sourceforge.net/index.phtml?content=1">Q-Gears</a></h4>
<p>FF7のゲームエンジンのクローンを目指したものだそうです。
LinuxやWindowsで動くようにクロスプラットフォームな設計になっていて、将来的にはsquareの他のゲームも動かすためのフレームワークとしても提供することも考えているようです。</p>
<ul>
<li><a href="http://q-gears.sourceforge.net/gears.pdf">http://q-gears.sourceforge.net/gears.pdf</a></li>
</ul>
<p>この資料にはシステムの概要が書かれてます。リバースエンジニアリングして集めた情報と思われますが、読み物としてもおもしろそうです。</p>
<h4 id="riemann"><a href="http://riemann.io/">Riemann</a></h4>
<p>Clojureで書かれたnetwork event stream processing systemとのこと。</p>
<p><a href="http://riemann.io/concepts.html">ここ</a>のイラストと説明を見れば大体イメージはわくと思います。
コンセプト的にはfluentdに近い気がしますが、集める対象がログではなくイベントそれ自体なので適用範囲は広そうです。
Riemann自体が落ちたときにどうなるか、とか実際に運用するとなると色々気になるところはありそうですが試してみる価値はありそうです。</p>
<p>Clojureで書けるというのもとがってていいと思います。</p>
<h4 id="whistlepig"><a href="https://github.com/wmorgan/whistlepig">whistlepig</a></h4>
<p>Cで書かれた軽量なリアルタイム全文検索のためのライブラリです。
複数プロセスでも同時にインデックスを読み書きできるようで、なかなか便利そうです。今度詳細を調べてみようと思います。</p>
<h4 id="montezuma"><a href="http://code.google.com/p/montezuma/">Montezuma</a></h4>
<p>こっちはFerretのCommon Lispに移植したもの。ちなみにFerretはLuceneをRubyに移植したものです。
これはこれで便利だと思います。</p>
<h4 id="openrtb"><a href="http://code.google.com/p/openrtb/">OpenRTB</a></h4>
<p>広告業界ではread-time biddingが最近のトレンドのようなので、関係者はこれを読んで理解を深めましょう。</p>
<h4 id="ios-security-internals"><a href="http://365.rsaconference.com/servlet/JiveServlet/previewBody/3488-102-1-4589/MBS-402.pdf">iOS Security Internals</a></h4>
<p>jailbreakやったりする人がつくった資料のようです。
これもなかなか興味深いです。</p>
<h4 id="unreal4"><a href="http://www.unrealengine.com/unreal_engine_4/">UNREAL4</a></h4>
<p>Unity3でも十分すごいと思いましたが、最近のゲームエンジンはどれもすごいですね。</p>
<ul>
<li>http://www.wmtdesigners.com/wordpress/game-2012-06-19</li>
</ul>
<h4 id="leap-motion"><a href="https://www.leapmotion.com/">Leap Motion</a></h4>
<p>xboxのkinect的なものですが、それよりはるかに上回る精度らしいです。プレオーダーしたので届いたら色々遊んでみます。</p>]]></content:encoded>
    </item>
    <item>
      <title>人気プログラミング言語ランキング(stackoverflow調べ)</title>
      <link>http://mojavy.com/blog/2013/02/05/popular-programming-languages/</link>
      <pubDate>Tue, 05 Feb 2013 23:00:00 JST</pubDate>
      <category><![CDATA[programming]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/02/05/popular-programming-languages/</guid>
      <description>人気プログラミング言語ランキング(stackoverflow調べ)</description>
      <content:encoded><![CDATA[<p><img alt="stack" src="/images/stackoverflow-200.png" /></p>
<p>なんとなく気になったのでstackoverflowのでの人気プログラミング言語ランキングをつくってみました。(2013-02-05現在)</p>
<div class="pygments_murphy"><pre>1.   c#              411382pt
2.   java            361120pt
3.   php             337941pt
4.   javascript      321791pt
5.   c++             175790pt
6.   python          160796pt
7.   html            145373pt
8.   objective-c     119891pt
9.   sql             115147pt
10.  css             113039pt
11.  c               83501pt
12.  ruby            64350pt
13.  xml             56444pt
14.  regex           51670pt
15.  vb.net          41260pt
16.  html5           27217pt
17.  linq            26200pt
18.  actionscript-3  24286pt
19.  perl            24092pt
20.  r               23256pt
21.  delphi          18866pt
22.  tsql            18119pt
23.  matlab          15289pt
24.  xaml            14115pt
25.  scala           13444pt
26.  vba             12300pt
27.  css3            11564pt
28.  xslt            11032pt
29.  haskell         9827pt
30.  assembly        7580pt
31.  razor           7385pt
32.  actionscript    6440pt
33.  excel-vba       6309pt
34.  groovy          5551pt
35.  vbscript        4926pt
36.  c++11           4894pt
37.  vb6             4886pt
38.  xhtml           4675pt
39.  plsql           4548pt
40.  svg             4540pt
41.  f#              4341pt
42.  python-3.x      4229pt
43.  awk             3481pt
44.  wsdl            3249pt
45.  lua             3183pt
46.  erlang          3077pt
47.  coffeescript    2754pt
48.  c#-3.0          2615pt
49.  latex           2570pt
50.  lisp            2395pt
51.  mathematica     2395pt
52.  prolog          2317pt
53.  scheme          2199pt
54.  uml             2093pt
55.  applescript     2092pt

-- 次点

go         1648pt
ocaml      1329pt
d          877pt
</pre></div>

<h3 id="_1">補足</h3>
<ul>
<li>stackoverflow APIを利用して調べました。stackoverflow公式のものではありません。</li>
<li>ランキングは質問につけられたタグの件数順です。</li>
<li>プログラミング言語のタグは、tag infoのエントリに/language/i がマッチするかどうかで抽出し、明かにプログラミング言語じゃないものは手動で適当に除外しました。</li>
<li>マークアップ言語とかバージョン違いで複数ある言語とか微妙なのはそのまま残しました。</li>
<li>次点以下の言語は、apiをしばらくクロールしてもでてこなかった言語のうち思いついたものを手動でしらべました。</li>
</ul>
<h3 id="_2">所感</h3>
<p>C#が1位なのはちょっと意外でしたがそれ以外は大体イメージ通りでした。
質問が多い順でもあるので、下位にある言語は質問が少なくて逆にイケてると言えなくもないですね。</p>
<p>D言語すばらしい。</p>
<p>ともあれ、stackoverflowのAPIは結構充実してるので色々遊べそうです。</p>
<ul>
<li><a href="http://api.stackoverflow.com/1.0/usage">http://api.stackoverflow.com/1.0/usage</a></li>
</ul>]]></content:encoded>
    </item>
    <item>
      <title>C言語の文字列初期化について</title>
      <link>http://mojavy.com/blog/2013/01/21/c-string-initialization/</link>
      <pubDate>Mon, 21 Jan 2013 20:00:00 JST</pubDate>
      <category><![CDATA[C]]></category>
      <category><![CDATA[programming]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/01/21/c-string-initialization/</guid>
      <description>C言語の文字列初期化について</description>
      <content:encoded><![CDATA[<p>なんとなく気になったので以下ひとりごと。</p>
<hr>

<p>Cで文字列を初期化するときは以下のように書く。</p>
<div class="pygments_murphy"><pre>char str[] = &quot;xyz&quot;;
</pre></div>

<p>こう書けばNULL終わりのchar配列としてスタックに格納してくれるので、以下のように書くのと同じことになる。</p>
<div class="pygments_murphy"><pre>char str1[4] = &quot;xyz&quot;;
char str2[4] = {&#39;x&#39;, &#39;y&#39;, &#39;z&#39;, &#39;\0&#39;};
</pre></div>

<p>文字列はcharのポインタで扱うからといって、</p>
<div class="pygments_murphy"><pre>char *str = &quot;xyz&quot;;
</pre></div>

<p>のように書くと違う意味になる。
こう書くと"xyz"が格納されているアドレスでポインタを初期化する。文字列リテラルで宣言したデータが格納される領域は通常はread onlyなので<code>*str='X'</code>などとするとセグフォするが、通常の代入と同じ意味なので違和感はない。</p>
<p>でも、<code>char str[] = "xyz";</code> のほうはは冷静に考えると気持ち悪い。初期化と代入は違うといってしまえばそれまでだけど、この式だけみても予備知識がないとなにがおこるのかわからないと思う。</p>
<p>以下のような挙動も合理的とは思えない。そもそもCに配列なんて必要なかったのではないか。</p>
<div class="pygments_murphy"><pre>void f1(char s[]) {
    /* 意味はないけどエラーでもない */
    s = &quot;baz&quot;;
}

void f2(void) {
    char s[] = &quot;foo&quot;;
    /* これはエラー */
    /* s = &quot;bar&quot;; */
}
</pre></div>

<p>などということを今更ながら考えて悶々としていたのだけど、結局のところこういう類の便利機能は欲しくなってくるわけで、便利さのために不合理を許容するとなるとこのあたりが妥当な落とし所のような気もしてきた。</p>
<p>まとめ：プログラミング言語を考える人はすごい</p>]]></content:encoded>
    </item>
    <item>
      <title>tmuxでalcの英単語を引く</title>
      <link>http://mojavy.com/blog/2013/01/11/alc-nokogiri-tmux/</link>
      <pubDate>Fri, 11 Jan 2013 22:00:00 JST</pubDate>
      <category><![CDATA[ruby]]></category>
      <category><![CDATA[tmux]]></category>
      <category><![CDATA[english]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/01/11/alc-nokogiri-tmux/</guid>
      <description>tmuxでalcの英単語を引く</description>
      <content:encoded><![CDATA[<p><img alt="english" src="/images/english-200.png" /></p>
<p><b>2013-01-15追記 規約違反とのコメント頂いたのでスクレイピングするスクリプトを削除しました。</b></p>
<p>tmuxのcommand-promptを使うと任意のコマンドをインタラクティブに実行できます。
これをつかってtmux上でalcの英単語を表示できるようにしたら思いの外便利だったので紹介します。</p>
<p>まず、alcの検索結果をスクレイビングしていい感じに表示するコマンドをつくります。
rubyのnokogiriとrainbowに依存してますが、ぼくがつくった適当なスクリプトでよければこれを使って下さい。</p>
<div class="pygments_murphy"><pre><span class="c1"># 2013-01-15 削除しました</span>
</pre></div>

<p>これをパスの通った場所にalcという名前で保存して、.tmux.confに以下の設定を追記します。</p>
<div class="pygments_murphy"><pre>unbind C-a
<span class="nb">bind </span>C-a <span class="nb">command</span>-prompt <span class="s2">&quot;split-window -h &#39;alc %% | lv -c&#39;&quot;</span>
</pre></div>

<p>C-aにバインドしてますがお好みのキーに変えてください。
rainbowで色付けしてるのでエスケープシーケンスを解釈できるpagerをつかって下さい。</p>
<p>これで.tmux.confをリロードして、prefix-key C-a とかするとtmux上にプロンプトが表示されるので、そこで調べたい単語を入力します。
そうすると新しいpaneに結果が表示されます。pagerを閉じると自動的にpaneも閉じます。</p>]]></content:encoded>
    </item>
    <item>
      <title>yaml-modeを拡張してyamlを高速に編集する</title>
      <link>http://mojavy.com/blog/2013/01/09/yaml-mode-ext/</link>
      <pubDate>Wed, 09 Jan 2013 22:00:00 JST</pubDate>
      <category><![CDATA[elisp]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/01/09/yaml-mode-ext/</guid>
      <description>yaml-modeを拡張してyamlを高速に編集する</description>
      <content:encoded><![CDATA[<p><img alt="emacs" src="/images/carbon-emacs-icon-200.png" /></p>
<p>とあるプロジェクトで巨大なyamlを編集しなければならない時があるのですが、素の<a href="https://github.com/yoshiki/yaml-mode">yaml-mode</a>だけだと非力に感じたので拡張するためのemacs lispを書きました。</p>
<p>といっても、現状ではブロック単位で移動する関数を適当にyaml-mode-mapにバインドしているだけの単純なものです。</p>
<p>使い方は、<a href="https://github.com/taksatou/yaml-mode-ext">https://github.com/taksatou/yaml-mode-ext</a>からおとしてきてloadするだけです。
(yaml-modeはあらかじめインストールしておく必要があります)</p>
<div class="pygments_murphy"><pre>(load-file &quot;path/to/yaml-mode-ext.el&quot;)
</pre></div>

<p>以下のキーバインドが使えます。</p>
<ul>
<li>M-C-f  同じ階層の次のブロックへ移動</li>
<li>M-C-b  同じ階層の前のブロックへ移動</li>
<li>M-C-u  親ブロックの先頭へ移動</li>
<li>M-C-e  親ブロックの末尾へ移動</li>
<li>M-C-d  直下の子ブロックへ移動</li>
</ul>
<p>当初はyaml-modeをhideshow.elに対応させようと思ってたのですが、ブロック単位で移動ができるようになったところで満足してしまいました。</p>
<p>なお、ブロックの境界はインデントレベルだけをみて判定しているのでyamlに限定する必要はなかった気はしますが、pythonとかhaskellとかでもつかいたくなってきたら書き直そうと思います。</p>]]></content:encoded>
    </item>
    <item>
      <title>おやつの時間をお知らせしてくれるUnixコマンド：at teatime (他...)</title>
      <link>http://mojavy.com/blog/2013/01/08/favorite-linux-command/</link>
      <pubDate>Tue, 08 Jan 2013 20:30:00 JST</pubDate>
      <category><![CDATA[unix]]></category>
      <category><![CDATA[tips]]></category>
      <category><![CDATA[linux]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/01/08/favorite-linux-command/</guid>
      <description>おやつの時間をお知らせしてくれるUnixコマンド：at teatime (他...)</description>
      <content:encoded><![CDATA[<p><img alt="banana" src="/images/banana-200.png" /></p>
<p><a href="http://clippy.in/b/YJLM9W">Favorite Linux Commands(http://clippy.in/b/YJLM9W)</a> で紹介されてたコマンドのうち知らなかったものをメモ。</p>
<h2 id="at">at</h2>
<p>入力されたコマンドを指定されたタイミングで実行するようにスケジュールする。
cronに登録するほどでもない単発のコマンドを実行したいときとかにつかう。
時間の指定には現在の時刻からの経過時間や絶対時間の他にteatimeやmidnightといった文字列もつかえる。
ちなみにteatimeは午後4時。
出力先を指定しなければコマンドの出力はcronと同じようにメールにとぶ。$TTYにリダイレクトしてやればコマンドを実行した端末に表示させることもできる。</p>
<p>例</p>
<div class="pygments_murphy"><pre>echo &quot;echo おやつの時間です &gt; $TTY&quot;| at teatime
echo &quot;echo はろー &gt; $TTY&quot; | at now + 3 minute
</pre></div>

<h2 id="mtr">mtr</h2>
<p>tracerouteとpingをあわせたようなもの。tracerouteより表示がみやすい。
ネットワークのどこで時間がかかってるのか一目でわかる。</p>
<p>例</p>
<div class="pygments_murphy"><pre>mtr mojavy.com
</pre></div>

<h2 id="column">column</h2>
<p>入力テキストをいい感じのカラム表示にフォーマットしてくれる。
縦に長い出力するコマンドとか、そのままだと出力がみづらいときとかにつかう。</p>
<p>例</p>
<div class="pygments_murphy"><pre>gem list | column
mount | column -t
grep -v &#39;^#&#39; /etc/apt/sources.list | column -t
</pre></div>

<h2 id="reset">reset</h2>
<p>端末をリセットする。
うっかりバイナリファイルをcatとかしてしまって端末が壊れてしまった場合に端末を閉じずに復帰できる。</p>
<h2 id="sshfs">sshfs</h2>
<p>ssh経由でリモートのファイルシステムをマウントできる。</p>
<p>例</p>
<div class="pygments_murphy"><pre>sshfs name@server:/path/to/dir /path/to/mount/point
fusermount -u /path/to/mount/point  # unmount
</pre></div>

<h2 id="_1">その他</h2>
<p>以下はコマンド自体の機能ではないけど覚えておくと便利かもしれないもの</p>
<h3 id="curl-ifconfigme">curl ifconfig.me</h3>
<p>ifconfig.meというサイトがある。自分のグローバルIPがわかる。</p>
<h3 id="dig-short-txt-wzxhzdk5wpdgcx">dig +short txt <keyword>.wp.dg.cx</h3>
<p>dnsクエリでwikipediaのエントリーがみれる。</p>
<p>例</p>
<div class="pygments_murphy"><pre><span class="nv">$ </span>dig +short txt banana.wp.dg.cx
<span class="s2">&quot;Banana is the common name for herbaceous plants of the genus Musa and for the fruit they produce. It is one of the oldest cultivated plants. They are native to tropical South and Southeast Asia, and are likely to have been first domesticated in Papua New &quot;</span> <span class="s2">&quot;Guinea. Today, they are cultivated throughout the tropics. They are grown in at least 107 countries, primarily for their... http://en.wikipedia.org/wiki/Banana&quot;</span>
</pre></div>]]></content:encoded>
    </item>
    <item>
      <title>2012年の振り返りと2013年の抱負</title>
      <link>http://mojavy.com/blog/2013/01/08/2012-summary/</link>
      <pubDate>Tue, 08 Jan 2013 00:30:00 JST</pubDate>
      <category><![CDATA[others]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/01/08/2012-summary/</guid>
      <description>2012年の振り返りと2013年の抱負</description>
      <content:encoded><![CDATA[<p><img alt="tool" src="/images/snake-200.png" /></p>
<p>早いもので1月も8日に突入してしまいましたが、2012年の振り返りと今年の抱負について書いておこうと思います。</p>
<p>2012年にやったことのうち思いだせる範囲かつ主観的にみてそれなりにやった感のあるものを列挙してみます。</p>
<ul>
<li>Androidアプリ開発</li>
<li>iOSアプリ開発</li>
<li>Unityゲーム開発</li>
<li>Common Lisp</li>
<li>Phonegap (Cordova)</li>
<li>Hadoop</li>
<li>HBase</li>
<li>Symfony</li>
<li>FuelPHP</li>
<li>Jenkins</li>
<li>Gearman</li>
</ul>
<p>こうしてならべてみると色々やった年でした。今年だけでC#, Objective-C, Common Lispの3つの言語を新たに使えるようになったし、新しいものを多くやったという意味ではよかったです。
ただ、長い目で見て有用なスキルが身に付いたかというとそうでもない気がします。技術的に深く掘り下げたものがあまりなかったのも残念です。</p>
<p>また、転職や引越しがあったり、自炊をするようになったり、持ってた本をほぼ全部bookscanで電子書籍化したり、とプライベートの生活はそれなりに変化がありました。</p>
<p>今後やりたいことは色々ありますが、もろもろ短かくまとめて</p>
<ul>
<li>心身を鍛える</li>
<li>たくさん遊ぶ</li>
</ul>
<p>というのを2013年の抱負としてやっていこうかと思ってます。</p>
<p>今年もよろしくお願いします。</p>]]></content:encoded>
    </item>
    <item>
      <title>gearmanクライアントライブラリ cl-gearman</title>
      <link>http://mojavy.com/blog/2012/12/16/common-lisp-libraries-advent-calendar-2012-16/</link>
      <pubDate>Sun, 16 Dec 2012 17:30:00 JST</pubDate>
      <category><![CDATA[gearman]]></category>
      <category><![CDATA[common lisp]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2012/12/16/common-lisp-libraries-advent-calendar-2012-16/</guid>
      <description>gearmanクライアントライブラリ cl-gearman</description>
      <content:encoded><![CDATA[<p><img alt="tool" src="/images/gearman-logo.png" /></p>
<p><b>この投稿は<a href="http://qiita.com/advent-calendar/2012/clladvent">Common Lisp Libraries Advent Calendar 2012</a>の16日目の記事です。</b></p>
<p>GearmanをCommon Lispから使いたかったのですが、既存のものが見付からなかったのでcl-gearmanというものをつくってみました。というわけで紹介、もとい宣伝をさせてもらおうと思います。</p>
<h2 id="gearman">Gearmanとは</h2>
<p>今更感はありますが、Gearman自体について簡単に説明しておきます。</p>
<p><a href="http://gearman.org/">http://gearman.org/</a></p>
<p>Gearmanとは時間のかかる処理を複数のコンピュータに振り分けるように設計されたオープンソースのアプリケーションフレームワークです。Gearmanを利用するアプリケーションでは、client, job server, workerという3つの要素が存在します。
それぞれの役割は以下の通りです。</p>
<ul>
<li>job server: clientから受けとったジョブを適切なworkerに渡す</li>
<li>client: ジョブを生成してjob serverに送信する</li>
<li>worker: job serverを経由して、clientによってリクエストされたジョブを実行してそのレスポンスを返す</li>
</ul>
<p>cl-gearmanは、clientとjob server間、及びworkerとjob server間のプロトコルを抽象化したライブラリです。</p>
<p>余談ですが、Gearmanはデータ永続化をしないものだとずっと思っていたのですがmysqlやsqliteに永続化できます。
ジョブキューを使うなら以前はTheSchwartzという選択肢もありましたが、今はGearmanでほとんどの場合に対応できるのではないでしょうか。</p>
<h2 id="_1">インストール</h2>
<p>まだquicklispに登録されていないので、githubからソースコードをダウンロードして下さい。(後日申請予定)</p>
<p><a href="https://github.com/taksatou/cl-gearman">https://github.com/taksatou/cl-gearman</a></p>
<div class="pygments_murphy"><pre><span class="nb">cd</span> ~/quicklisp/local-projects
git clone https://github.com/taksatou/cl-gearman.git
</pre></div>

<h2 id="_2">使い方</h2>
<p>以下サンプルコードです</p>
<h3 id="client">client</h3>
<p>submit-jobはjob serverにジョブを送信し、workerがそれを完了するまで待機します。workerが処理を完了するとその返り値が文字列で返されます。</p>
<div class="pygments_murphy"><pre>CL-USER&gt; (cl-gearman:with-client (client &quot;localhost:4730&quot;)
           (format t &quot;~a~%&quot; (cl-gearman:submit-job client &quot;hello&quot;))
           (format t &quot;~a~%&quot; (cl-gearman:submit-job client &quot;echo&quot; :arg &quot;foo)))
hello
foo
NIL
</pre></div>

<p>以下のようにしてバックグランドでジョブを実行することもできます。バックグランドでジョブを実行するとjobオブジェクトが即座に返されます。
そのjobオブジェクトをつかって、ジョブのステータスを取得することができます。以下の例では見辛いですが、priorityを付けることでジョブの実行順を多少は制御できます。</p>
<div class="pygments_murphy"><pre>CL-USER&gt; (cl-gearman:with-client (client &quot;localhost:4730&quot;)
           (let* ((job1 (cl-gearman:submit-background-job client &quot;sleep&quot; :arg &quot;1&quot;))
                  (job2 (cl-gearman:submit-background-job client &quot;sleep&quot; :arg &quot;1&quot; :priority :low))
                  (job3 (cl-gearman:submit-background-job client &quot;sleep&quot; :arg &quot;1&quot; :priority :high))
                  (jobs `(:medium ,job1 :low ,job2 :high ,job3)))

             (dotimes (i 5)
               (loop for (k v) on jobs by #&#39;cddr
                  do (format t &quot;~a: ~a~%&quot; k (cl-gearman:get-job-status client v)))
               (sleep 1))))
MEDIUM: (JOB-HANDLE H:hostname:109 IS-KNOWN 1 IS-RUNNING 1 PROGRESS NAN)
LOW: (JOB-HANDLE H:hostname:110 IS-KNOWN 1 IS-RUNNING 0 PROGRESS NAN)
HIGH: (JOB-HANDLE H:hostname:111 IS-KNOWN 1 IS-RUNNING 0 PROGRESS NAN)
MEDIUM: (JOB-HANDLE H:hostname:109 IS-KNOWN 0 IS-RUNNING 0 PROGRESS NAN)
LOW: (JOB-HANDLE H:hostname:110 IS-KNOWN 1 IS-RUNNING 0 PROGRESS NAN)
HIGH: (JOB-HANDLE H:hostname:111 IS-KNOWN 1 IS-RUNNING 0 PROGRESS NAN)
MEDIUM: (JOB-HANDLE H:hostname:109 IS-KNOWN 0 IS-RUNNING 0 PROGRESS NAN)
LOW: (JOB-HANDLE H:hostname:110 IS-KNOWN 1 IS-RUNNING 0 PROGRESS NAN)
HIGH: (JOB-HANDLE H:hostname:111 IS-KNOWN 1 IS-RUNNING 1 PROGRESS NAN)
MEDIUM: (JOB-HANDLE H:hostname:109 IS-KNOWN 0 IS-RUNNING 0 PROGRESS NAN)
LOW: (JOB-HANDLE H:hostname:110 IS-KNOWN 1 IS-RUNNING 1 PROGRESS NAN)
HIGH: (JOB-HANDLE H:hostname:111 IS-KNOWN 0 IS-RUNNING 0 PROGRESS NAN)
MEDIUM: (JOB-HANDLE H:hostname:109 IS-KNOWN 0 IS-RUNNING 0 PROGRESS NAN)
LOW: (JOB-HANDLE H:hostname:110 IS-KNOWN 0 IS-RUNNING 0 PROGRESS NAN)
HIGH: (JOB-HANDLE H:hostname:111 IS-KNOWN 0 IS-RUNNING 0 PROGRESS NAN)
NIL
</pre></div>

<h3 id="worker">worker</h3>
<p>workerはadd-abilityで実行できるジョブとそのハンドラをあらかじめ登録する必要があります。
ハンドラは2つの引数をとる関数で、第一引数はclientからのデータ、第二引数はjobオブジェクトです。
返り値はprincでフォーマットした文字列としてclientに渡されます。workを実行するとジョブが割り当てられるまでブロックし、1つのジョブの実行が完了すると戻ります。</p>
<div class="pygments_murphy"><pre>(cl-gearman:with-worker (worker &quot;localhost:4730&quot;)
  (cl-gearman:add-ability worker &quot;hello&quot;
                          #&#39;(lambda (arg job) &quot;hello&quot;))

  (cl-gearman:add-ability worker &quot;echo&quot;
                          #&#39;(lambda (arg job) arg))

  (cl-gearman:add-ability worker &quot;sleep&quot;
                          #&#39;(lambda (arg job)
                              (sleep (parse-integer arg))
                              (format nil &quot;job:~A finished~%&quot; job)))

  (loop do (cl-gearman:work worker)))
</pre></div>

<h3 id="_3">エラーハンドリング</h3>
<p>ジョブキューを使う上で悩ましいことの一つはエラー処理だと思いますが、Common Lispのコンディションシステムを使えば柔軟に対応できます。
workerのハンドラでは、skip-job, abort-job, retry-job の3パターンのリトライをサポートしています。</p>
<p>例えば、</p>
<div class="pygments_murphy"><pre>(cl-gearman:with-worker (worker &quot;localhost:4730&quot;) 
  (cl-gearman:add-ability worker &quot;error&quot;
                          #&#39;(lambda (arg job) (error &quot;something wrong&quot;)))

  (loop do (handler-bind ((error #&#39;(lambda (c) (invoke-restart &#39;cl-gearman:skip-job))))
             (cl-gearman:work worker))))
</pre></div>

<p>のようにしておけば、エラーが発生したjobを無視することができます。
abort-jobはclientに失敗を通知します。retry-jobは名前の通りハンドラを再度実行します。</p>
<h2 id="_4">対応する処理系</h2>
<p>メインに開発を行った環境は ubuntu 12.04, sbcl 1.0.55.0.debian です。
一応以下の処理系で動作確認しました</p>
<ul>
<li>sbcl 1.0.55.0.debian </li>
<li>clisp 2.49</li>
<li>clozure cl 1.8-r15286M</li>
</ul>
<p>ffi系のライブラリには依存してないので比較的動かしやすいとは思いますが、動かなければ教えて下さい。</p>
<h2 id="_5">まとめ</h2>
<p>以上、拙作のcl-gearmanを紹介しました。Common Lispを始めてまだ半年足らずなのでおかしいところがあるかと思いますが、フィードバックを頂けるとうれしいです。</p>]]></content:encoded>
    </item>
    <item>
      <title>ウェブエンジニアのためのオンラインツールまとめ</title>
      <link>http://mojavy.com/blog/2012/11/20/web-engineers-online-toolbox/</link>
      <pubDate>Tue, 20 Nov 2012 02:30:00 JST</pubDate>
      <category><![CDATA[web]]></category>
      <category><![CDATA[tips]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2012/11/20/web-engineers-online-toolbox/</guid>
      <description>ウェブエンジニアのためのオンラインツールまとめ</description>
      <content:encoded><![CDATA[<p><img alt="tool" src="/images/tool-logo.png" /></p>
<p><a href="http://ivanzuzak.info/2012/11/18/the-web-engineers-online-toolbox.html">The Web engineer's online toolbox</a>というまとめ記事が便利そうだったので、実際に試しつつ抄訳してみました。(一部のコメントと体裁は変えています。)</p>
<h2 id="_1">目次</h2>
<div class="toc">
<ul>
<li><a href="#_1">目次</a></li>
<li><a href="#_2">一覧</a><ul>
<li><a href="#requestbin">RequestBin</a></li>
<li><a href="#hurl">Hurl</a></li>
<li><a href="#httpbin">httpbin</a></li>
<li><a href="#redbot">REDbot</a></li>
<li><a href="#webgun">WebGun</a></li>
<li><a href="#apify">Apify</a></li>
<li><a href="#unicorn">Unicorn</a></li>
<li><a href="#feed-validator">Feed validator</a></li>
<li><a href="#link-checker">Link checker</a></li>
<li><a href="#host-tracker">Host tracker</a></li>
<li><a href="#pingdom-full-page-test">Pingdom Full page test</a></li>
<li><a href="#har-viewer">HAR viewer</a></li>
<li><a href="#cors-proxy">CORS proxy</a></li>
<li><a href="#browserling">Browserling</a></li>
<li><a href="#websocket-echo-test">WebSocket Echo Test</a></li>
<li><a href="#yql">YQL</a></li>
<li><a href="#yahoo-pipes">Yahoo Pipes</a></li>
<li><a href="#apiary">Apiary</a></li>
</ul>
</li>
<li><a href="#_3">おわりに</a></li>
</ul>
</div>
<h2 id="_2">一覧</h2>
<h3 id="requestbin"><a href="http://requestb.in/">RequestBin</a></h3>
<p>httpリクエストを保存するエンドポイントを作ってくれる。</p>
<p>Create a RequestBin のボタンをクリックするとURLが表示されるので、そこをHTTPクライアントからたたくとRequestBin側にリクエスト内容が記録される。
ソースも公開されてるのでローカルで立ちあげることもできる。</p>
<p>githubの<a href="https://help.github.com/articles/testing-webhooks">webhookのhelp</a>も参考にどうぞ。</p>
<h3 id="hurl"><a href="http://hurl.it">Hurl</a></h3>
<p>httpリクエストを実行してくれる。パーマリンクも作ってくれるので、POSTリクエストもコピペで他の人と共有できる。</p>
<ul>
<li>類似サービス: <a href="http://resttesttest.com/">REST test test</a> ,  <a href="https://apigee.com/console/others">Apigee console</a> </li>
</ul>
<h3 id="httpbin"><a href="http://httpbin.org/">httpbin</a></h3>
<p>HTTPリクエスト側でレスポンスのHTTP status codeやレスポンスやリダイレクト、cookieなどを制御できる。HTTPクライアントのテストに便利。</p>
<ul>
<li>類似サービス: <a href="http://ivanzuzak.info/urlecho/">UrlEcho</a></li>
</ul>
<h3 id="redbot"><a href="http://redbot.org/">REDbot</a></h3>
<p>HTTPのリソースをチェックしてくれる。問題を検出したら改善案のサジェストもしてくれる。</p>
<ul>
<li>類似サービス: <a href="http://zamez.org/httplint">HTTP lint</a></li>
</ul>
<h3 id="webgun"><a href="http://webgun.io/">WebGun</a></h3>
<p>webhookを簡単に作るためのAPIを提供している。現在はまだベータっぽい。</p>
<h3 id="apify"><a href="http://apify.heroku.com">Apify</a></h3>
<p>ウェブページをスクレイピングしてJSON API化してくれる。
CSSセレクタかxpathに名前をつけて設定するだけでよしなにやってくれる。</p>
<p><a href="http://apify.heroku.com/resources/50a99278a7301c000200005a">試しに元記事をAPI化してみた</a></p>
<h3 id="unicorn"><a href="http://validator.w3.org/unicorn/">Unicorn</a></h3>
<p>前述の<a href="http://redbot.org/">REDbot</a>はHTTPをチェックしてくれるけど、こちらはHTMLドキュメントがW3Cに準拠してるかをバリデートしてくれる。</p>
<ul>
<li>類似サービス: <a href="http://lint.brihten.com/html/">HTML lint</a></li>
</ul>
<h3 id="feed-validator"><a href="http://validator.w3.org/feed/">Feed validator</a></h3>
<p>こちらはRSSとATOMフィードをバリデートしてくれる。</p>
<h3 id="link-checker"><a href="http://validator.w3.org/checklink">Link checker</a></h3>
<p>リンクを再帰的にたどって、重複やリンク切れをチェックしてくれる。</p>
<h3 id="host-tracker"><a href="http://www.host-tracker.com/">Host tracker</a></h3>
<p>ウェブサイトのモニタリングサービス。定期的にpingして、問題があった場合はメール通知してくれる。</p>
<ul>
<li>類似サービス: <a href="http://www.downforeveryoneorjustme.com/">Down for everyone or just me</a>, <a href="http://tools.pingdom.com/ping/">Pimgdom ping service</a></li>
</ul>
<h3 id="pingdom-full-page-test"><a href="http://tools.pingdom.com/fpt/">Pingdom Full page test</a></h3>
<p>ウェブページのロード時間を計測、解析してくれる。リクエストを実行するサーバは米国しかないので国内だとちょっと使いづらい。
類似サービスの<a href="http://www.webpagetest.org/">Web page test</a>ならTokyoが選べる。</p>
<h3 id="har-viewer"><a href="http://www.softwareishard.com/har/viewer/">HAR viewer</a></h3>
<p>HTTP tracking toolsで生成されたHTTP Archive (HAR)形式のログをビジュアライズしてくれる。</p>
<h3 id="cors-proxy"><a href="http://www.corsproxy.com/">CORS proxy</a></h3>
<p>クロスドメインでjsを実行できるようにヘッダを追加してレスポンスしてくれるプロキシ。</p>
<h3 id="browserling"><a href="https://browserling.com/">Browserling</a></h3>
<p>ブラウザ上で動くインタラクティブなクロスブラウザ。メジャーなブラウザは大体サポートされている。
動作は重いけど表示確認くらいになら無料のままでも使えそう。</p>
<h3 id="websocket-echo-test"><a href="http://www.websocket.org/echo.html">WebSocket Echo Test</a></h3>
<p>WebSocketをテストできるエコーサーバ。</p>
<h3 id="yql"><a href="http://developer.yahoo.com/yql/">YQL</a></h3>
<p>ウェブサービスからとってきたデータをSQLっぽい言語で整形できる。</p>
<h3 id="yahoo-pipes"><a href="http://pipes.yahoo.com/pipes/">Yahoo Pipes</a></h3>
<p>ウェブサービスをGUIでマッシュアップできる。</p>
<h3 id="apiary"><a href="http://apiary.io/">Apiary</a></h3>
<p>良い感じのREST APIドキュメントをインタラクティブなインスペクタをつかってジェネレートできる。まだベータ。</p>
<ul>
<li>類似サービス: <a href="http://swagger.wordnik.com/">Swagger</a></li>
</ul>
<h2 id="_3">おわりに</h2>
<ul>
<li>いくつかのツールはサーバに負荷をかけてしまう可能性があるので注意してつかってください。</li>
<li>他にもなにかあれば教えてもらえるとうれしいです。</li>
</ul>]]></content:encoded>
    </item>
    <item>
      <title>Quicklinks 3</title>
      <link>http://mojavy.com/blog/2012/11/14/quicklinks3/</link>
      <pubDate>Wed, 14 Nov 2012 23:30:00 JST</pubDate>
      <category><![CDATA[quicklinks]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2012/11/14/quicklinks3/</guid>
      <description>Quicklinks 3</description>
      <content:encoded><![CDATA[<p><img alt="shader" src="/images/shader-200.png" /></p>
<p>最近はUnityを使う機会を得たのでゲーム関連技術についていろいろ調べてました。</p>
<h3 id="shadow-algorithms-for-real-time-rendering"><a href="http://www.mpi-inf.mpg.de/~mschwarz/papers/shadowcourse-eg10.pdf">Shadow Algorithms for Real-time Rendering</a></h3>
<p>シェーダーを扱った講義資料らしい。この講義を元にした本がでていて<a href="http://www.amazon.co.jp/%E3%83%AA%E3%82%A2%E3%83%AB%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%B7%E3%83%A3%E3%83%89%E3%82%A6-Elmar-Eisemann/dp/4862461670/ref=pd_sim_fb_1">日本語翻訳</a>もあるみたいです。
モデリングは絵心がないとちょっと難しそうだけど、こういうのであれば自分で書いてみたいです。</p>
<h3 id="black-tie"><a href="https://github.com/aerique/black-tie">black-tie</a></h3>
<p>ノイズ生成アルゴリズムというものに興味がわきました。残念ながらこのライブラリはあまりメンテはされてない。</p>
<h3 id="_1">物理演算系ライブラリ</h3>
<p>2次元剛体のシュミレーションならChipmunkとかBox2Dあたりで気軽にできそうですが、3次元のやわらかいもの表現するにはちょっとハードルがあがるようです。</p>
<ul>
<li><a href="http://bulletphysics.org/wordpress/">BULLET</a></li>
<li><a href="http://www.sofa-framework.org/">SOFA</a></li>
<li><a href="http://code.google.com/p/opencloth/">opencloth</a></li>
</ul>
<p>物理演算を駆使した3次元リアルぷよぷよがやってみたいです。</p>
<h3 id="mixamo"><a href="http://www.mixamo.com/">mixamo</a></h3>
<p>こういう素材がもっと増えるといいですね。</p>]]></content:encoded>
    </item>
  </channel>
</rss>
