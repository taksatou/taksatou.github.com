<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">mojavy.com</title>
  <subtitle type="text"></subtitle>

  <updated>2013-02-19T20:30:00Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://mojavy.com/blog" />
  <id>http://mojavy.com/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://mojavy.com/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[Rainbow for Common Lisp 作りました]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2013/02/19/rainbow-for-common-lisp/" />
    <id>http://mojavy.com/blog/2013/02/19/rainbow-for-common-lisp/</id>
    <updated>2013-02-19T20:30:00Z</updated>
    <published>2013-02-19T20:30:00Z</published>
    <category scheme="http://mojavy.com/blog" term="ruby" />
    <category scheme="http://mojavy.com/blog" term="common lisp" />
    <summary type="html"><![CDATA[Rainbow for Common Lisp 作りました]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2013/02/19/rainbow-for-common-lisp/"><![CDATA[<p><img alt="lisp" src="/images/cl-rainbow-demo.png" /></p>
<p><a href="http://mojavy.com/blog/2013/02/18/ltsv-for-common-lisp/">昨日</a>のテンプレを流用して今日はcl-rainbowという地味なライブラリの宣伝をします。</p>
<p><a href="https://github.com/taksatou/cl-rainbow">https://github.com/taksatou/cl-rainbow</a></p>
<p>cl-rainbowとは、<a href="https://github.com/sickill/rainbow">rubygemにあるrainbow</a>をCommon Lispに移植したものです。
これを使うとターミナルの出力を簡単に色付けできます。</p>
<h3 id="_1">インストール</h3>
<p>現在(2013-02-19) quicklisp登録申請中です。登録されれば以下でインストールできます。</p>
<div class="pygments_murphy"><pre>(ql:quickload &#39;cl-rainbow)
</pre></div>

<h3 id="_2">使い方</h3>
<p>以下のように使います。</p>
<div class="pygments_murphy"><pre>(setf cl-rainbow:*enabled* t)
(print (cl-rainbow:color :red &quot;red string&quot;))
(print (cl-rainbow:color #x5599ff &quot;rgb color code&quot;))
(loop for c across &quot;RAINBOW&quot; do (format t &quot;~A&quot; (cl-rainbow:color (random #xffffff) c)))
</pre></div>

<p>特に解説は不要だと思いますが、端末はカラー表示に対応している必要があります。</p>
<p>RGBのカラーコード指定すると、256色にダウンサンプルして一番近い色を表示します。</p>
<p>その他、例にはのせてませんが、端末が対応していれば斜体や太字にもできます。詳細はソースを見てください。</p>
<h3 id="_3">まとめ</h3>
<p>ログ出力のときとかにちょっと便利なときがあるかもしれません。</p>
<p>リードマクロで文字列リテラルをごにょごにょして色付けできるようにするともっと便利なような気がするので、そのうちチャレンジしてみたいと思います。</p>
<p>フィードバック等ありましたらコメント頂けるとうれしいです。</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[tmuxでalcの英単語を引く]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2013/01/11/alc-nokogiri-tmux/" />
    <id>http://mojavy.com/blog/2013/01/11/alc-nokogiri-tmux/</id>
    <updated>2013-01-11T22:00:00Z</updated>
    <published>2013-01-11T22:00:00Z</published>
    <category scheme="http://mojavy.com/blog" term="ruby" />
    <category scheme="http://mojavy.com/blog" term="tmux" />
    <category scheme="http://mojavy.com/blog" term="english" />
    <summary type="html"><![CDATA[tmuxでalcの英単語を引く]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2013/01/11/alc-nokogiri-tmux/"><![CDATA[<p><img alt="english" src="/images/english-200.png" /></p>
<p><b>2013-01-15追記 規約違反とのコメント頂いたのでスクレイピングするスクリプトを削除しました。</b></p>
<p>tmuxのcommand-promptを使うと任意のコマンドをインタラクティブに実行できます。
これをつかってtmux上でalcの英単語を表示できるようにしたら思いの外便利だったので紹介します。</p>
<p>まず、alcの検索結果をスクレイビングしていい感じに表示するコマンドをつくります。
rubyのnokogiriとrainbowに依存してますが、ぼくがつくった適当なスクリプトでよければこれを使って下さい。</p>
<div class="pygments_murphy"><pre><span class="c1"># 2013-01-15 削除しました</span>
</pre></div>

<p>これをパスの通った場所にalcという名前で保存して、.tmux.confに以下の設定を追記します。</p>
<div class="pygments_murphy"><pre>unbind C-a
<span class="nb">bind </span>C-a <span class="nb">command</span>-prompt <span class="s2">&quot;split-window -h &#39;alc %% | lv -c&#39;&quot;</span>
</pre></div>

<p>C-aにバインドしてますがお好みのキーに変えてください。
rainbowで色付けしてるのでエスケープシーケンスを解釈できるpagerをつかって下さい。</p>
<p>これで.tmux.confをリロードして、prefix-key C-a とかするとtmux上にプロンプトが表示されるので、そこで調べたい単語を入力します。
そうすると新しいpaneに結果が表示されます。pagerを閉じると自動的にpaneも閉じます。</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[ワンライナーでウェブサーバを起動する方法]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2012/07/18/one-line-webserver/" />
    <id>http://mojavy.com/blog/2012/07/18/one-line-webserver/</id>
    <updated>2012-07-18T12:30:00Z</updated>
    <published>2012-07-18T12:30:00Z</published>
    <category scheme="http://mojavy.com/blog" term="python" />
    <category scheme="http://mojavy.com/blog" term="web" />
    <category scheme="http://mojavy.com/blog" term="ruby" />
    <summary type="html"><![CDATA[ワンライナーでウェブサーバを起動する方法]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2012/07/18/one-line-webserver/"><![CDATA[<p><img alt="ruby" src="/images/ruby-logo.png" /></p>
<p>とりあえずウェブサーバがたちあがりさえすればいいときは、pythonのSimpleHTTPServerを使うのが便利です。
起動したカレントディレクトリ以下のファイルをブラウズできるので、テスト用のスタティックなスタブデータを一時的に配置したいときとかにも使えます。最近の一般的なlinuxディストリビューションであればデフォルトではいってるpythonで使えると思います。</p>
<div class="pygments_murphy"><pre><span class="nv">$ </span>python -mSimpleHTTPServer 3333
</pre></div>

<p>デフォルトポートは8000ですが、引数で指定することもできます。
<br>
ちなみにrubyでもwebrickを使って同様のことができますが、<a href="http://d.hatena.ne.jp/rx7/20090812/p1">こちら</a> で紹介されているwebrickのワンライナーは長すぎて覚えられないのでいつもpythonを使ってます。
<br>
<br>
でもリクエストに応じたロジックを入れたい場合はrubyのsinatraの方が便利です。</p>
<div class="pygments_murphy"><pre><span class="nv">$ </span>ruby -rsinatra -e <span class="s1">&#39;get(&quot;/&quot;){sleep 3}&#39;</span>
</pre></div>

<p>ポートを変更する場合は以下のようにします</p>
<div class="pygments_murphy"><pre><span class="nv">$ </span>ruby -rsinatra -e <span class="s1">&#39;set :port,3333; get(&quot;/&quot;){sleep 3}&#39;</span>
</pre></div>

<h2 id="_1">参考</h2>
<ul>
<li><a href="http://d.hatena.ne.jp/rx7/20090812/p1">コマンド1つで今すぐWebサーバを起動させるためのワンライナー(Ruby or Python)</a></li>
</ul>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[rubyのワンライナーで便利な変数まとめ]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2012/07/08/ruby-oneliner-special-variables/" />
    <id>http://mojavy.com/blog/2012/07/08/ruby-oneliner-special-variables/</id>
    <updated>2012-07-08T18:30:00Z</updated>
    <published>2012-07-08T18:30:00Z</published>
    <category scheme="http://mojavy.com/blog" term="ruby" />
    <summary type="html"><![CDATA[rubyのワンライナーで便利な変数まとめ]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2012/07/08/ruby-oneliner-special-variables/"><![CDATA[<p><img alt="ruby" src="/images/ruby-logo.png" /></p>
<h1 id="_1">$.</h1>
<p>現在の行番号を表します。awkでいうNRと同じです。</p>
<div class="pygments_murphy"><pre><span class="n">ruby</span> <span class="o">-</span><span class="n">ne</span> <span class="s1">&#39;puts &quot;#{$.},#{$_}&quot;&#39;</span>
</pre></div>

<h1 id="-i">$-i</h1>
<p>この値を文字列で上書きするとin-place置換を行うようになります。オリジナルのファイルはここで指定した文字が拡張子についたファイルとして保存されます。オリジナルファイルが不要なら空文字を設定すればOKです。</p>
<div class="pygments_murphy"><pre><span class="n">ruby</span> <span class="o">-</span><span class="n">ne</span> <span class="s1">&#39;BEGIN{$-i=&quot;.old&quot;}; puts($_) if /foo/&#39;</span> <span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">file</span>
</pre></div>

<h1 id="_2">$/</h1>
<p>入力の区切り文字を表わす文字です。デフォルトは改行です。</p>
<div class="pygments_murphy"><pre><span class="n">ruby</span> <span class="o">-</span><span class="n">ne</span> <span class="s1">&#39;BEGIN{$/=&quot;,&quot;}; p $_&#39;</span>
</pre></div>

<h1 id="_3">$, 、$;</h1>
<p>$, はjoinのデフォルト区切り文字で、$; はsplitのデフォルト区切り文字です。
ワンライナーではjoinとsplitをよく使うと思うので、BEGINで上書きしておけばワンライナーを多少短く書けます。</p>
<div class="pygments_murphy"><pre><span class="n">ruby</span> <span class="o">-</span><span class="n">ne</span> <span class="s1">&#39;BEGIN{$,=&quot;\t&quot;;$;=&quot;,&quot;}; puts $_.split.join&#39;</span>
</pre></div>

<h1 id="_4">まとめ</h1>
<p>まだ他にも知らないテクニックがたくさんありそうですが、新しく見つけたら追記していきます。</p>
<h1 id="_5">参考</h1>
<ul>
<li><a href="http://blog.lilyx.net/2007/11/29/writing-one-liner-in-ruby/">http://blog.lilyx.net/2007/11/29/writing-one-liner-in-ruby/</a></li>
<li><a href="http://www.ruby-lang.org/ja/old-man/html/_C1C8A4DFB9FEA4DFCAD1BFF4.html">http://www.ruby-lang.org/ja/old-man/html/_C1C8A4DFB9FEA4DFCAD1BFF4.html</a></li>
</ul>]]></content>
  </entry>
</feed>
