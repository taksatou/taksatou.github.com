<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>mojavy.com</title>
    <link>http://mojavy.com/blog</link>
    <description></description>
    <pubDate>Thu, 18 Oct 2012 01:10:10 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>objective-cのメモリマネージメントについて</title>
      <link>http://mojavy.com/blog/2012/07/18/objective-c-memo-memory-management</link>
      <pubDate>Wed, 18 Jul 2012 11:30:00 JST</pubDate>
      <category><![CDATA[objective-c]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2012/07/18/objective-c-memo-memory-management</guid>
      <description>objective-cのメモリマネージメントについて</description>
      <content:encoded><![CDATA[<p><img alt="objective-c" src="/images/nextstep-logo.png" /></p>
<p>現在のところ3つの方法がある</p>
<h2 id="1-gabage-collection">1. Gabage Collection</h2>
<ul>
<li>Objective-C 2.0から導入された。</li>
<li>ただし、iOSの実行環境には含まれない。</li>
<li>Max OS Xでなら使えるらしい。</li>
</ul>
<h2 id="2-manual-reference-counting">2. Manual Reference Counting</h2>
<ul>
<li>retainは参照カウントを1あげる。releaseは1さげる</li>
<li>参照カウントが0でdeallocするとすぐに削除される</li>
<li>NSMutableArrayのaddObjectやremoveObjectAtIndexなどはオブジェクトの参照カウントを増減させる。</li>
<li>余分にreleaseしたりするとcrashする</li>
</ul>
<h2 id="3-automatic-reference-counting-arc">3. Automatic Reference Counting (ARC)</h2>
<ul>
<li>システムが自動的に参照カウントをしてくれる。</li>
<li>強い変数と弱い変数がある</li>
</ul>
<h4 id="_1">強い変数</h4>
<ul>
<li>デフォルトでは、オブジェクトのポインタは強い変数。そのようなポインタにアサインした参照は自動的にretainされる。</li>
<li>新しい参照をアサインする前に古い参照はreleaseされる</li>
<li>_ _strong キーワードをつかって明示的に強い変数を宣言できる。</li>
<li>プロパティはデフォルトではstrongではない</li>
<li>C++のshared_ptrのようなもの？</li>
</ul>
<h4 id="_2">弱い変数</h4>
<ul>
<li>循環参照している場合や、しても開放されるようにするときに使える。</li>
<li>親が子の強い参照を持っており、子が親の弱い参照を持っている場合、retainのサイクルが形成されなくなるのでオブジェクトを開放できる。</li>
<li>_ _weakキーワードを使う。</li>
<li>iOS4ではサポートされていない</li>
<li>C++のweak_ptrのようなもの？</li>
</ul>
<h4 id="non-arc">Non-ARCのコード</h4>
<ul>
<li>init, alloc, copy, new, mutableCopyをprefixにもつメソッドはそのオブジェクトの所有権を返す、というネーミングコンベンションに従っている場合は自動的にARCが適用される。</li>
<li>名前のコンベンションとは関係なしに、明示的にオブジェクトの所有権を返すメソッドをコンパイラに伝える方法もある。</li>
</ul>
<h2 id="_3">参考</h2>
<p><br>
<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=armyofpigs-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=0321811909" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe></p>]]></content:encoded>
    </item>
    <item>
      <title>objective-cのプロトコルとデリゲーションについてのメモ</title>
      <link>http://mojavy.com/blog/2012/07/17/objective-c-memo-protocol</link>
      <pubDate>Tue, 17 Jul 2012 18:30:00 JST</pubDate>
      <category><![CDATA[objective-c]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2012/07/17/objective-c-memo-protocol</guid>
      <description>objective-cのプロトコルとデリゲーションについてのメモ</description>
      <content:encoded><![CDATA[<p><img alt="objective-c" src="/images/nextstep-logo.png" /></p>
<ul>
<li>プロトコルとはクラス間で共有するメソッドのリスト。</li>
<li>javaでいうinterfaceのようなもの。</li>
<li>@optionalディレクティブ以降のメソッドは実装が任意。</li>
<li>@requiredディレクティブで必須。</li>
<li>プロトコルに必要なメソッドは直接そのクラスで実装してもいいし、継承元の親クラスで実装してもよい。</li>
<li>requiredがすべて実装されていなかった場合、コンパイラーはワーニングを出す。(エラーではない)</li>
<li>すべてのrequiredメソッドを実装したクラスはそのプロトコルにconform(もしくはadopt)したという。</li>
<li>そのオブジェクトがconformしているかどうかチェックするには、conformsToProtocolメソッドを使う。</li>
<li>そのオブジェクトがoptionalなメソッドを実装しているかどうかをチェックするには、respondsToSelectorを使う。</li>
<li>コンパイル時に型チェックが行われる。型宣言に<protocol名>を含めるとよい。</li>
<li>カテゴリもプロトコルにadoptできる。</li>
<li>プロトコルの名前はユニークでなければならない。</li>
<li>delegationとはプロトコルで定義されたメソッドを実装したクラスを定義すること。</li>
<li>informal protocolというものもあるが、これは単に実装がないカテゴリのこと。abstract protocolともいう。ドキュメンテーションやモジュラリティのために用いる。コンパイル時チェックはなし。プロトコルの@optionalディレクトリはObjective-C 2.0で追加されたので、こちらをつかえばよい。</li>
<li>eclipseでいうデリゲートは、Composite Objectとよばれる</li>
</ul>
<h2 id="_1">例</h2>
<h3 id="myprotocolh">myProtocol.h</h3>
<div class="pygments_murphy"><pre><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>

<span class="k">@protocol</span> <span class="nc">myProtocol</span> <span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>

<span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">f1</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">f2:</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">obj0</span> <span class="nf">withObject1:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">obj1</span><span class="p">;</span>

<span class="k">@end</span>
</pre></div>

<h3 id="myprotocolimplh">myProtocolImpl.h</h3>
<div class="pygments_murphy"><pre><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
<span class="cp">#import &quot;myProtocol.h&quot;</span>

<span class="k">@interface</span> <span class="nc">myProtocolImpl</span> : <span class="nc">NSObject</span> <span class="o">&lt;</span><span class="n">myProtocol</span><span class="o">&gt;</span>

<span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">f1</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">f2:</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">obj0</span> <span class="nf">withObject1:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">obj1</span><span class="p">;</span>

<span class="k">@end</span>
</pre></div>

<h3 id="myprotocolimplm">myProtocolImpl.m</h3>
<div class="pygments_murphy"><pre><span class="cp">#import &quot;myProtocolImpl.h&quot;</span>

<span class="k">@implementation</span> <span class="nc">myProtocolImpl</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">f1</span>
<span class="p">{</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;called f0&quot;</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">f2:</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">obj0</span> <span class="nf">withObject1:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">obj1</span>
<span class="p">{</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;called f2&quot;</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">@end</span>
</pre></div>

<h2 id="_2">参考</h2>
<p><br>
<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=armyofpigs-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=0321811909" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe></p>]]></content:encoded>
    </item>
    <item>
      <title>objective-cのカテゴリついてのメモ</title>
      <link>http://mojavy.com/blog/2012/07/13/objective-c-memo</link>
      <pubDate>Fri, 13 Jul 2012 18:30:00 JST</pubDate>
      <category><![CDATA[objective-c]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2012/07/13/objective-c-memo</guid>
      <description>objective-cのカテゴリついてのメモ</description>
      <content:encoded><![CDATA[<p><img alt="objective-c" src="/images/nextstep-logo.png" /></p>
<ul>
<li>objective-cではカテゴリという機能を使ってクラスの拡張ができる。</li>
<li>javascriptのprototypeのようなもの。</li>
<li>一旦上書きしたメソッドにアクセスする方法はない。メソッドを上書きする必要がある場合はサブクラスとして実装するべき。</li>
<li>プライベートメソッドは無名カテゴリを使って実装できる。</li>
<li>別の名前のカテゴリでもメソッド名は一意にしなければならない。</li>
<li>別のカテゴリとの間にメソッド名でコンフリクトが発生した場合、どちらが呼ばれるかは未定義。</li>
<li>カテゴリ名自体にソースコード上での可読性以上の実質的な意味は無いらしい。</li>
</ul>
<h2 id="_1">例</h2>
<div class="pygments_murphy"><pre><span class="k">@interface</span> <span class="nc">NSObject</span> <span class="nl">(MyExt)</span>
<span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">doit:</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span> <span class="n">arg</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">NSObject</span> <span class="nl">(MyExt)</span>
<span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">doit:</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span> <span class="n">arg</span>
<span class="p">{</span>
   <span class="c1">// do something</span>
<span class="p">}</span>
<span class="k">@end</span>
</pre></div>

<h2 id="_2">参考</h2>
<ul>
<li><a href="http://stackoverflow.com/questions/5689088/do-objective-c-category-names-do-anything">http://stackoverflow.com/questions/5689088/do-objective-c-category-names-do-anything</a></li>
</ul>
<p><br>
<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=armyofpigs-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=0321811909" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe></p>]]></content:encoded>
    </item>
  </channel>
</rss>
