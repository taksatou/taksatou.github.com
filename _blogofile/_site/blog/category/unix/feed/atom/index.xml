<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">mojavy.com</title>
  <subtitle type="text"></subtitle>

  <updated>2013-02-22T23:55:00Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://mojavy.com/blog" />
  <id>http://mojavy.com/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://mojavy.com/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[pythonのsubprocess.Popen()でpipeしてwaitするとデッドロックしてはまった件]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2013/02/22/python-popen/" />
    <id>http://mojavy.com/blog/2013/02/22/python-popen/</id>
    <updated>2013-02-22T23:55:00Z</updated>
    <published>2013-02-22T23:55:00Z</published>
    <category scheme="http://mojavy.com/blog" term="python" />
    <category scheme="http://mojavy.com/blog" term="unix" />
    <summary type="html"><![CDATA[pythonのsubprocess.Popen()でpipeしてwaitするとデッドロックしてはまった件]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2013/02/22/python-popen/"><![CDATA[<p><img alt="python" src="/images/python-logo.gif" /></p>
<p>pythonのsubprocess.Popen()を使っていてはまってしまったのでメモ。</p>
<p>処理を並列化するために、Popenで起動した複数の子プロセスに対してpipeで入力データを渡して処理させてやろうと以下のようなコードを書いた。
(ここでは便宜上catコマンドを起動しているが、実際はワーカープロセスのコマンド)</p>
<div class="pygments_murphy"><pre><span class="kn">import</span> <span class="nn">subprocess</span>

<span class="n">children</span> <span class="o">=</span> <span class="p">[</span><span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="s">&quot;cat&quot;</span><span class="p">,</span> <span class="n">stdin</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">10</span><span class="p">)]</span>
<span class="c">#</span>
<span class="c"># do something</span>
<span class="c">#</span>
<span class="k">for</span> <span class="n">child</span> <span class="ow">in</span> <span class="n">children</span><span class="p">:</span>
    <span class="n">child</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
    <span class="n">child</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>
</pre></div>

<p>子プロセスは標準入力がEOFを返したら終了するようにしてあったので、上のコードでも問題なさそうに見えるがwaitでデッドロックする。
python2.7.3以降だと問題なかったのだけど、python2.5や2.6だと必ずデッドロックしてしまう。</p>
<p>さんざん悩んだあげくsubprocess.pyのソースを読んでみたら、close_fds=TrueをPopenの引数に渡してやればよいことに気づいた。</p>
<p>要するに、子プロセスが自分の標準入力のパイプをオープンしたままexecしてしまっていたのが原因だった。
forkするとファイルディスクリプタも引き継ぐので、pipeで開いた書込み側のファイルディスクリプタを親と子の両方できちんと閉じてやらないと、標準入力の書込み側がオープンしたままの状態になってしまいEOFがこなくなってしまう。</p>
<p>Popenではclose_fdsにTrueを渡してやるとexecするまえに3以上のファイルディスクリプタをすべて閉じるようになっている。
(O_CLOEXECフラグを使うのではなく単にループして全部なめるような実装になっていた)</p>
<p>というわけで、pipe使うときに標準入出力以外のファイルディスクリプタを引き継ぐ必要性はあまりないと思うので、close_fdsを設定するのを忘れないように気をつけましょう
(Linux以外のプラットフォームでどうなるかは未調査です)</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[おやつの時間をお知らせしてくれるUnixコマンド：at teatime (他...)]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2013/01/08/favorite-linux-command/" />
    <id>http://mojavy.com/blog/2013/01/08/favorite-linux-command/</id>
    <updated>2013-01-08T20:30:00Z</updated>
    <published>2013-01-08T20:30:00Z</published>
    <category scheme="http://mojavy.com/blog" term="unix" />
    <category scheme="http://mojavy.com/blog" term="tips" />
    <category scheme="http://mojavy.com/blog" term="linux" />
    <summary type="html"><![CDATA[おやつの時間をお知らせしてくれるUnixコマンド：at teatime (他...)]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2013/01/08/favorite-linux-command/"><![CDATA[<p><img alt="banana" src="/images/banana-200.png" /></p>
<p><a href="http://clippy.in/b/YJLM9W">Favorite Linux Commands(http://clippy.in/b/YJLM9W)</a> で紹介されてたコマンドのうち知らなかったものをメモ。</p>
<h2 id="at">at</h2>
<p>入力されたコマンドを指定されたタイミングで実行するようにスケジュールする。
cronに登録するほどでもない単発のコマンドを実行したいときとかにつかう。
時間の指定には現在の時刻からの経過時間や絶対時間の他にteatimeやmidnightといった文字列もつかえる。
ちなみにteatimeは午後4時。
出力先を指定しなければコマンドの出力はcronと同じようにメールにとぶ。$TTYにリダイレクトしてやればコマンドを実行した端末に表示させることもできる。</p>
<p>例</p>
<div class="pygments_murphy"><pre>echo &quot;echo おやつの時間です &gt; $TTY&quot;| at teatime
echo &quot;echo はろー &gt; $TTY&quot; | at now + 3 minute
</pre></div>

<h2 id="mtr">mtr</h2>
<p>tracerouteとpingをあわせたようなもの。tracerouteより表示がみやすい。
ネットワークのどこで時間がかかってるのか一目でわかる。</p>
<p>例</p>
<div class="pygments_murphy"><pre>mtr mojavy.com
</pre></div>

<h2 id="column">column</h2>
<p>入力テキストをいい感じのカラム表示にフォーマットしてくれる。
縦に長い出力するコマンドとか、そのままだと出力がみづらいときとかにつかう。</p>
<p>例</p>
<div class="pygments_murphy"><pre>gem list | column
mount | column -t
grep -v &#39;^#&#39; /etc/apt/sources.list | column -t
</pre></div>

<h2 id="reset">reset</h2>
<p>端末をリセットする。
うっかりバイナリファイルをcatとかしてしまって端末が壊れてしまった場合に端末を閉じずに復帰できる。</p>
<h2 id="sshfs">sshfs</h2>
<p>ssh経由でリモートのファイルシステムをマウントできる。</p>
<p>例</p>
<div class="pygments_murphy"><pre>sshfs name@server:/path/to/dir /path/to/mount/point
fusermount -u /path/to/mount/point  # unmount
</pre></div>

<h2 id="_1">その他</h2>
<p>以下はコマンド自体の機能ではないけど覚えておくと便利かもしれないもの</p>
<h3 id="curl-ifconfigme">curl ifconfig.me</h3>
<p>ifconfig.meというサイトがある。自分のグローバルIPがわかる。</p>
<h3 id="dig-short-txt-wzxhzdk5wpdgcx">dig +short txt <keyword>.wp.dg.cx</h3>
<p>dnsクエリでwikipediaのエントリーがみれる。</p>
<p>例</p>
<div class="pygments_murphy"><pre><span class="nv">$ </span>dig +short txt banana.wp.dg.cx
<span class="s2">&quot;Banana is the common name for herbaceous plants of the genus Musa and for the fruit they produce. It is one of the oldest cultivated plants. They are native to tropical South and Southeast Asia, and are likely to have been first domesticated in Papua New &quot;</span> <span class="s2">&quot;Guinea. Today, they are cultivated throughout the tropics. They are grown in at least 107 countries, primarily for their... http://en.wikipedia.org/wiki/Banana&quot;</span>
</pre></div>]]></content>
  </entry>
</feed>
