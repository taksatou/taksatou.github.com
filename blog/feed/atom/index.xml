<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">mojavy.com</title>
  <subtitle type="text"></subtitle>

  <updated>2014-12-23T20:02:30Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://mojavy.com/blog" />
  <id>http://mojavy.com/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://mojavy.com/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[dnsimpleでダイナミックDNSをつかう]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2014/12/23/dnsimple-dynamic-dns/" />
    <id>http://mojavy.com/blog/2014/12/23/dnsimple-dynamic-dns/</id>
    <updated>2014-12-23T20:02:30Z</updated>
    <published>2014-12-23T20:02:30Z</published>
    <category scheme="http://mojavy.com/blog" term="web" />
    <category scheme="http://mojavy.com/blog" term="dns" />
    <summary type="html"><![CDATA[dnsimpleでダイナミックDNSをつかう]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2014/12/23/dnsimple-dynamic-dns/"><![CDATA[<p><img alt="dnsimple" src="/images/dnsimple.png" /> </p>
<p><a href="https://dnsimple.com/r/4388f43fedebae">dnsimple</a> ではAPIからのDNSレコードアップデートができるので、簡単にダイナミックDNSがつかえる。 </p>
<p>手順は以下の通り。</p>
<ol>
<li>普通にdnsimpleでAレコードを登録する</li>
<li>登録したレコードのrecord idをしらべる。 record id は管理画面のURL <code>https://dnsimple.com/domains/example.com/records/&lt;record id&gt;/edit</code> をみればわかる。</li>
<li>レコードを更新するスクリプトをcronに登録する。 スクリプトは <a href="http://developer.dnsimple.com/ddns/">http://developer.dnsimple.com/ddns/</a> でダウンロードできる。 <code>RECORD_ID</code>には上記の値、<code>DOMAIN_ID</code>にはApexドメインを設定する。</li>
</ol>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[www2014のアドテク関連のResearch Trackメモ]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2014/10/06/www2014-adtech-research-trach/" />
    <id>http://mojavy.com/blog/2014/10/06/www2014-adtech-research-trach/</id>
    <updated>2014-10-06T21:05:33Z</updated>
    <published>2014-10-06T21:05:33Z</published>
    <category scheme="http://mojavy.com/blog" term="adtech" />
    <summary type="html"><![CDATA[www2014のアドテク関連のResearch Trackメモ]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2014/10/06/www2014-adtech-research-trach/"><![CDATA[<p><a href="http://www2014.kr/program/research-track/">www2014のResearch Track</a> に<code>Online Experiments &amp; Advertising</code>というのがあったので、概要だけメモ。</p>
<h2 id="adscape-harvesting-and-analyzing-online-display-ads"><a href="http://dl.acm.org/citation.cfm?id=2567992">Adscape: Harvesting and Analyzing Online Display Ads</a></h2>
<p>クローラを用いて広告データを収集することによって、現状のディスプレイ広告でどのようなターゲティングが行われているのかについてを分析している。
340通りのユーザプロファイルを用いて180件のウェブサイトをクロールし、17万5000件の広告を収集したとのこと。</p>
<p>プロファイルの内容によってどのカテゴリの広告が配信されやすいかとか、ウェブページあたりの広告主数の分布とか、実験結果は結構おもしろい。</p>
<h2 id="statistical-inference-in-two-stage-online-controlled-experiments-with-treatment-selection-and-validation"><a href="http://dl.acm.org/citation.cfm?id=2568028">Statistical Inference in Two-Stage Online Controlled Experiments with Treatment Selection and Validation</a></h2>
<p>より進んだA/Bテストの方法について。Bingのデータを用いているが、他の分野でも適用できる。
Bonferroni法やHolm法といった従来の多重比較における補正方法より実用的なものが紹介されている。</p>
<h2 id="an-experimental-evaluation-of-bidders-behavior-in-ad-auctions"><a href="http://dl.acm.org/citation.cfm?id=2568004">An Experimental Evaluation of Bidders’ Behavior in Ad Auctions</a></h2>
<p>実際に人間を使ってadwords的なオークションのゲームを行い、理論通りの挙動をするかを検証するというもの。
概ね期待通りの価格に近づくが、予想に反して平衡に逹しないという結果が得られたとのこと。</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[flappymacs がMELPAに登録されました]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2014/07/16/flappymacs-melpa/" />
    <id>http://mojavy.com/blog/2014/07/16/flappymacs-melpa/</id>
    <updated>2014-07-16T01:07:04Z</updated>
    <published>2014-07-16T01:07:04Z</published>
    <category scheme="http://mojavy.com/blog" term="game" />
    <category scheme="http://mojavy.com/blog" term="emacs" />
    <summary type="html"><![CDATA[flappymacs がMELPAに登録されました]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2014/07/16/flappymacs-melpa/"><![CDATA[<p><a href="http://mojavy.com/blog/2014/07/10/flappy-bird-for-emacs-flappymacs/">flappymacs</a> がMELPAに登録されました。</p>
<div class="pygments_borland"><pre>(add-to-list
 &#39;package-archives &#39;(&quot;melpa&quot; . &quot;http://melpa.milkbox.net/packages/&quot;) t)
</pre></div>

<p>を設定して、<code>M-x package-list-packages</code> からflappymacsを探してインストールするとすぐに遊べます。</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[EmacsでFlappy Birdっぽいもの書きました]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2014/07/10/flappy-bird-for-emacs-flappymacs/" />
    <id>http://mojavy.com/blog/2014/07/10/flappy-bird-for-emacs-flappymacs/</id>
    <updated>2014-07-10T20:01:50Z</updated>
    <published>2014-07-10T20:01:50Z</published>
    <category scheme="http://mojavy.com/blog" term="game" />
    <category scheme="http://mojavy.com/blog" term="emacs" />
    <summary type="html"><![CDATA[EmacsでFlappy Birdっぽいもの書きました]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2014/07/10/flappy-bird-for-emacs-flappymacs/"><![CDATA[<p><a href="http://mattn.kaoriya.net/software/vim/20140709202034.htm">flappyvird</a> にインスパイアされて<a href="https://github.com/taksatou/flappymacs">Emacs版のFlappy Bird</a>書きました。</p>
<p><a href="https://github.com/taksatou/flappymacs">flappymacs</a> </p>
<p><img alt="flappymacs" src="https://raw.githubusercontent.com/taksatou/flappymacs/master/data/screenshot.png" /> </p>
<p><code>flappymacs.el</code>をロードして、<code>M-x flappymacs</code>で遊べます。</p>
<h4 id="20140716">2014/07/16 追記</h4>
<p><a href="http://mojavy.com/blog/2014/07/16/flappymacs-melpa/">MELPAに登録されました</a> </p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[C++のdreaded diamondについて]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2014/07/09/cpp-dreaded-diamond/" />
    <id>http://mojavy.com/blog/2014/07/09/cpp-dreaded-diamond/</id>
    <updated>2014-07-09T21:56:32Z</updated>
    <published>2014-07-09T21:56:32Z</published>
    <category scheme="http://mojavy.com/blog" term="programming" />
    <category scheme="http://mojavy.com/blog" term="c++" />
    <summary type="html"><![CDATA[C++のdreaded diamondについて]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2014/07/09/cpp-dreaded-diamond/"><![CDATA[<p>以下のようなダイアモンド継承をしたときに発生する問題のことを<code>dreaded diamond</code>と呼ぶらしい。</p>
<div class="pygments_borland"><pre>    Base
    /  \
   D1  D2
    \  /
     D3
</pre></div>

<p>例えば以下のようなクラスではアップキャストをするときやBaseクラスのメンバにアクセスするときに曖昧性が生じる。</p>
<div class="pygments_borland"><pre><span class="k">class</span> <span class="nc">Base</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
    <span class="k">virtual</span> <span class="o">~</span><span class="n">Base</span><span class="p">()</span> <span class="p">{}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">D1</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Base</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="k">virtual</span> <span class="o">~</span><span class="n">D1</span><span class="p">()</span> <span class="p">{}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">D2</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Base</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="k">virtual</span> <span class="o">~</span><span class="n">D2</span><span class="p">()</span> <span class="p">{}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">D3</span> <span class="o">:</span> <span class="k">public</span> <span class="n">D1</span><span class="p">,</span> <span class="k">public</span> <span class="n">D2</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="k">virtual</span> <span class="o">~</span><span class="n">D3</span><span class="p">()</span> <span class="p">{}</span>
<span class="p">};</span>
</pre></div>

<p>以下のようなコードをコンパイルしようとしてもエラーになる。</p>
<div class="pygments_borland"><pre><span class="kt">void</span> <span class="n">f1</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">D3</span> <span class="n">d3</span><span class="p">;</span>
    <span class="n">Base</span> <span class="o">&amp;</span><span class="n">base</span> <span class="o">=</span> <span class="n">d3</span><span class="p">;</span>
    <span class="n">d3</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>

<div class="pygments_borland"><pre>      ambiguous conversion from derived class &#39;D3&#39; to base class &#39;Base&#39;:
    class D3 -&gt; class D1 -&gt; class Base
    class D3 -&gt; class D2 -&gt; class Base
    Base &amp;base = d3;
                 ^~

      non-static member &#39;data&#39; found in multiple base-class subobjects of type &#39;Base&#39;:
    class D3 -&gt; class D1 -&gt; class Base
    class D3 -&gt; class D2 -&gt; class Base
    d3.data = 123;
       ^
</pre></div>

<p>これを回避するためには明示的に中継するクラスを指定してやる必要がある。</p>
<div class="pygments_borland"><pre><span class="kt">void</span> <span class="n">f2</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">D3</span> <span class="n">d3</span><span class="p">;</span>
    <span class="n">Base</span> <span class="o">&amp;</span><span class="n">base</span> <span class="o">=</span> <span class="k">dynamic_cast</span><span class="o">&lt;</span><span class="n">D1</span><span class="o">&amp;&gt;</span><span class="p">(</span><span class="n">d3</span><span class="p">);</span>
    <span class="n">d3</span><span class="p">.</span><span class="n">D1</span><span class="o">::</span><span class="n">data</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
    <span class="n">d3</span><span class="p">.</span><span class="n">D2</span><span class="o">::</span><span class="n">data</span> <span class="o">=</span> <span class="mi">456</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">d3</span><span class="p">.</span><span class="n">D1</span><span class="o">::</span><span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;,&#39;</span> <span class="o">&lt;&lt;</span> <span class="n">d3</span><span class="p">.</span><span class="n">D2</span><span class="o">::</span><span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  <span class="c1">// =&gt; 123,456</span>
<span class="p">}</span>
</pre></div>

<p>でも普通は継承元にそれぞれの別々の親を持つのではなく、共通の1つだけを持っていてほしい。
それを解決するには仮想継承を使う。</p>
<div class="pygments_borland"><pre><span class="k">class</span> <span class="nc">D1</span> <span class="o">:</span> <span class="k">public</span> <span class="k">virtual</span> <span class="n">Base</span> <span class="p">{</span> <span class="cm">/* 省略 */</span> <span class="p">};</span>
<span class="k">class</span> <span class="nc">D2</span> <span class="o">:</span> <span class="k">public</span> <span class="k">virtual</span> <span class="n">Base</span> <span class="p">{</span> <span class="cm">/* 省略 */</span> <span class="p">};</span>
<span class="k">class</span> <span class="nc">D3</span> <span class="o">:</span> <span class="k">public</span> <span class="n">D1</span><span class="p">,</span> <span class="k">public</span> <span class="n">D2</span> <span class="p">{</span> <span class="cm">/* 省略 */</span> <span class="p">};</span>
</pre></div>

<p>このようにすればBaseクラスのインスタンスは1つだけになって曖昧性が解消される。</p>
<div class="pygments_borland"><pre><span class="kt">void</span> <span class="n">f3</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">D3</span> <span class="n">d3</span><span class="p">;</span>
    <span class="n">Base</span> <span class="o">&amp;</span><span class="n">base</span> <span class="o">=</span> <span class="n">d3</span><span class="p">;</span>
    <span class="n">d3</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">d3</span><span class="p">.</span><span class="n">D1</span><span class="o">::</span><span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;,&#39;</span> <span class="o">&lt;&lt;</span> <span class="n">d3</span><span class="p">.</span><span class="n">D2</span><span class="o">::</span><span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  <span class="c1">// =&gt; 123,123</span>
<span class="p">}</span>
</pre></div>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[pthreadの取り消しポイント(cancellation point)についてのメモ]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2014/03/18/pthread-cancellation-point/" />
    <id>http://mojavy.com/blog/2014/03/18/pthread-cancellation-point/</id>
    <updated>2014-03-18T21:41:12Z</updated>
    <published>2014-03-18T21:41:12Z</published>
    <category scheme="http://mojavy.com/blog" term="unix" />
    <category scheme="http://mojavy.com/blog" term="programming" />
    <summary type="html"><![CDATA[pthreadの取り消しポイント(cancellation point)についてのメモ]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2014/03/18/pthread-cancellation-point/"><![CDATA[<p>cancellation pointsとは、スレッドのキャンセル種別が<code>deferred</code>のときに、そこに到達したときにはじめて実際にそのスレッドのキャンセル要求が処理されるような関数のこと。</p>
<p>POSIX.1では、基本的にはブロックするような関数がcancellation pointsであることが要求されている。</p>
<h2 id="_1">参考</h2>
<ul>
<li><a href="http://pubs.opengroup.org/onlinepubs/009695399/functions/xsh_chap02_09.html">http://pubs.opengroup.org/onlinepubs/009695399/functions/xsh_chap02_09.html</a> </li>
<li><a href="http://linuxjm.sourceforge.jp/html/LDP_man-pages/man3/pthread_cancel.3.html">pthread_cancel(3)</a> </li>
</ul>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[gitlab 6.6.4 CE のゆるふわセットアップ]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2014/03/11/latest-gitlab-setup/" />
    <id>http://mojavy.com/blog/2014/03/11/latest-gitlab-setup/</id>
    <updated>2014-03-11T02:08:20Z</updated>
    <published>2014-03-11T02:08:20Z</published>
    <category scheme="http://mojavy.com/blog" term="chef" />
    <category scheme="http://mojavy.com/blog" term="git" />
    <category scheme="http://mojavy.com/blog" term="tips" />
    <category scheme="http://mojavy.com/blog" term="gitlab" />
    <summary type="html"><![CDATA[gitlab 6.6.4 CE のゆるふわセットアップ]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2014/03/11/latest-gitlab-setup/"><![CDATA[<p>gitlabもCentOSとUbuntuにはパッケージが提供されるようになったので、大分インストールが簡単になりました。</p>
<p>とはいえ、このパッケージはgitlab専用のマシンにインストールすることを前提にしているのか、小規模プロジェクトのために軽く使いたいよう場合ではつらいデフォルト設定となっています。安いvpsとかだと確実にメモリ不足でまともに動きません。</p>
<p>以下はとりあえずプライベートgitリポジトリが欲しいだけのような人のためのgitlabの設定の紹介です。</p>
<h2 id="_1">準備</h2>
<p><a href="https://www.gitlab.com/downloads/">https://www.gitlab.com/downloads/</a> </p>
<p>ここからgitlabのパッケージをダウンロードします。
<a href="https://github.com/opscode/omnibus-ruby">omnibus-ruby</a> でつくられた全部入りパッケージなのでインストールでのコンフリクトは発生しないはずですが、既に稼動中のサービス(apache等)のことはあまり考慮されてないので使用するポートについては個別対応が必要です。</p>
<p>特に以下は注意が必要です。</p>
<ul>
<li>nginx</li>
<li>redis</li>
<li>postgresql</li>
</ul>
<p>ここでは、apacheが稼動しているubuntuにインストールします。</p>
<h2 id="_2">インストール</h2>
<p>普通にインストールします。</p>
<div class="pygments_borland"><pre>$ sudo dpkg -i gitlab_6.6.4-omnibus-1.ubuntu.12.04_amd64.deb 
$ sudo gitlab-ctl reconfigure
</pre></div>

<p>ちなみにgitユーザが既に存在しているとこけるので消しておきます</p>
<p><code>$ sudo userdel -r git</code></p>
<h2 id="gitlab">gitlabの設定</h2>
<p>gitlabの設定は /etc/gitlab/gitlab.rb に設定をかいて、chefで設定します。</p>
<div class="pygments_borland"><pre>$ cat /etc/gitlab/gitlab.rb
external_url &quot;http://gitlab.example.com:8081&quot;
unicorn[&quot;worker_processes&quot;] = 1
postgresql[&quot;shared_buffers&quot;] = &quot;128MB&quot;
postgresql[&quot;effective_cache_size&quot;] = &quot;32MB&quot;
</pre></div>

<p>とりあえずpostgresqlがメモリを大量に食うので適当に減らします。</p>
<p>unicornもメモリ食いがちなので1プロセスにします。</p>
<p><code>external_url</code>にポートも含めたURLをかきます。apacheが80番で起動してるとnginxが起動できないので適当にはずします。ちなみに8080はデフォルトだとgitlabのunicornがつかっています。</p>
<p>このあたりは環境に応じて適当に設定してください。</p>
<p><code>gitlab-ctl reconfigure</code> すると設定が反映されます。</p>
<p>その他の設定できる項目は <code>/opt/gitlab/embedded/cookbooks/gitlab</code> 以下の<code>cookbook</code>をみるといいです。</p>
<h2 id="web">webサーバの設定</h2>
<p>80番で起動しているapacheがいる場合はnginxにproxyします。</p>
<div class="pygments_borland"><pre>&lt;VirtualHost *:80&gt;
  ServerName gitlab.example.com

  DocumentRoot /opt/gitlab/embedded/service/gitlab-rails/public

  CustomLog  /var/log/apache2/gitlab_access.log combined
  ErrorLog   /var/log/apache2/gitlab_error.log

  ErrorDocument 502 /502.html

  &lt;Directory &quot;/opt/gitlab/embedded/service/gitlab-rails/public&quot;&gt;
    Options FollowSymLinks
  &lt;/Directory&gt;

  &lt;Proxy *&gt;
    AddDefaultCharset off
    Order deny,allow
    Allow from all
  &lt;/Proxy&gt;

  ProxyVia On
  ProxyPreserveHost On

  ProxyRequests Off
  ProxyPass /assets/ !
  ProxyPass /uploads/      !

  ProxyPass / http://localhost:8081/ retry=1
  ProxyPassReverse / http://localhost:8081/

&lt;/VirtualHost&gt;
</pre></div>

<p>以上ができたらapache再起動して、 http://gitlab.example.com にアクセスしてみてうまく表示できれば完了です。</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[chefを使うのを我慢したほうがいいとき]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2014/03/07/dont-use-chef/" />
    <id>http://mojavy.com/blog/2014/03/07/dont-use-chef/</id>
    <updated>2014-03-07T00:09:26Z</updated>
    <published>2014-03-07T00:09:26Z</published>
    <category scheme="http://mojavy.com/blog" term="chef" />
    <summary type="html"><![CDATA[chefを使うのを我慢したほうがいいとき]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2014/03/07/dont-use-chef/"><![CDATA[<p>chefを使いはじめるとあらゆるもののセットアップをchefレシピ書かずにやるのが気持ち悪くなってしまうけど、chefでやらないほうがいいものって結構あると思う。</p>
<ul>
<li>redmine</li>
<li>gitlab</li>
<li>小規模なシステムのzabbixのマスター</li>
<li>etc...</li>
</ul>
<p>この手のものは、実際に使いはじめると多少は手作業での運用が必要になるので、誰かがつくったcookbookでいれてしまうよりかは手作業でいれてある程度どこになにがあるか把握しておいたほうがやりやすい。</p>
<p>自前でレシピ書いてもいいけど、当面は1台あれば十分なのであれば単なる二度手間でしかないのでセットアップ手順をメモに残す程度で十分。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> </p>
<p>ある程度運用経験があってとりあえずすぐに動く環境を作りたい、という場合のみ出来合いのcookbookをそのまま使えばいいと思う。</p>
<p>などということを、1ヶ月くらいかけていろいろcookbook書いたあげく心が折れたときに感じた。</p>
<div class="footnote">
<hr />
<ol>
<li id="fn:1">
<p>まめにredmineみたいなものをアップデートしたいような人もたぶんあんまりいない&#160;<a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
</ol>
</div>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[自炊した書籍のpdfのコントラストを3clickくらいで上げる方法 on Mac OS X]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2014/03/07/high-contrast-pdf-osx/" />
    <id>http://mojavy.com/blog/2014/03/07/high-contrast-pdf-osx/</id>
    <updated>2014-03-07T00:09:26Z</updated>
    <published>2014-03-07T00:09:26Z</published>
    <category scheme="http://mojavy.com/blog" term="osx" />
    <category scheme="http://mojavy.com/blog" term="mac" />
    <summary type="html"><![CDATA[自炊した書籍のpdfのコントラストを3clickくらいで上げる方法 on Mac OS X]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2014/03/07/high-contrast-pdf-osx/"><![CDATA[<p><img alt="preview app" src="/images/20140307/preview200.png" /> </p>
<p>スキャンしたpdf書籍だと、自炊業者にやってもらったとしても、どうしても文字が薄くなってしまいます。
業者によっては補正オプションがついてたりもしますが、<code>preview.app</code>のexport機能を使えば簡単にコントラストをあげられます。</p>
<p>メニューバー ＞ ファイル ＞ 書き出す ＞ Quartzフィルタ ＞ Lightness Decrease</p>
<p>で適当なところに保存。</p>
<p><img alt="menu" src="/images/20140307/menu1.png" /> <img alt="menu2" src="/images/20140307/menu2.png" /> </p>
<p>以下は実行前後のサンプル。これだけだとわかりにくいかもしれないけど、文字がぎっしりしたページだとコントラストが高い方が断然読みやすい。</p>
<p><img alt="before" src="/images/20140307/before300.png" />  <img alt="after" src="/images/20140307/after300.png" /> </p>
<p>大きいファイルサイズのpdfだとそれなりに時間(数分くらい)はかかるので注意。</p>
<p>参考： <a href="http://osxdaily.com/2011/10/24/increase-the-contrast-of-a-pdf-to-sharpen-darken-text/">http://osxdaily.com/2011/10/24/increase-the-contrast-of-a-pdf-to-sharpen-darken-text/</a> </p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[malloc+memsetとcallocの違いについて]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2014/03/05/difference-between-malloc-and-calloc/" />
    <id>http://mojavy.com/blog/2014/03/05/difference-between-malloc-and-calloc/</id>
    <updated>2014-03-05T21:25:23Z</updated>
    <published>2014-03-05T21:25:23Z</published>
    <category scheme="http://mojavy.com/blog" term="os" />
    <category scheme="http://mojavy.com/blog" term="programming" />
    <summary type="html"><![CDATA[malloc+memsetとcallocの違いについて]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2014/03/05/difference-between-malloc-and-calloc/"><![CDATA[<p><code>malloc</code>と<code>calloc</code>の違いは、表面的には引数の数と<code>calloc</code>は確保した領域を0で初期化するという点くらいですが、以下のコードを大きな<code>n</code>で実行すると、今時のOSだと<code>malloc</code> + <code>memset</code>のほうが大幅に遅くなる可能性があります。</p>
<div class="pygments_borland"><pre><span class="kt">void</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">n</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">type</span><span class="p">));</span>
<span class="n">memset</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">type</span><span class="p">));</span>
</pre></div>

<div class="pygments_borland"><pre><span class="kt">void</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">type</span><span class="p">));</span>
</pre></div>

<p>カーネルはセキュリティ上の理由からメモリを0で初期化してからユーザプロセスに渡します。</p>
<p>しかし、仮想メモリをサポートしたシステムでは、実際にそのメモリに書き込みが発生するまでカーネルはread onlyな領域を複数プロセスで共有させることができるため、既に初期化してあるページであればこの処理を省略できる場合があります。</p>
<p><code>brk</code>で拡張した領域は0で初期化されているので、<code>calloc</code>は新規確保した領域は初期化を省略することができ、結果的に<code>calloc</code>を実行したタイミングでは初期化が実際にはほとんど発生しない、ということがありえます。</p>
<p>一方<code>memset</code>の場合は実際にメモリへの書込みが発生する上、ページの共有もできなくなるためswapする可能性もあります。</p>
<p><br>
<br></p>
<p>ちなみに、(カーネルではなく)<code>calloc</code>自身が0初期化する処理と、<code>memset</code>の処理は微妙に違います。
なぜなら、<code>memset</code>は対象の領域がアラインされているかどうかについての情報なしに処理する必要があるので、境界部分は1byteずつやるしかありません。</p>
<p>じゃあ<code>memset</code>のほうが遅いのかというと、コンパイラによってはアラインされていることを推測できる場合もあったり、callocはライブラリ関数なので移植性のために最適化しにくかったりするので、結局のところ微妙です。</p>
<p>参考： <a href="http://stackoverflow.com/questions/2688466/why-mallocmemset-is-slower-than-calloc">http://stackoverflow.com/questions/2688466/why-mallocmemset-is-slower-than-calloc</a> </p>]]></content>
  </entry>
</feed>
