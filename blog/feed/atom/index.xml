<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">mojavy.com</title>
  <subtitle type="text"></subtitle>

  <updated>2014-03-07T00:09:26Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://mojavy.com/blog" />
  <id>http://mojavy.com/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://mojavy.com/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[自炊した書籍のpdfのコントラストを上げる方法 on Mac OS X]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2014/03/07/high-contrast-pdf-osx/" />
    <id>http://mojavy.com/blog/2014/03/07/high-contrast-pdf-osx/</id>
    <updated>2014-03-07T00:09:26Z</updated>
    <published>2014-03-07T00:09:26Z</published>
    <category scheme="http://mojavy.com/blog" term="osx" />
    <category scheme="http://mojavy.com/blog" term="mac" />
    <summary type="html"><![CDATA[自炊した書籍のpdfのコントラストを上げる方法 on Mac OS X]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2014/03/07/high-contrast-pdf-osx/"><![CDATA[<p>自炊業者にやってもらったとしても、スキャンした画像だとどうしても文字が薄くなってしまいますが、<code>preview.app</code>のexport機能を使えば簡単にコントラストをあげられます。</p>
<p>メニューバー ＞ ファイル ＞ 書き出す ＞ Quartzフィルタ ＞ Lightness Decrease</p>
<p>で適当なところに保存。</p>
<p><img alt="menu" src="/images/20140307/menu1.png" /> <img alt="menu2" src="/images/20140307/menu2.png" /> </p>
<p>以下は実行前後のサンプル。これだけだとわかりにくいかもしれないけど、文字がぎっしりしたページだとコントラストが高い方が断然読みやすい。</p>
<p><img alt="before" src="/images/20140307/before300.png" />  <img alt="after" src="/images/20140307/after300.png" /> </p>
<p>大きいファイルサイズのpdfだとそれなりに時間(数分くらい)はかかるので注意。</p>
<p>参考： <a href="http://osxdaily.com/2011/10/24/increase-the-contrast-of-a-pdf-to-sharpen-darken-text/">http://osxdaily.com/2011/10/24/increase-the-contrast-of-a-pdf-to-sharpen-darken-text/</a> </p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[malloc+memsetとcallocの違いについて]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2014/03/05/difference-between-malloc-and-calloc/" />
    <id>http://mojavy.com/blog/2014/03/05/difference-between-malloc-and-calloc/</id>
    <updated>2014-03-05T21:25:23Z</updated>
    <published>2014-03-05T21:25:23Z</published>
    <category scheme="http://mojavy.com/blog" term="os" />
    <category scheme="http://mojavy.com/blog" term="programming" />
    <summary type="html"><![CDATA[malloc+memsetとcallocの違いについて]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2014/03/05/difference-between-malloc-and-calloc/"><![CDATA[<p><code>malloc</code>と<code>calloc</code>の違いは、表面的には引数の数と<code>calloc</code>は確保した領域を0で初期化するという点くらいですが、以下のコードを大きな<code>n</code>で実行すると、今時のOSだと<code>malloc</code> + <code>memset</code>のほうが大幅に遅くなる可能性があります。</p>
<div class="pygments_borland"><pre><span class="kt">void</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">n</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">type</span><span class="p">));</span>
<span class="n">memset</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">type</span><span class="p">));</span>
</pre></div>

<div class="pygments_borland"><pre><span class="kt">void</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">type</span><span class="p">));</span>
</pre></div>

<p>カーネルはセキュリティ上の理由からメモリを0で初期化してからユーザプロセスに渡します。</p>
<p>しかし、仮想メモリをサポートしたシステムでは、実際にそのメモリに書き込みが発生するまでカーネルはread onlyな領域を複数プロセスで共有させることができるため、既に初期化してあるページであればこの処理を省略できる場合があります。</p>
<p><code>brk</code>で拡張した領域は0で初期化されているので、<code>calloc</code>は新規確保した領域は初期化を省略することができ、結果的に<code>calloc</code>を実行したタイミングでは初期化が実際にはほとんど発生しない、ということがありえます。</p>
<p>一方<code>memset</code>の場合は実際にメモリへの書込みが発生する上、ページの共有もできなくなるためswapする可能性もあります。</p>
<p><br>
<br></p>
<p>ちなみに、(カーネルではなく)<code>calloc</code>自身が0初期化する処理と、<code>memset</code>の処理は微妙に違います。
なぜなら、<code>memset</code>は対象の領域がアラインされているかどうかについての情報なしに処理する必要があるので、境界部分は1byteずつやるしかありません。</p>
<p>じゃあ<code>memset</code>のほうが遅いのかというと、コンパイラによってはアラインされていることを推測できる場合もあったり、callocはライブラリ関数なので移植性のために最適化しにくかったりするので、結局のところ微妙です。</p>
<p>参考： <a href="http://stackoverflow.com/questions/2688466/why-mallocmemset-is-slower-than-calloc">http://stackoverflow.com/questions/2688466/why-mallocmemset-is-slower-than-calloc</a> </p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[スレッドプールの実装方法について]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2014/03/03/implementing-thread-pool/" />
    <id>http://mojavy.com/blog/2014/03/03/implementing-thread-pool/</id>
    <updated>2014-03-03T20:58:58Z</updated>
    <published>2014-03-03T20:58:58Z</published>
    <category scheme="http://mojavy.com/blog" term="unix" />
    <category scheme="http://mojavy.com/blog" term="programming" />
    <summary type="html"><![CDATA[スレッドプールの実装方法について]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2014/03/03/implementing-thread-pool/"><![CDATA[<p>スレッドプール(thread pool)を実装するには、暇なときはthreadを寝かせておいて必要なときに起こす、というイベント通知の仕組みが必要になる。
UnixでC/C++で実装するときはpthreadの条件変数を使うのが普通だと思われるが、適当なファイルディスクリプタをopenしておいてread等でブロックさせる方法でも実装できそう。</p>
<p>どのようなやり方が一般的なのか、いくつか有名どころのOSSの実装を調べてみた。</p>
<h3 id="libuv">libuvの場合</h3>
<p><a href="https://github.com/joyent/libuv">https://github.com/joyent/libuv</a> </p>
<p>単純に<code>pthread_cond_wait</code>をつかっている <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> </p>
<div class="pygments_borland"><pre><span class="k">static</span> <span class="kt">void</span> <span class="nf">worker</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">struct</span> <span class="n">uv__work</span><span class="o">*</span> <span class="n">w</span><span class="p">;</span>
  <span class="n">QUEUE</span><span class="o">*</span> <span class="n">q</span><span class="p">;</span>

  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">arg</span><span class="p">;</span>

  <span class="k">for</span> <span class="p">(;;)</span> <span class="p">{</span>
    <span class="n">uv_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>

    <span class="k">while</span> <span class="p">(</span><span class="n">QUEUE_EMPTY</span><span class="p">(</span><span class="o">&amp;</span><span class="n">wq</span><span class="p">))</span>
      <span class="n">uv_cond_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cond</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>

    <span class="n">q</span> <span class="o">=</span> <span class="n">QUEUE_HEAD</span><span class="p">(</span><span class="o">&amp;</span><span class="n">wq</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">q</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">exit_message</span><span class="p">)</span>
      <span class="n">uv_cond_signal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cond</span><span class="p">);</span>
    <span class="k">else</span> <span class="p">{</span>
      <span class="n">QUEUE_REMOVE</span><span class="p">(</span><span class="n">q</span><span class="p">);</span>
      <span class="n">QUEUE_INIT</span><span class="p">(</span><span class="n">q</span><span class="p">);</span>  <span class="cm">/* Signal uv_cancel() that the work req is</span>
<span class="cm">                             executing. */</span>
    <span class="p">}</span>

    <span class="n">uv_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">q</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">exit_message</span><span class="p">)</span>
      <span class="k">break</span><span class="p">;</span>

    <span class="n">w</span> <span class="o">=</span> <span class="n">QUEUE_DATA</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="k">struct</span> <span class="n">uv__work</span><span class="p">,</span> <span class="n">wq</span><span class="p">);</span>
    <span class="n">w</span><span class="o">-&gt;</span><span class="n">work</span><span class="p">(</span><span class="n">w</span><span class="p">);</span>

    <span class="n">uv_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">w</span><span class="o">-&gt;</span><span class="n">loop</span><span class="o">-&gt;</span><span class="n">wq_mutex</span><span class="p">);</span>
    <span class="n">w</span><span class="o">-&gt;</span><span class="n">work</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>  <span class="cm">/* Signal uv_cancel() that the work req is done</span>
<span class="cm">                        executing. */</span>
    <span class="n">QUEUE_INSERT_TAIL</span><span class="p">(</span><span class="o">&amp;</span><span class="n">w</span><span class="o">-&gt;</span><span class="n">loop</span><span class="o">-&gt;</span><span class="n">wq</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">w</span><span class="o">-&gt;</span><span class="n">wq</span><span class="p">);</span>
    <span class="n">uv_async_send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">w</span><span class="o">-&gt;</span><span class="n">loop</span><span class="o">-&gt;</span><span class="n">wq_async</span><span class="p">);</span>
    <span class="n">uv_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">w</span><span class="o">-&gt;</span><span class="n">loop</span><span class="o">-&gt;</span><span class="n">wq_mutex</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></div>

<h3 id="boostasio">Boost.Asioの場合</h3>
<p><a href="http://www.boost.org/doc/libs/1_55_0/doc/html/boost_asio.html">http://www.boost.org/doc/libs/1_55_0/doc/html/boost_asio.html</a> </p>
<p><code>Boost.Asio</code>にスレッドプールそのものは提供されてないが以下のようにして簡単に実装することができる</p>
<div class="pygments_borland"><pre><span class="cp">#include &lt;thread&gt;</span>
<span class="cp">#include &lt;functional&gt;</span>
<span class="cp">#include &lt;boost/asio.hpp&gt;</span>

<span class="kt">int</span> <span class="n">main</span> <span class="p">(</span> <span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[]</span> <span class="p">)</span> <span class="p">{</span>
    <span class="n">asio</span><span class="o">::</span><span class="n">io_service</span> <span class="n">io_service</span><span class="p">;</span>
    <span class="n">asio</span><span class="o">::</span><span class="n">io_service</span><span class="o">::</span><span class="n">work</span> <span class="n">work</span><span class="p">(</span><span class="n">io_service</span><span class="p">);</span>

    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="o">&gt;</span> <span class="n">threadPool</span><span class="p">;</span>

    <span class="k">for</span><span class="p">(</span><span class="n">size_t</span> <span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="o">::</span><span class="n">hardware_concurrency</span><span class="p">();</span> <span class="n">t</span><span class="o">++</span><span class="p">){</span>
        <span class="n">threadPool</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="kr">thread</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="n">asio</span><span class="o">::</span><span class="n">io_service</span><span class="o">::</span><span class="n">run</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">io_service</span><span class="p">)));</span>
    <span class="p">}</span>

    <span class="n">io_service</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="n">an_expensive_calculation</span><span class="p">,</span> <span class="mi">42</span><span class="p">));</span>
    <span class="n">io_service</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="n">a_long_running_task</span><span class="p">,</span> <span class="mi">123</span><span class="p">));</span>

    <span class="c1">//Do some things with the main thread</span>

    <span class="n">io_service</span><span class="p">.</span><span class="n">stop</span><span class="p">();</span>
    <span class="k">for</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="o">&amp;</span> <span class="n">t</span> <span class="o">:</span> <span class="n">threadPool</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">t</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>

<p><a href="http://stackoverflow.com/questions/14265676/using-boostasio-thread-pool-for-general-purpose-tasks">http://stackoverflow.com/questions/14265676/using-boostasio-thread-pool-for-general-purpose-tasks</a> </p>
<p>長くなるのでコードは省略するが、<code>io_service::post</code>するとunixの場合は最終的には<code>task_io_service::wake_one_idle_thread_and_unlock</code>から<code>pthread_cond_signal</code>が呼ばれる。</p>
<h3 id="memcached">memcachedの場合</h3>
<p><a href="https://github.com/memcached/memcached">https://github.com/memcached/memcached</a> </p>
<p><code>libevent</code>のイベント通知機能を利用して実装している。それぞれのthread初期化の際にpipeをつくって、そのfdをlibeventに渡す。 <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>  libevent内部でそのfdを<code>epoll</code>なり<code>kqueue</code>なりでブロックして待つ。</p>
<div class="pygments_borland"><pre><span class="c1">//</span>
<span class="c1">// memcached.c</span>
<span class="c1">//</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">pthread_t</span> <span class="n">thread_id</span><span class="p">;</span>        <span class="cm">/* unique ID of this thread */</span>
    <span class="k">struct</span> <span class="n">event_base</span> <span class="o">*</span><span class="n">base</span><span class="p">;</span>    <span class="cm">/* libevent handle this thread uses */</span>
    <span class="k">struct</span> <span class="n">event</span> <span class="n">notify_event</span><span class="p">;</span>  <span class="cm">/* listen event for notify pipe */</span>
    <span class="kt">int</span> <span class="n">notify_receive_fd</span><span class="p">;</span>      <span class="cm">/* receiving end of notify pipe */</span>
    <span class="kt">int</span> <span class="n">notify_send_fd</span><span class="p">;</span>         <span class="cm">/* sending end of notify pipe */</span>
    <span class="k">struct</span> <span class="n">thread_stats</span> <span class="n">stats</span><span class="p">;</span>  <span class="cm">/* Stats generated by this thread */</span>
    <span class="k">struct</span> <span class="n">conn_queue</span> <span class="o">*</span><span class="n">new_conn_queue</span><span class="p">;</span> <span class="cm">/* queue of new connections to handle */</span>
    <span class="n">cache_t</span> <span class="o">*</span><span class="n">suffix_cache</span><span class="p">;</span>      <span class="cm">/* suffix cache */</span>
    <span class="kt">uint8_t</span> <span class="n">item_lock_type</span><span class="p">;</span>     <span class="cm">/* use fine-grained or global item lock */</span>
<span class="p">}</span> <span class="n">LIBEVENT_THREAD</span><span class="p">;</span>

<span class="c1">//</span>
<span class="c1">// thread.c</span>
<span class="c1">//</span>
<span class="kt">void</span> <span class="nf">thread_init</span><span class="p">(</span><span class="kt">int</span> <span class="n">nthreads</span><span class="p">,</span> <span class="k">struct</span> <span class="n">event_base</span> <span class="o">*</span><span class="n">main_base</span><span class="p">)</span> <span class="p">{</span>
<span class="c1">//</span>
<span class="c1">// 中略</span>
<span class="c1">//</span>
    <span class="n">threads</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="n">nthreads</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">LIBEVENT_THREAD</span><span class="p">));</span>
<span class="c1">//</span>
<span class="c1">// さらに中略</span>
<span class="c1">//</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nthreads</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">fds</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">pipe</span><span class="p">(</span><span class="n">fds</span><span class="p">))</span> <span class="p">{</span>
            <span class="n">perror</span><span class="p">(</span><span class="s">&quot;Can&#39;t create notify pipe&quot;</span><span class="p">);</span>
            <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="n">threads</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">notify_receive_fd</span> <span class="o">=</span> <span class="n">fds</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="n">threads</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">notify_send_fd</span> <span class="o">=</span> <span class="n">fds</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>

        <span class="n">setup_thread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">threads</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="cm">/* Reserve three fds for the libevent base, and two for the pipe */</span>
        <span class="n">stats</span><span class="p">.</span><span class="n">reserved_fds</span> <span class="o">+=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cm">/* Create threads after we&#39;ve done all the libevent setup. */</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nthreads</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">create_worker</span><span class="p">(</span><span class="n">worker_libevent</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">threads</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="cm">/* Wait for all the threads to set themselves up before returning. */</span>
    <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">init_lock</span><span class="p">);</span>
    <span class="n">wait_for_thread_registration</span><span class="p">(</span><span class="n">nthreads</span><span class="p">);</span>
    <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">init_lock</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>

<h3 id="pthread_cond_wait">pthread_cond_waitの実装</h3>
<p>脱線するが、pthread_cond_waitがどのようにsleepにはいってるのか気になったので調べた。</p>
<p><a href="https://sourceware.org/git/?p=glibc.git;a=tree;f=nptl;hb=HEAD">https://sourceware.org/git/?p=glibc.git;a=tree;f=nptl;hb=HEAD</a> </p>
<p><code>pthread_cond_wait</code>のソースコードは<code>glibc</code>の<code>nptl</code>以下にある。
<code>__pthread_cond_wait</code>が<code>lll_futex_wait</code>を呼んでおり、これは以下のように実装されている。(以下はx86_64のもの) </p>
<div class="pygments_borland"><pre><span class="cp">#define lll_futex_wait(futex, val, private) \</span>
<span class="cp">  lll_futex_timed_wait(futex, val, NULL, private)</span>

<span class="cp">#define lll_futex_timed_wait(futex, val, timeout, private) \</span>
<span class="cp">  ({                                         \</span>
<span class="cp">    register const struct timespec *__to __asm (&quot;r10&quot;) = timeout;          \</span>
<span class="cp">    int __status;                                \</span>
<span class="cp">    register __typeof (val) _val __asm (&quot;edx&quot;) = (val);                \</span>
<span class="cp">    __asm __volatile (&quot;syscall&quot;                            \</span>
<span class="cp">             : &quot;=a&quot; (__status)                         \</span>
<span class="cp">             : &quot;0&quot; (SYS_futex), &quot;D&quot; (futex),                 \</span>
<span class="cp">           &quot;S&quot; (__lll_private_flag (FUTEX_WAIT, private)),         \</span>
<span class="cp">           &quot;d&quot; (_val), &quot;r&quot; (__to)                    \</span>
<span class="cp">             : &quot;memory&quot;, &quot;cc&quot;, &quot;r11&quot;, &quot;cx&quot;);                 \</span>
<span class="cp">    __status;                                    \</span>
<span class="cp">  })</span>
</pre></div>

<p>上記アセンブラは大体以下のような意味<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> </p>
<div class="pygments_borland"><pre><span class="n">futex</span><span class="p">(</span><span class="n">futex</span><span class="p">,</span> <span class="n">FUTEX_WAIT</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="n">timeout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>  <span class="c1">// 便宜上、上記コードの引数の変数名をそのままつかっているが、</span>
                                                  <span class="c1">// 1つめのfutexはシステムコールのfutexで、</span>
                                                  <span class="c1">// 2つめは引数のpthread_cond_tの__futexメンバ変数のアドレス</span>
</pre></div>

<blockquote>
<p>futex() システムコールは、 指定したアドレスの値が変更されるのをプログラムが待つ手段や 特定のアドレスに対して待機中のプロセスを wake (起床) させる手段を提供する </p>
<p><a href="http://linuxjm.sourceforge.jp/html/LDP_man-pages/man2/futex.2.html">futex(2) http://linuxjm.sourceforge.jp/html/LDP_man-pages/man2/futex.2.html</a></p>
</blockquote>
<p>とのこと。</p>
<h3 id="_1">まとめ</h3>
<ul>
<li>pthread_cond_waitをつかったもののほうが普通は高速なはず</li>
<li>memcachedのようなやりかただとユーザプロセス側でスレッドプール管理のための排他制御がほとんど不要になるので多少実装が簡単か</li>
</ul>
<div class="footnote">
<hr />
<ol>
<li id="fn:1">
<p><code>pthread_cond_wait</code>はunixの場合。windowsの場合は<code>pSleepConditionVariableCS</code>、これが使えない場合は疑似的に同様の動作をするようなラッパを定義している。&#160;<a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
<li id="fn:2">
<p>memcachedでは使用してないが、libeventはシグナルを通知する際もfdをつかう。Boost.Asioもシグナル通知はpipeを経由する。&#160;<a href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text">&#8617;</a></p>
</li>
<li id="fn:3">
<p>厳密には違う。&#160;<a href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text">&#8617;</a></p>
</li>
</ol>
</div>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[シェルスクリプトでプロセスの多重起動を防止する簡単で安全な方法]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2014/02/16/shell-script-ensure-one-process/" />
    <id>http://mojavy.com/blog/2014/02/16/shell-script-ensure-one-process/</id>
    <updated>2014-02-16T18:35:51Z</updated>
    <published>2014-02-16T18:35:51Z</published>
    <category scheme="http://mojavy.com/blog" term="unix" />
    <category scheme="http://mojavy.com/blog" term="shell" />
    <summary type="html"><![CDATA[シェルスクリプトでプロセスの多重起動を防止する簡単で安全な方法]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2014/02/16/shell-script-ensure-one-process/"><![CDATA[<p><code>flock(1)</code>を使うのが一番安全かつ簡単</p>
<div class="pygments_borland"><pre><span class="nv">LOCKFILE</span><span class="o">=</span>/tmp/my.lockfile

<span class="o">(</span>
    flock -n 200 <span class="o">||</span> <span class="nb">exit </span>1

    <span class="c"># do something</span>
<span class="o">)</span> 200&gt;<span class="nv">$LOCKFILE</span>
</pre></div>

<p>タイムアウトを設定したければ<code>-w</code>オプションをつかえばよい。</p>
<p>リードライトロックとしてつかえるので、更新系のスクリプトは1つしか起動したくないけど参照系は並列実行を許す、みたいなことも比較的簡単にできる。</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[TCPの黒歴史：謎のオプションskeeterとbubbaについて]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2014/02/13/tcp-options-skeeter-bubba/" />
    <id>http://mojavy.com/blog/2014/02/13/tcp-options-skeeter-bubba/</id>
    <updated>2014-02-13T18:00:22Z</updated>
    <published>2014-02-13T18:00:22Z</published>
    <category scheme="http://mojavy.com/blog" term="web" />
    <category scheme="http://mojavy.com/blog" term="history" />
    <summary type="html"><![CDATA[TCPの黒歴史：謎のオプションskeeterとbubbaについて]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2014/02/13/tcp-options-skeeter-bubba/"><![CDATA[<p><img alt="ns" src="/images/netscape-150.png" /> </p>
<p>TCPについて調べてたら、<code>skeeter</code>と<code>bubba</code>という謎のオプションを見つけた。
調べてみたところ、TCPを策定した人達の黒歴史らしい。</p>
<ul>
<li><a href="http://mailman.postel.org/pipermail/internet-history/2001-November/000073.html">TCP options: Bubba and Skeeter</a> </li>
</ul>
<p>以下意訳です。</p>
<hr>

<p>あー、これは忘れられそうもないんだけど黒歴史だね。</p>
<p>ben levyとstevと私<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> がFTPをやってたときにつくったものなんだ。
Bridghan<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>とstevがけしかけたんだけど、アイディアはシンプルで、鍵管理システムなしに暗号化できるように、デフィー・ヘルマン鍵共有をtcpで直接するためのものだった。
それには認証の仕組みは想定してなくて、パスワードみたいなものが共有されている前提だったんだ。
シンプルな実装で大体は動いてたんだけど、介入者攻撃には脆弱だったのが欠点だった。</p>
<p>なんで"skeeter"<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>  と"bubba"<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> かって？それはstevに聞いてくれ。</p>
<hr>

<p>なかなかセンスのあるネーミングですね。気になる人はstev氏に聞いてみてください。</p>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://www.iana.org/assignments/tcp-parameters/tcp-parameters.xhtml">Transmission Control Protocol (TCP) Parameters</a> </li>
<li><a href="http://www.ietf.org/mail-archive/web/tcpm/current/msg05424.html">Re: [tcpm] IANA TCP options registry ...</a> </li>
</ul>
<div class="footnote">
<hr />
<ol>
<li id="fn:1">
<p>Kastenholz, Frank&#160;<a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
<li id="fn:2">
<p>たぶんDave Bridgham のこと <a href="http://en.wikipedia.org/wiki/FTP_Software">http://en.wikipedia.org/wiki/FTP_Software</a>&#160;<a href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text">&#8617;</a></p>
</li>
<li id="fn:3">
<p>トンボのことらしい&#160;<a href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text">&#8617;</a></p>
</li>
<li id="fn:4">
<p>でかい人のことらしい&#160;<a href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text">&#8617;</a></p>
</li>
</ol>
</div>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[あなたのgithub pagesを無料で高速化する方法]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2014/02/13/faster-github-pages/" />
    <id>http://mojavy.com/blog/2014/02/13/faster-github-pages/</id>
    <updated>2014-02-13T09:10:00Z</updated>
    <published>2014-02-13T09:10:00Z</published>
    <category scheme="http://mojavy.com/blog" term="web" />
    <category scheme="http://mojavy.com/blog" term="github" />
    <summary type="html"><![CDATA[あなたのgithub pagesを無料で高速化する方法]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2014/02/13/faster-github-pages/"><![CDATA[<p><img alt="github" src="/images/github-logo-transparent-200.png" /> </p>
<p>このブログはgithub pages上に構築していますが、github pagesに引きずられて自分のブログも重くなるということが時々ありました。</p>
<p>がんばってブログを書いた次の日にアクセスできなくなってたりすると悲しいので何とか高速かつ安定した配信をする方法ないかなーと思って調べてみたところ、なんとgithub pagesに置いたコンテンツをCDNから配信させることができるようになったらしいです!</p>
<p><a href="https://github.com/blog/1715-faster-more-awesome-github-pages">Faster, More Awesome GitHub Pages</a> </p>
<p>どういうドメインでgithub pagesを配信しているかによって対応方法は違うので以下を読んで各自適切な設定をして下さい。</p>
<p><strong>目次</strong></p>
<div class="toc">
<ul>
<li><a href="#github-pages-usernamegithubio">デフォルトのgithub pagesのドメイン( username.github.io ) を使用している場合</a></li>
<li><a href="#wwwexamplecom">カスタムサブドメイン ( www.example.com ) を使用している場合</a></li>
<li><a href="#apex-examplecom">Apexドメイン ( example.com ) を使用している場合</a><ul>
<li><a href="#comdnsimple">お名前.comからDNSimpleに移行する場合</a><ul>
<li><a href="#1-dnsimple">1. DNSimpleに登録する</a></li>
<li><a href="#2-dnsimplegithub-pages">2. DNSimpleでgithub pagesとの連携を開始する</a></li>
<li><a href="#3">3. ネームサーバの設定をする</a></li>
<li><a href="#4-dns">4. dnsの更新を確認する</a></li>
<li><a href="#5-cdn">5. CDNの確認</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#_1">その他参考</a></li>
<li><a href="#_2">まとめ</a></li>
</ul>
</div>
<h2 id="github-pages-usernamegithubio">デフォルトのgithub pagesのドメイン( username.github.io ) を使用している場合</h2>
<p>既に対応しています。
なにもやる必要はありません。</p>
<h2 id="wwwexamplecom">カスタムサブドメイン ( www.example.com ) を使用している場合</h2>
<p>CNAMEの向き先をusername.github.io に向けるだけで対応できます。</p>
<h2 id="apex-examplecom">Apexドメイン ( example.com ) を使用している場合</h2>
<p>Apexドメインというのはサブドメインでない基本のドメイン部分のことで、そこを直接github pagesにIPに向くようにAレコードに設定している場合です。</p>
<p>この場合はDNSのプロバイダがALIASレコードをサポートしていれば、ALIASが <code>username.github.io</code> を向くようにすることで対応できます。</p>
<p>ALIASレコードに対応していない場合は残念ながらCDNを有効にできません。ちなみにお名前.comはALIASには対応していないので、その場合は他のDNSプロバイダに移行するしかありません。</p>
<h3 id="comdnsimple">お名前.comからDNSimpleに移行する場合</h3>
<p>このブログは残念ながらお名前.comでApexドメインをgithub pagesのIPに向けていたのでDNSimpleに移行することにしました。以下はお名前.comからDNSimpleに移行した際の手順です。</p>
<p>なお、この場合はタイトルに反して無料ではありません。</p>
<p>(ちなみにここではドメインの移管はせずに、DNSの設定だけをDNSimpleに移しました)</p>
<h4 id="1-dnsimple">1. DNSimpleに登録する</h4>
<p>DNSimpleはユーザビリティに主眼を置いたDNSサービスのようで<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> 、APIでDNSレコードを更新したりAWSやHerokuやgithub pagesといったクラウドサービスとの連携が簡単にできます。</p>
<p><a href="https://dnsimple.com/r/4388f43fedebae">
<img alt="dnsimple" src="/images/dnsimple.png" /> </p>
<p><strong>DNSimple</strong>
</a></p>
<p>登録時に対象ドメインを聞かれるので、そのとき移行したいドメインを入力します。</p>
<p>ちなみに月額3ドルから<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> ですが30日は無料でつかえます。誰かを紹介すると、紹介した人とされた人の両方の無料期間が伸びます。上のリンクにはキャンペーンコードが埋め込まれているので、この記事を読んだ人はぜひ上のリンクから登録してください。</p>
<p>登録が完了するだけで一通りのUIが使えるようになりますが、DNS機能が有効になるのは決済情報を入力してからです。</p>
<h4 id="2-dnsimplegithub-pages">2. DNSimpleでgithub pagesとの連携を開始する</h4>
<p><a href="https://dnsimple.com/domains">dnsimpleの管理画面</a> に行くとServicesというボタンがあるのでそこからgithub pagesと連携を開始します。</p>
<h4 id="3">3. ネームサーバの設定をする</h4>
<p>お名前.com の以下のページの「他のネームサーバーを利用」からDNSimpleのネームサーバを指定します。</p>
<p><a href="https://www.onamae.com/domain/navi/ns_update/input?btn_id=navi_menu_domain_nsupdate_leftmenu_12">https://www.onamae.com/domain/navi/ns_update/input?btn_id=navi_menu_domain_nsupdate_leftmenu_12</a> </p>
<p>登録するサーバは以下です。</p>
<ul>
<li>ns1.dnsimple.com</li>
<li>ns2.dnsimple.com</li>
<li>ns3.dnsimple.com</li>
<li>ns4.dnsimple.com</li>
</ul>
<p><a href="http://support.dnsimple.com/articles/dnsimple-nameservers">参考 - DNSimple Name Servers</a> </p>
<p>この段階ではお名前.com側で設定しているAレコードはそのまま残しておきます。変更するのはネームサーバのみです。
そうしておかないと、ネームサーバの変更が伝搬するまでの間にお名前.comに問いあわせが来た場合NXDOMAIN扱いになってします。</p>
<h4 id="4-dns">4. dnsの更新を確認する</h4>
<p>更新前は以下</p>
<div class="pygments_borland"><pre>% dig mojavy.com
mojavy.com.             259     IN      A       207.97.227.245
</pre></div>

<p>もしくは以下</p>
<div class="pygments_borland"><pre>% dig mojavy.com
mojavy.com.             259     IN      A       204.232.175.78
</pre></div>

<p>のようになっていたはずですが、反映が完了すれば上記とは違うIPが返ってくるはずです。
反映までには時間がかかるので気長に待ちます。完全に反映されるには3日ほどかかるようです。</p>
<div class="pygments_borland"><pre>% dig mojavy.com
mojavy.com.             3600    IN      A       103.245.222.133

% dig taksatou.github.io
taksatou.github.io.     2973    IN      CNAME   github.map.fastly.net.
github.map.fastly.net.  15      IN      A       103.245.222.133
</pre></div>

<h4 id="5-cdn">5. CDNの確認</h4>
<p><a href="http://www.webpagetest.org/">webpagetest</a> のような計測ツールを使ってもいいですが、CDNからのレスポンスは<code>X-xxx</code>のようなヘッダがつくようなのでcurlでも確認できます。</p>
<div class="pygments_borland"><pre>% curl -v mojavy.com 2&gt;&amp;1  &gt; /dev/null  | grep &#39;X-&#39;
&lt; X-Served-By: cache-ty67-TYO
&lt; X-Cache: HIT
&lt; X-Cache-Hits: 5
&lt; X-Timer: S1392104522.668435574,VS0,VE0
</pre></div>

<p>もう完全に反映されたと思ったらお名前.com側で設定しているAレコードは無効にして大丈夫です。</p>
<h2 id="_1">その他参考</h2>
<ul>
<li><a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">https://help.github.com/articles/setting-up-a-custom-domain-with-pages</a> </li>
</ul>
<h2 id="_2">まとめ</h2>
<ul>
<li>github pagesをつかえば無料でCDNから配信できる!</li>
<li>Apexドメインは慎重に使うべきだったという教訓を得た</li>
<li>DNSimple便利</li>
</ul>
<div class="footnote">
<hr />
<ol>
<li id="fn:1">
<p>The satisfaction of not having to use GoDaddy!  らしい&#160;<a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
<li id="fn:2">
<p>登録ドメイン数に応じて自動的にプランが切りかわるようです。&#160;<a href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text">&#8617;</a></p>
</li>
</ol>
</div>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[全文検索システムの比較 - Elasticsearch vs Solr vs Amazon CloudSearch]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2014/02/10/search-engine-comparison/" />
    <id>http://mojavy.com/blog/2014/02/10/search-engine-comparison/</id>
    <updated>2014-02-10T01:05:25Z</updated>
    <published>2014-02-10T01:05:25Z</published>
    <category scheme="http://mojavy.com/blog" term="solr" />
    <category scheme="http://mojavy.com/blog" term="aws" />
    <category scheme="http://mojavy.com/blog" term="elasticsearch" />
    <category scheme="http://mojavy.com/blog" term="web" />
    <summary type="html"><![CDATA[全文検索システムの比較 - Elasticsearch vs Solr vs Amazon CloudSearch]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2014/02/10/search-engine-comparison/"><![CDATA[<p>Elasticsearch、Solr、及び Amazon CloudSearchの比較検討を行った。</p>
<h2 id="_1">目次</h2>
<div class="toc">
<ul>
<li><a href="#_1">目次</a></li>
<li><a href="#_2">候補の選定方法</a></li>
<li><a href="#solr">Solr</a><ul>
<li><a href="#_3">長所</a></li>
<li><a href="#_4">短所</a></li>
</ul>
</li>
<li><a href="#elasticsearch">Elasticsearch</a><ul>
<li><a href="#_5">長所</a></li>
<li><a href="#_6">短所</a></li>
</ul>
</li>
<li><a href="#amazon-cloudsearch">Amazon CloudSearch</a><ul>
<li><a href="#_7">長所</a></li>
<li><a href="#_8">短所</a></li>
</ul>
</li>
<li><a href="#_9">比較項目別のまとめ</a><ul>
<li><a href="#_10">拡張性</a></li>
<li><a href="#_11">性能</a></li>
<li><a href="#_12">安定性</a></li>
<li><a href="#_13">リアルタイムデータ更新</a></li>
<li><a href="#_14">日本語対応</a></li>
<li><a href="#_15">スケーラビリティ</a></li>
</ul>
</li>
<li><a href="#_16">参考リンクまとめ</a></li>
<li><a href="#_17">所感</a></li>
</ul>
</div>
<h2 id="_2">候補の選定方法</h2>
<p>候補を選定するにあたって、以下の特徴をもっていることを前提とした。
LuceneやGroongaを使えば何でもできるが、ここでは対象としない。</p>
<ul>
<li>ウェブベースのインターフェースを持つ</li>
<li>インデックスの更新はほぼリアルタイムに反映される</li>
<li>スケールアウトが容易</li>
</ul>
<h2 id="solr">Solr</h2>
<p><img alt="solr" src="/images/solr-150.png" /> </p>
<p><a href="https://lucene.apache.org/solr/">https://lucene.apache.org/solr/</a> </p>
<p>Luceneをバックエンドにした全文検索システム。バージョン4になってから大幅に機能が増強された。</p>
<h3 id="_3">長所</h3>
<ul>
<li>実績が十分ある</li>
<li>機能豊富</li>
</ul>
<h3 id="_4">短所</h3>
<ul>
<li>クラスタを構築して運用するには手間がかかりそう</li>
<li>SolrCloudはzookeeperに依存するためサーバ台数もかさむ</li>
</ul>
<h2 id="elasticsearch">Elasticsearch</h2>
<p><img alt="Elasticsearch" src="/images/elasticsearch-logo.png" /> </p>
<p><a href="http://www.elasticsearch.org/">http://www.elasticsearch.org/</a> </p>
<p>Solrと同じくLuceneをバックエンドにした全文検索システム。開発者の言<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>によると、Solrより洗練された分散モデルで<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> 、使いやすいAPIを備えている。 </p>
<h3 id="_5">長所</h3>
<ul>
<li>アーキテクチャやUIが今風</li>
<li>クラスタの構築が簡単</li>
<li>KibanaやLogstashと連携できる</li>
<li>Percolate APIというpush通知のような機能を簡単に実装するためのものがある</li>
</ul>
<h3 id="_6">短所</h3>
<ul>
<li>後発な分ノウハウの蓄積にやや不安が残る</li>
<li>未実装機能がいくらかある(あった。現時点(2014-02-09)では機能的にはほぼ追いついているように見える  <a href="http://solr-vs-elasticsearch.com/">http://solr-vs-elasticsearch.com/</a>  )</li>
</ul>
<h2 id="amazon-cloudsearch">Amazon CloudSearch</h2>
<p><img alt="amazon" src="/images/aws-logo-s.png" /> </p>
<p><a href="http://aws.amazon.com/jp/cloudsearch/">http://aws.amazon.com/jp/cloudsearch/</a> </p>
<p>AWS上で提供されている全文検索システム。EC2と同じく時間とトラフィックで課金される。現時点ではまだベータ。</p>
<h3 id="_7">長所</h3>
<ul>
<li>自動的にスケーリングしてくれる(エントリ数、リクエスト数に応じてインスタンスが自動的に増える)</li>
<li>pdfやdocをそのまま送るだけでも適当にうまくやってくれる</li>
<li>DynamoDBのデータをそのまま流してインデックスできる</li>
</ul>
<h3 id="_8">短所</h3>
<ul>
<li>現状では東京リージョンがない</li>
<li>テキスト解析のカスタマイズが限定的。現状、Stemming, Stopwords, Synonymsのみカスタム可能。</li>
<li>N-gramとか形態素解析は自前で処理してからアップロードする必要がある</li>
<li>ヒット位置を取る方法がない</li>
<li>テキスト本文をインデックスと一緒に格納することはできない</li>
</ul>
<h2 id="_9">比較項目別のまとめ</h2>
<h3 id="_10">拡張性</h3>
<p>SolrもElasticsearchもLuceneをバックエンドにしているので、Luceneでできることは基本的にはどちらでもできるはず。
Amazonは現状ではあまり拡張性はない。</p>
<h3 id="_11">性能</h3>
<p>基本性能はSolrもElasticsearchも大差はなさそう。
Amazonは自動的にノードが追加されるので性能の問題はなさそう。ただし、ノードが自動追加されるタイミングとその時の挙動は未確認。</p>
<h3 id="_12">安定性</h3>
<p>数年先行している分Solrがよいと思われるが、Elasticsearchも既に十分本番稼動実績はある。
Amazonはベータなので未知数。</p>
<h3 id="_13">リアルタイムデータ更新</h3>
<p>いずれもほぼリアルタイムに更新できる。</p>
<h3 id="_14">日本語対応</h3>
<p>SolrとElasticsearchはほぼ同等。kuromojiやmecabをつかえば形態素解析もできる。
Amazonはそれ自体では対応していないが、Luceneのtokenizer等を使って自前で前処理することで対応は可能。</p>
<h3 id="_15">スケーラビリティ</h3>
<p>Amazonは完全に自動的にスケールアウトしてくれる。
Elasticsearchはインデックスのシャード数を作成時に決めておく必要があるが、スケールアウトは容易だと思われる。
Solrはv4からはElasticsearchと大体同等のスケーラビリティを備えるようになった。</p>
<h2 id="_16">参考リンクまとめ</h2>
<ul>
<li><a href="http://stackoverflow.com/questions/10213009/solr-vs-elasticsearch">http://stackoverflow.com/questions/10213009/solr-vs-elasticsearch</a> </li>
<li><a href="http://stackoverflow.com/questions/2271600/elasticsearch-sphinx-lucene-solr-xapian-which-fits-for-which-usage">http://stackoverflow.com/questions/2271600/elasticsearch-sphinx-lucene-solr-xapian-which-fits-for-which-usage</a> </li>
<li><a href="http://blog.kakipo.com/trouble-with-fluentd-and-elasticsearch/">http://blog.kakipo.com/trouble-with-fluentd-and-elasticsearch/</a> </li>
<li><a href="https://github.com/atilika/kuromoji">https://github.com/atilika/kuromoji</a> </li>
<li><a href="http://www.elasticsearch.org/blog/percolator/">http://www.elasticsearch.org/blog/percolator/</a> </li>
<li><a href="http://blog.feedbin.me/2013/11/10/powering-actions-with-elasticsearch-percolate/">http://blog.feedbin.me/2013/11/10/powering-actions-with-elasticsearch-percolate/</a> </li>
<li><a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/text-processing.html">http://docs.aws.amazon.com/cloudsearch/latest/developerguide/text-processing.html</a> </li>
<li><a href="http://blog.mikemccandless.com/2011/06/lucenes-near-real-time-search-is-fast.html">http://blog.mikemccandless.com/2011/06/lucenes-near-real-time-search-is-fast.html</a> </li>
<li><a href="https://wiki.apache.org/solr/Solr4.0">https://wiki.apache.org/solr/Solr4.0</a> </li>
<li><a href="http://www.slideshare.net/kucrafal/battle-of-the-giants-apache-solr-vs-elasticsearch">http://www.slideshare.net/kucrafal/battle-of-the-giants-apache-solr-vs-elasticsearch</a> </li>
</ul>
<h2 id="_17">所感</h2>
<p>後発な分Elasticsearchが一番洗練されているように思います。
Solrは無難に導入できそうですが、スケールアウトが必要になったとき手間がかかりそうです。
Amazonはメリットも多いですが、現状では制限が多いので使いづらいと思います。</p>
<p><strong>追記</strong></p>
<ul>
<li>2014/02/12 23:59:13： ElasticSearch →  Elasticsearchに直しました</li>
</ul>
<div class="footnote">
<hr />
<ol>
<li id="fn:1">
<p><a href="http://stackoverflow.com/questions/2271600/elasticsearch-sphinx-lucene-solr-xapian-which-fits-for-which-usage">http://stackoverflow.com/questions/2271600/elasticsearch-sphinx-lucene-solr-xapian-which-fits-for-which-usage</a> &#160;<a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
<li id="fn:2">
<p>昔のSolrは単純なレプリケーションとシャーディングしかなかったので、クラスタを構築するのは大変だった&#160;<a href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text">&#8617;</a></p>
</li>
</ol>
</div>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[Goのtemplateパッケージ簡易チートシート]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2013/11/19/go-template/" />
    <id>http://mojavy.com/blog/2013/11/19/go-template/</id>
    <updated>2013-11-19T19:19:57Z</updated>
    <published>2013-11-19T19:19:57Z</published>
    <category scheme="http://mojavy.com/blog" term="golang" />
    <summary type="html"><![CDATA[Goのtemplateパッケージ簡易チートシート]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2013/11/19/go-template/"><![CDATA[<p>goに標準でついてるtemplateパッケージは便利なのだけど、<a href="http://golang.org/pkg/text/template/">マニュアル</a>が長すぎるのでよく使う機能だけまとめておく。</p>
<p>そろそろだれかテンプレートエンジンを標準化してほしい。</p>
<div class="toc">
<ul>
<li><a href="#_1">基本</a></li>
<li><a href="#_2">変数展開</a></li>
<li><a href="#_3">関数呼び出し</a></li>
<li><a href="#_4">ループ</a></li>
<li><a href="#_5">組み込み関数</a></li>
</ul>
</div>
<h2 id="_1">基本</h2>
<div class="pygments_borland"><pre><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">&quot;os&quot;</span>
    <span class="s">&quot;text/template&quot;</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">tmpl</span> <span class="p">:=</span> <span class="s">&quot;Hello, {{.template}}!&quot;</span>
    <span class="n">t</span> <span class="p">:=</span> <span class="n">template</span><span class="p">.</span><span class="n">New</span><span class="p">(</span><span class="s">&quot;t&quot;</span><span class="p">)</span>
    <span class="n">template</span><span class="p">.</span><span class="n">Must</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">tmpl</span><span class="p">))</span>
    <span class="n">t</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">Stdout</span><span class="p">,</span> <span class="k">map</span><span class="p">[</span><span class="nb">string</span><span class="p">]</span><span class="nb">string</span><span class="p">{</span><span class="s">&quot;template&quot;</span><span class="p">:</span> <span class="s">&quot;World&quot;</span><span class="p">})</span>
<span class="p">}</span>
</pre></div>

<p>ちなみに、<code>template.Must(t.Parse(tmpl))</code>は以下のショートカット</p>
<div class="pygments_borland"><pre><span class="n">_</span><span class="p">,</span> <span class="n">err</span> <span class="p">:=</span> <span class="n">t</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">tmpl</span><span class="p">)</span>
<span class="k">if</span> <span class="n">err</span> <span class="p">!=</span> <span class="n">nil</span> <span class="p">{</span>
    <span class="n">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
<span class="p">}</span>
</pre></div>

<h2 id="_2">変数展開</h2>
<p>通常はmapのキーかstructのメンバを<code>.Key</code>のようにドット付きで指定するとでその値が展開される。
ただし、該当するキーが見つからなかった場合、mapでは<code>&lt;no value&gt;</code>という文字列が出力されるが、structではエラーになる。</p>
<div class="pygments_borland"><pre><span class="k">type</span> <span class="n">T</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">Name</span> <span class="nb">string</span>
<span class="p">}</span>

<span class="n">tmpl</span> <span class="p">:=</span> <span class="s">&quot;Hello, {{.Name}}!\n&quot;</span>
<span class="n">t</span> <span class="p">:=</span> <span class="n">template</span><span class="p">.</span><span class="n">New</span><span class="p">(</span><span class="s">&quot;t&quot;</span><span class="p">)</span>
<span class="n">template</span><span class="p">.</span><span class="n">Must</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">tmpl</span><span class="p">))</span>

<span class="n">t</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">Stdout</span><span class="p">,</span> <span class="k">map</span><span class="p">[</span><span class="nb">string</span><span class="p">]</span><span class="nb">string</span><span class="p">{</span><span class="s">&quot;Name&quot;</span><span class="p">:</span> <span class="s">&quot;map&quot;</span><span class="p">})</span>
<span class="n">t</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">Stdout</span><span class="p">,</span> <span class="n">T</span><span class="p">{</span><span class="n">Name</span><span class="p">:</span> <span class="s">&quot;struct&quot;</span><span class="p">})</span>
<span class="n">t</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">Stdout</span><span class="p">,</span> <span class="p">&amp;</span><span class="n">T</span><span class="p">{</span><span class="n">Name</span><span class="p">:</span> <span class="s">&quot;struct reference&quot;</span><span class="p">})</span>
</pre></div>

<p><code>.</code>のようにドットだけを渡すと変数それ自体が展開される。</p>
<div class="pygments_borland"><pre><span class="n">tmpl</span> <span class="p">:=</span> <span class="s">&quot;Hello, {{.}}!\n&quot;</span>
<span class="n">t</span> <span class="p">:=</span> <span class="n">template</span><span class="p">.</span><span class="n">New</span><span class="p">(</span><span class="s">&quot;t&quot;</span><span class="p">)</span>
<span class="n">template</span><span class="p">.</span><span class="n">Must</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">tmpl</span><span class="p">))</span>
<span class="n">t</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">Stdout</span><span class="p">,</span> <span class="s">&quot;World&quot;</span><span class="p">)</span>
</pre></div>

<h2 id="_3">関数呼び出し</h2>
<p>関数はシェルのパイプのように連結させて呼びだせる。テンプレート内で呼ぶ関数は<code>template.FuncMap</code>で渡す。</p>
<div class="pygments_borland"><pre><span class="n">tmpl</span> <span class="p">:=</span> <span class="s">`Now {{now}}, {{&quot;hello&quot; | toupper}}`</span>
<span class="n">t</span> <span class="p">:=</span> <span class="n">template</span><span class="p">.</span><span class="n">New</span><span class="p">(</span><span class="s">&quot;t&quot;</span><span class="p">)</span>
<span class="n">t</span><span class="p">.</span><span class="n">Funcs</span><span class="p">(</span><span class="n">template</span><span class="p">.</span><span class="n">FuncMap</span><span class="p">{</span>
    <span class="s">&quot;now&quot;</span><span class="p">:</span>     <span class="k">func</span><span class="p">()</span> <span class="nb">string</span> <span class="p">{</span> <span class="k">return</span> <span class="n">time</span><span class="p">.</span><span class="n">Now</span><span class="p">().</span><span class="n">String</span><span class="p">()</span> <span class="p">},</span>
    <span class="s">&quot;toupper&quot;</span><span class="p">:</span> <span class="n">strings</span><span class="p">.</span><span class="n">ToUpper</span><span class="p">,</span>
<span class="p">})</span>
<span class="n">template</span><span class="p">.</span><span class="n">Must</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">tmpl</span><span class="p">))</span>
<span class="n">t</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">Stdout</span><span class="p">,</span> <span class="n">nil</span><span class="p">)</span> <span class="c1">// =&gt; Now 2013-11-19 19:17:51.378063751 +0900 JST, HELLO</span>
</pre></div>

<h2 id="_4">ループ</h2>
<p>組み込みの<code>range</code> Actionをつかえばよい。</p>
<div class="pygments_borland"><pre><span class="k">type</span> <span class="n">T</span> <span class="k">struct</span><span class="p">{</span> <span class="n">Name</span> <span class="nb">string</span> <span class="p">}</span>
<span class="n">tmpl</span> <span class="p">:=</span> <span class="s">`</span>
<span class="s">{{range .}}- {{.Name}}</span>
<span class="s">{{end}}</span>
<span class="s">`</span>
<span class="n">t</span> <span class="p">:=</span> <span class="n">template</span><span class="p">.</span><span class="n">New</span><span class="p">(</span><span class="s">&quot;t&quot;</span><span class="p">)</span>
<span class="n">template</span><span class="p">.</span><span class="n">Must</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">tmpl</span><span class="p">))</span>
<span class="n">t</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">Stdout</span><span class="p">,</span> <span class="p">[]</span><span class="n">T</span><span class="p">{</span>
    <span class="p">{</span><span class="n">Name</span><span class="p">:</span> <span class="s">&quot;Alice&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Name</span><span class="p">:</span> <span class="s">&quot;Bob&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Name</span><span class="p">:</span> <span class="s">&quot;Charlie&quot;</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Name</span><span class="p">:</span> <span class="s">&quot;Dave&quot;</span><span class="p">},</span>
<span class="p">})</span>
</pre></div>

<p>その他、条件分岐等のActionは <a href="http://golang.org/pkg/text/template/#hdr-Actions">マニュアルのActionsの</a> 参照</p>
<h2 id="_5">組み込み関数</h2>
<p>こちらも <a href="http://golang.org/pkg/text/template/#hdr-Functions">マニュアルのFunctionsの項</a> を参照</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[GoConveyでGoプロジェクトをブラウザからテストする]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2013/11/17/goconvey/" />
    <id>http://mojavy.com/blog/2013/11/17/goconvey/</id>
    <updated>2013-11-17T00:30:57Z</updated>
    <published>2013-11-17T00:30:57Z</published>
    <category scheme="http://mojavy.com/blog" term="golang" />
    <summary type="html"><![CDATA[GoConveyでGoプロジェクトをブラウザからテストする]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2013/11/17/goconvey/"><![CDATA[<p><a href="http://smartystreets.github.io/goconvey/">GoConvey</a> を試してみたらなかなかよかったので紹介します。</p>
<h2 id="_1">目次</h2>
<div class="toc">
<ul>
<li><a href="#_1">目次</a></li>
<li><a href="#goconvey">goconveyとは</a></li>
<li><a href="#_2">クイックスタート</a></li>
<li><a href="#_3">テストを書く</a></li>
<li><a href="#_4">ターミナルから自動テスト</a></li>
<li><a href="#tips">tips</a></li>
<li><a href="#_5">まとめ</a></li>
<li><a href="#_6">その他参考</a></li>
</ul>
</div>
<h2 id="goconvey">goconveyとは</h2>
<p>gopherのためのかっこいいテストツールです。以下のような特徴があります。</p>
<ul>
<li><code>go test</code>をそのまま実行できる</li>
<li>リグレッションテストのための一式</li>
<li>見やすく色付けされた出力</li>
<li>完全に自動化されたWeb UI</li>
<li>テストコードジェネレータ</li>
<li>デスクトップ通知</li>
<li>ターミナル上で動く自動テストスクリプト</li>
<li>Sublime Textとの連携</li>
</ul>
<h2 id="_2">クイックスタート</h2>
<div class="pygments_borland"><pre>$ go get github.com/smartystreets/goconvey # install
$ $GOPATH/bin/goconvey
</pre></div>

<p>上記コマンドを実行して <code>http://localhost:8080</code> にブラウザからWeb UIアクセスすると、goconveyを起動したディレクトリ以下のファイルの更新を自動的に検知してテストを起動してくれます。</p>
<p>Web UIの右上にあるベルのアイコンをクリックすると、デスクトップ通知も有効にできます。</p>
<p>また、テストが失敗した場合はその部分をクリックすることで、Sublime Textで直接そこにジャンプできます。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>
<p>特定のディレクトリ以下のテストを実行しないようにすることもできます。テストに時間がかかるような大きなプロジェクトでも適当に必要なところだけ有効にできるので、ストレスがたまりにくいと思います。</p>
<h2 id="_3">テストを書く</h2>
<p>goconveyのWeb UIは<code>go test</code>で起動できるテストならなんにでも使えますが<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> 、goconveyのテスティングフレームワークをつかうとさらにわかりやすい結果を出力できます。</p>
<div class="pygments_borland"><pre><span class="k">package</span> <span class="n">goconveytest</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="p">.</span> <span class="s">&quot;github.com/smartystreets/goconvey/convey&quot;</span>
    <span class="s">&quot;testing&quot;</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">TestSpec</span><span class="p">(</span><span class="n">t</span> <span class="p">*</span><span class="n">testing</span><span class="p">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">var</span> <span class="n">x</span> <span class="nb">int</span>

    <span class="c1">// Only pass t into top-level Convey calls</span>
    <span class="n">Convey</span><span class="p">(</span><span class="s">&quot;Given some integer with a starting value&quot;</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">x</span> <span class="p">=</span> <span class="mi">1</span>

        <span class="n">Convey</span><span class="p">(</span><span class="s">&quot;When the integer is incremented&quot;</span><span class="p">,</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
            <span class="n">x</span><span class="p">++</span>

            <span class="n">Convey</span><span class="p">(</span><span class="s">&quot;The value should be greater by one&quot;</span><span class="p">,</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
                <span class="n">So</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">ShouldEqual</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
            <span class="p">})</span>
        <span class="p">})</span>
    <span class="p">})</span>
<span class="p">}</span>
</pre></div>

<p>Web UIから文章を入力することでテストコードをある程度自動生成することもできます。</p>
<p>BDDスタイルはあんまり得意ではないので詳細は省略します。</p>
<h2 id="_4">ターミナルから自動テスト</h2>
<p>ブラウザなんて立ちあげたくない硬派な人向けにターミナルでファイル監視してテストを起動できるスクリプトも提供されています。
emacsのロックファイルがあると落ちてしまう問題があったのですが、さっきpull requestだしたらすぐマージしてくれました。 <a href="https://github.com/smartystreets/goconvey/pull/88">https://github.com/smartystreets/goconvey/pull/88</a> </p>
<div class="pygments_borland"><pre>$GOPATH/src/github.com/smartystreets/goconvey/scripts/idle.py -v
</pre></div>

<h2 id="tips">tips</h2>
<ul>
<li><code>localhost:8080/latest</code>にアクセスするとjsonでテスト結果がとれます</li>
<li>goconveyのWeb UIは<code>GOPATH</code>以下のパッケージのディレクトリで起動する必要があります (例えば、<code>$GOPATH/src/github.com/yourname/packagename</code>)</li>
</ul>
<h2 id="_5">まとめ</h2>
<p>goconveyを簡単に紹介しました。Web UIだけでも試す価値はあると思います。</p>
<p>ビデオでの解説もあります。ぶっちゃけこの記事を読むより動画を見たほうが早いです。</p>
<iframe width="420" height="315" src="//www.youtube.com/embed/vL_UD1oAF0E" frameborder="0" allowfullscreen></iframe>

<h2 id="_6">その他参考</h2>
<ul>
<li><a href="http://qiita.com/takuan_osho/items/51c8856a3d28145d87bc">http://qiita.com/takuan_osho/items/51c8856a3d28145d87bc</a> </li>
<li><a href="http://blog.satotaichi.info/testingframeworks-for-golang">http://blog.satotaichi.info/testingframeworks-for-golang</a> </li>
</ul>
<div class="footnote">
<hr />
<ol>
<li id="fn:1">
<p>残念なことにemacsやvimには対応していない&#160;<a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
<li id="fn:2">
<p>ginkgoやtestifyのテストも実行できます。ただし、ginkgoのテスト結果はデフォルトだとエスケープシーケンスがそのまま表示されてしまいます&#160;<a href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text">&#8617;</a></p>
</li>
</ol>
</div>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[ベイズの定理から見るガン検査]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2013/11/12/bayes-theorem-and-detecting-cancer/" />
    <id>http://mojavy.com/blog/2013/11/12/bayes-theorem-and-detecting-cancer/</id>
    <updated>2013-11-12T03:01:16Z</updated>
    <published>2013-11-12T03:01:16Z</published>
    <category scheme="http://mojavy.com/blog" term="statistics" />
    <summary type="html"><![CDATA[ベイズの定理から見るガン検査]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2013/11/12/bayes-theorem-and-detecting-cancer/"><![CDATA[<p><a href="http://www.huffingtonpost.jp/2013/11/10/cancer-test_n_4252707.html">http://www.huffingtonpost.jp/2013/11/10/cancer-test_n_4252707.html</a> </p>
<p>高校生がすい臓がん発見の画期的方法を開発したという記事が話題になってます。</p>
<p>この検査法の改善が統計的にどういう意味をもつのか実際にベイズの定理をつかって計算してみます。</p>
<p>ここでは以下のような問題を考えることとします。</p>
<blockquote>
<p>あるガン検査法は、被験者ががんの場合はp1の確率で陽性になり、被験者ががんでなければp2の確率で陰性になります。被験者ががん患者である確率がp3のとき、がん患者が検査の結果実際に陽性だと判定される確率を求めなさい。</p>
</blockquote>
<p>Xを被検査者はガンであるという事象、Yを検査の結果が被検査者はガンであると示す事象として、それぞれ以下のように置き換えることができます。</p>
<p><img src="/images/874a5aeecf9b35cdbf1134ce65609eb8.png">
</p>

<p>
ただし、<img src="/images/33690e97dbeaa68d615e68dba167db2a.png"> はBが起こったときにAが起こる確率(条件付き確率)、<img src="/images/f679168b61f35c21700eef5eb88dc82d.png"> はAが起こらないという事象(補事象)を表します。
</p>

<p>求めたい確率は<img src="/images/7082016653a57c45dae6f7d57ceea8ba.png"> なので、ベイズの定理より
<p><img src="/images/227eb2fa21aa259a48119a03e888a78c.png">
</p></p>
<p>ここで<img src="/images/0c3d72395d7576ab13b9e9389f865960.png"> は検査結果が真陽性となる確率と偽陰性となる確率を足したものなので、
<p><img src="/images/e2fb081253f2ada10b84e8c39da103d6.png">
</p></p>
<p>また、
<p><img src="/images/18b3d7224708203cb4000f3539856aab.png"> 
</p>
なので、</p>
<p><img src="/images/298c37b1f601ada40fbe0808816d66a3.png"> 
</p>

<p>となります。</p>
<p>以上の結果に実際に値をあてはめてみます。</p>
<p>2008年のすい臓がん推定患者数は29584 <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>、同年の人口は127692000 <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>なので、<code>p3=0.23168 * 10^-3</code>。
また、簡単のためにp1, p2をひとまとめに誤検出の確率と仮定して<code>p1=p2=q</code>おくと、P(Y|X)が70%となるようなqは、<strong>q=0.99990</strong>となります。</p>
<p>このことから、99.99%の精度をもつ検出方法でも実際には30%も見逃してしまうということがわかります。</p>
<p>さらに、「400倍の精度で検査できる」という部分を誤検出の確率が400分の1になったという意味だと解釈して、
<code>q'=1-(1-q)/400</code>とおいてがん患者が検査の結果実際に陽性だと判定される確率を再度計算すると<strong>P(Y|X)=0.99892</strong>となります。</p>
<p>つまり30%見逃していたのが1%程度まで減ったということです。
これはすばらしい成果といえるのではないでしょうか。</p>
<p>最初は30%も見逃すとかどんなひどい検査だったんだ、などと思ってしまうかもしれませんが、上記の計算で実際はそれほど単純な話ではないことがわかると思います。</p>
<p><a href="http://www.amazon.co.jp/gp/product/4130420658/ref=as_li_ss_il?ie=UTF8&camp=247&creative=7399&creativeXSIN=4130420658&linkCode=as2&tag=armyofpigs-22"><img border="0" src="http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=4130420658&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=armyofpigs-22" ></a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=armyofpigs-22&l=as2&o=9&a=4130420658" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> </p>
<div class="footnote">
<hr />
<ol>
<li id="fn:1">
<p><a href="http://ganjoho.jp/professional/statistics/statistics.html">国立がん研究センターがん対策情報センター - http://ganjoho.jp/professional/statistics/statistics.html</a> &#160;<a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
<li id="fn:2">
<p><a href="http://www.e-stat.go.jp/SG1/estat/List.do?lid=000001054002">http://www.e-stat.go.jp/SG1/estat/List.do?lid=000001054002</a> &#160;<a href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text">&#8617;</a></p>
</li>
<li id="fn:3">
<p>この問題は統計学入門の練習問題4.7を参考にしています。&#160;<a href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text">&#8617;</a></p>
</li>
</ol>
</div>]]></content>
  </entry>
</feed>
