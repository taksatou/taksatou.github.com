<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">mojavy.com</title>
  <subtitle type="text"></subtitle>

  <updated>2013-03-28T02:50:01Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://mojavy.com/blog" />
  <id>http://mojavy.com/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://mojavy.com/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[Mac OSXでシェルスクリプトをキーボードショートカットに登録する方法]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2013/03/28/mac-shell-script-keyboard-shortcut/" />
    <id>http://mojavy.com/blog/2013/03/28/mac-shell-script-keyboard-shortcut/</id>
    <updated>2013-03-28T02:50:01Z</updated>
    <published>2013-03-28T02:50:01Z</published>
    <category scheme="http://mojavy.com/blog" term="mac" />
    <category scheme="http://mojavy.com/blog" term="shell" />
    <category scheme="http://mojavy.com/blog" term="tips" />
    <summary type="html"><![CDATA[Mac OSXでシェルスクリプトをキーボードショートカットに登録する方法]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2013/03/28/mac-shell-script-keyboard-shortcut/"><![CDATA[<p><img alt="automator" src="/images/automator.png" /></p>
<p>概要を以下にメモ</p>
<ol>
<li>Automatorを起動</li>
<li>サービスを選択</li>
<li>右ペインの上部、「次の選択項目を受け取ります」を入力なしにする</li>
<li>左ペインからシェルスクリプトを実行をダブルクリック</li>
<li>デフォルトで<code>cat</code>になっている内容を任意のシェルスクリプトにする</li>
<li>右上の実行ボタンからテスト</li>
<li>右上の記録ボタンから適当な名前をつけて保存して閉じる</li>
<li>システム環境設定＞キーボードを開く</li>
<li>キーボードショートカットのタブを選択</li>
<li>サービスを選択してさっき保存したautomatorの名前をみつける</li>
<li>好きなショートカットを設定する</li>
</ol>
<p>参考: <a href="http://superuser.com/questions/45740/fast-user-switching-apple-menu/46308#46308">http://superuser.com/questions/45740/fast-user-switching-apple-menu/46308#46308</a></p>
<h4 id="_1">備考</h4>
<ul>
<li>新規作成したworkflowは保存して閉じるまでシステム設定のキーボードショートカットの項目に反映されない</li>
<li>workflowは$HOME/Library/Services に保存される</li>
</ul>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[hekyllのimpress.jsスライドを自動的にグリッド配置するjekyllプラグイン]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2013/03/26/jekyll-plugin/" />
    <id>http://mojavy.com/blog/2013/03/26/jekyll-plugin/</id>
    <updated>2013-03-26T20:37:24Z</updated>
    <published>2013-03-26T20:37:24Z</published>
    <category scheme="http://mojavy.com/blog" term="jekyll" />
    <category scheme="http://mojavy.com/blog" term="impress.js" />
    <category scheme="http://mojavy.com/blog" term="ruby" />
    <summary type="html"><![CDATA[hekyllのimpress.jsスライドを自動的にグリッド配置するjekyllプラグイン]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2013/03/26/jekyll-plugin/"><![CDATA[<p><a href="https://github.com/bmcmurray/hekyll">hekyll</a>は<a href="https://github.com/bartaz/impress.js/">impress.js</a>用<a href="https://github.com/mojombo/jekyll">jekyll</a>テンプレのようなものだけど、スライドの位置を個別に指定する必要があってめんどうだったので適当なグリッドに配置するプラグインを書いた。</p>
<h3 id="jekyll">jekyllのプラグインについて</h3>
<p><a href="https://github.com/mojombo/jekyll/wiki/Plugins">https://github.com/mojombo/jekyll/wiki/Plugins</a>に必要なことは大体書いてある。</p>
<p>jekyllのディレクトリに<code>_plugins</code>ディレクトリを作り、その中に<code>*.rb</code>をおいておけば自動的にロードされる。
プラグインの種類はおおまかに以下の4通り。サンプルは本家wikiにあるのでメモもかねて概要だけ。</p>
<ul>
<li>Generators 
<ul></li>
<li>カテゴリ別とか期間別といった任意のルールでページを生成する
</ul></li>
<li>Converters
<ul></li>
<li>hamlとかjsonとかのフォーマット変換をする
</ul></li>
<li>Tags
<ul></li>
<li>liquidテンプレートエンジンのタグを追加する</li>
<li>たとえば、<code>{{ your_tag }}</code> というタグをつかいたければ、<code>Liquid::Tag</code>を継承したクラスをつくって、<code>Liquid::Template.register_tag('your_tag', Jekyll::YourTag)</code> などとする
</ul></li>
<li>Filters
<ul></li>
<li>liquidのフィルタを追加する</li>
<li>フィルタとはいいつつどんな関数でも登録できる</li>
<li>適当にモジュールをつくって、<code>Liquid::Template.register_filter(Jekyll::YourModule)</code>とすると、<code>{{ 'arg' | your_filter }}</code> のようにして呼びだせる
</ul></li>
</ul>
<h3 id="_1">ソース</h3>
<p>wikiで説明されているpluginの書き方を踏まえた上で、それを完全に無視する方法で実装した。
Postクラスを拡張してhekyllにあうようにliquidに渡すデータを上書きしてるだけ。</p>
<p>もっといい方法はあると思う。</p>
<div class="pygments_murphy"><pre><span class="k">def</span> <span class="nf">once</span><span class="p">(</span><span class="n">tag</span><span class="p">)</span>
  <span class="k">unless</span> <span class="p">(</span><span class="vi">@__once_executed__</span> <span class="o">||=</span> <span class="o">[]</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span> <span class="n">tag</span>
    <span class="k">yield</span>
    <span class="vi">@__once_executed__</span> <span class="o">&lt;&lt;</span> <span class="n">tag</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">module</span> <span class="nn">Jekyll</span>
  <span class="k">class</span> <span class="nc">Post</span>

    <span class="k">def</span> <span class="nf">grid_position</span>
      <span class="n">pos</span> <span class="o">=</span> <span class="vi">@site</span><span class="o">.</span><span class="n">posts</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
      <span class="n">siz</span> <span class="o">=</span> <span class="no">Math</span><span class="o">::</span><span class="n">sqrt</span><span class="p">(</span><span class="vi">@site</span><span class="o">.</span><span class="n">posts</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">ceil</span>
      <span class="p">{</span>
        <span class="s2">&quot;x&quot;</span> <span class="o">=&gt;</span> <span class="mi">1000</span> <span class="o">*</span> <span class="p">(</span><span class="n">pos</span> <span class="o">%</span> <span class="n">siz</span><span class="p">),</span>
        <span class="s2">&quot;y&quot;</span> <span class="o">=&gt;</span> <span class="mi">1000</span> <span class="o">*</span> <span class="p">(</span><span class="n">pos</span> <span class="o">/</span> <span class="n">siz</span><span class="p">),</span>
      <span class="p">}</span>
    <span class="k">end</span>

    <span class="n">once</span><span class="p">(</span><span class="ss">:redefine_to_liquid</span><span class="p">)</span> <span class="k">do</span>
      <span class="k">alias</span> <span class="n">__old_to_liquid</span> <span class="n">to_liquid</span>
      <span class="k">def</span> <span class="nf">to_liquid</span>

        <span class="n">dat</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">data</span><span class="o">[</span><span class="s2">&quot;data&quot;</span><span class="o">]</span>

        <span class="k">if</span> <span class="n">dat</span><span class="o">.</span><span class="n">nil?</span>
          <span class="nb">self</span><span class="o">.</span><span class="n">data</span><span class="o">[</span><span class="s2">&quot;data&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">grid_position</span>
        <span class="k">end</span>
        <span class="n">__old_to_liquid</span>
      <span class="k">end</span>
    <span class="k">end</span>

  <span class="k">end</span>
<span class="k">end</span>
</pre></div>

<p><a href="https://gist.github.com/taksatou/5244991">https://gist.github.com/taksatou/5244991</a></p>
<h3 id="_2">まとめ</h3>
<p>impress.jsをつかっておいて単なるグリッドというのもどうかとは思いますが、位置決めをする部分をかえればなんとでもなるのでひまなときにがんばればいいと思います</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[pythonのswigエクステンションからdebian packageをつくる手順メモ]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2013/02/27/building-python-debian-package/" />
    <id>http://mojavy.com/blog/2013/02/27/building-python-debian-package/</id>
    <updated>2013-02-27T23:46:03Z</updated>
    <published>2013-02-27T23:46:03Z</published>
    <category scheme="http://mojavy.com/blog" term="python" />
    <category scheme="http://mojavy.com/blog" term="debian" />
    <category scheme="http://mojavy.com/blog" term="linux" />
    <summary type="html"><![CDATA[pythonのswigエクステンションからdebian packageをつくる手順メモ]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2013/02/27/building-python-debian-package/"><![CDATA[<p><img alt="debian" src="/images/debian-200.png" /></p>
<p>注: 以下は古めの環境(Lenny or Squeeze)と古めのpython (2.5 or 2.6)をターゲットにしたときの手順なので、最新の環境では別な方法があるかもしれません。</p>
<h2 id="_1">目次</h2>
<div class="toc">
<ul>
<li><a href="#_1">目次</a><ul>
<li><a href="#1">1. 必要なパッケージをインストール</a></li>
<li><a href="#2-setuppy">2. setup.pyをかく</a></li>
<li><a href="#3">3. ビルド確認</a></li>
<li><a href="#4-debianize">4. debianizeする</a></li>
<li><a href="#5-deb">5. debをつくる</a></li>
<li><a href="#_2">その他ツール等</a></li>
</ul>
</li>
</ul>
</div>
<h3 id="1">1. 必要なパッケージをインストール</h3>
<ul>
<li>python-setuptools</li>
<li>python-all-dev</li>
<li>python-support</li>
<li>python-stdeb</li>
<li>swig</li>
<li>debhelper</li>
<li>devscripts</li>
<li>dh_make</li>
</ul>
<p>たぶんこれだけあれば大丈夫。(python-supportはdeprecatedらしいけどここでは無視)</p>
<h3 id="2-setuppy">2. setup.pyをかく</h3>
<p><code>apt-get source python-xxx</code>で適当なパッケージのソースをダウンロードして参考にするとよい</p>
<p>以下例</p>
<div class="pygments_murphy"><pre><span class="c">#!/usr/bin/python</span>

<span class="kn">from</span> <span class="nn">setuptools</span> <span class="kn">import</span> <span class="n">setup</span><span class="p">,</span> <span class="n">Extension</span>

<span class="n">__version__</span> <span class="o">=</span> <span class="s">&quot;0.0.1&quot;</span>

<span class="n">setup</span><span class="p">(</span><span class="n">name</span>         <span class="o">=</span> <span class="s">&quot;yourext&quot;</span><span class="p">,</span>
      <span class="n">version</span>      <span class="o">=</span> <span class="n">__version__</span><span class="p">,</span>
      <span class="n">author</span>       <span class="o">=</span> <span class="s">&quot;Your Name&quot;</span><span class="p">,</span>
      <span class="n">author_email</span> <span class="o">=</span> <span class="s">&quot;yourname@example.com,</span>
      <span class="n">url</span>          <span class="o">=</span> <span class="s">&quot;http://example.com/python-yourext&quot;</span><span class="p">,</span>
      <span class="n">download_url</span> <span class="o">=</span> <span class="s">&quot;http://example.com/python-yourext-</span><span class="si">%s</span><span class="s">.tgz&quot;</span> <span class="o">%</span> <span class="n">__version__</span><span class="p">,</span>
      <span class="n">description</span>  <span class="o">=</span> <span class="s">&quot;yourext client library for python&quot;</span><span class="p">,</span>
      <span class="n">long_description</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;README.md&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">(),</span>
      <span class="n">license</span>      <span class="o">=</span> <span class="s">&quot;LGPL&quot;</span><span class="p">,</span>
      <span class="n">platforms</span>    <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Platform Independent&quot;</span><span class="p">],</span>
      <span class="n">classifiers</span>  <span class="o">=</span> <span class="p">[</span>
        <span class="s">&quot;Development Status :: 5 - Production/Stable&quot;</span><span class="p">,</span>
        <span class="s">&quot;Intended Audience :: Developers&quot;</span><span class="p">,</span>
        <span class="s">&quot;License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)&quot;</span><span class="p">,</span>
        <span class="s">&quot;Operating System :: OS Independent&quot;</span><span class="p">,</span>
        <span class="s">&quot;Programming Language :: Python&quot;</span><span class="p">,</span>
        <span class="s">&quot;Topic :: Software Development :: Libraries :: Python Modules&quot;</span>
      <span class="p">],</span>
      <span class="n">ext_modules</span>  <span class="o">=</span> <span class="p">[</span>
        <span class="n">Extension</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;yourext&#39;</span><span class="p">,</span>
                  <span class="n">sources</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;path_to_swig/yourext.i&#39;</span><span class="p">],</span>
                  <span class="n">include_dirs</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;path_to_lib/include&#39;</span><span class="p">],</span>
                  <span class="n">library_dirs</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;path_to_lib/lib&#39;</span><span class="p">],</span>
                  <span class="n">libraries</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;yourlibrary&#39;</span><span class="p">],</span>
                  <span class="n">define_macros</span><span class="o">=</span><span class="p">[(</span><span class="n">FOO_BAR</span><span class="p">,</span> <span class="mi">123</span><span class="p">),</span> <span class="p">(</span><span class="n">DEBUG</span><span class="p">,</span> <span class="bp">None</span><span class="p">)],</span>
                  <span class="n">extra_compile_args</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;-std=gnu99&#39;</span><span class="p">,</span> <span class="s">&#39;-Wextra&#39;</span><span class="p">],</span>
                  <span class="p">)</span>
      <span class="p">],</span>
      <span class="n">py_modules</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;pure_python_module_name&#39;</span><span class="p">,</span> <span class="s">&#39;foo.bar&#39;</span><span class="p">],</span>
      <span class="n">include_dirs</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;&#39;</span><span class="p">],</span>
<span class="p">)</span>
</pre></div>

<ul>
<li>ext_modulesの中にExtensionをかく
<ul></li>
<li>Extension.sources にはswigの定義ファイルを直接指定できる</li>
<li>Extension.include_dirs, Extension.library_dirs, Extension.librariesはそれぞれgccでいう<code>-I, -L, -l</code>の値</li>
<li>Extension.define_macrosはタプルで渡す。上の例だと <code>-DFOO_BAR=123 -DDEBUG</code> の意味</li>
<li>Extension.extra_compile_args はその他のコンパイルオプション
</ul></li>
<li>platforms, classifiersの内容はpython-cjsonあたりからコピーした</li>
<li>pure pythonの部分はpy_modulesにモジュール名を列挙する。パスではない</li>
<li>swigが生成した<code>.py</code>ファイルをpy_modulesに含める汎用的な方法は見つからなかった。(必要な場合はスクリプトでinclude_dirsにコピーすることで対応できる)</li>
</ul>
<h3 id="3">3. ビルド確認</h3>
<p>以下コマンドでpython extのビルドを確認する。成功すると、buildディレクトリ以下に共有ライブラリが生成される</p>
<p><code>python setup.py build</code></p>
<h3 id="4-debianize">4. debianizeする</h3>
<p>以下コマンドでdebianパッケージに必要なファイルを生成する。このときegg-info等も生成される</p>
<p><code>python setup.py --command-package=stdeb.command debianize --force-buildsystem=True</code></p>
<h3 id="5-deb">5. debをつくる</h3>
<p><code>debuild -uc -us</code></p>
<p><code>-uc -us</code>は署名を省略するためのオプション。</p>
<p>成功すると、親ディレクトリにdebファイルができてるはず</p>
<h3 id="_2">その他ツール等</h3>
<ul>
<li>dupload: リポジトリにアップロードするためのもの</li>
<li>dlocate: <code>dlocate -S filename</code> のようにすればそのファイルを含むパッケージを調べることができる</li>
<li>cdbs: debianパッケージを作成するための別なやりかた(?)。 ちゃんとしらべてない</li>
</ul>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[The P Convention]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2013/02/24/the-p-convention/" />
    <id>http://mojavy.com/blog/2013/02/24/the-p-convention/</id>
    <updated>2013-02-24T14:42:00Z</updated>
    <published>2013-02-24T14:42:00Z</published>
    <category scheme="http://mojavy.com/blog" term="lisp" />
    <category scheme="http://mojavy.com/blog" term="programming" />
    <summary type="html"><![CDATA[The P Convention]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2013/02/24/the-p-convention/"><![CDATA[<p><img alt="lisp" src="/images/lisplogo_fancy_128.png" /></p>
<p>Lispには'p'という接尾辞がつく名前の関数があるが、この'p'はpredicateのこと。</p>
<p><a href="http://catb.org/jargon/html/p-convention.html">The -P Convention</a></p>
<p>ところが、HaskellやOCamlにも'p'という接尾辞がつく関数があって、そちらはprimeの意味で使うらしい。
シングルクオート(ダッシュ)記号は英語だとprimeというので、例えば<code>foo'</code>という名前の関数は<code>foo</code>という名前のヘルパー関数的なもの、ということになる。</p>
<p><a href="http://stackoverflow.com/questions/5279286/foop-a-naming-convention-its-a-helper-recursive-function-for-foo-what-do">“foop”: a naming convention? It's a helper recursive function for “foo”; what does the suffix “p” mean?</a></p>
<p>ちなみに、OCamlだとシングルクオートが識別子につかえるのでfoo'という名前の関数も結構あるらしい。</p>
<p>まぎらわしい、かと思ったけど使う文脈が違うし意外とそうでもないか。</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[telnetでメールを送信する方法]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2013/02/23/telnet-smtp/" />
    <id>http://mojavy.com/blog/2013/02/23/telnet-smtp/</id>
    <updated>2013-02-23T18:17:17Z</updated>
    <published>2013-02-23T18:17:17Z</published>
    <category scheme="http://mojavy.com/blog" term="postfix" />
    <category scheme="http://mojavy.com/blog" term="tips" />
    <category scheme="http://mojavy.com/blog" term="smtp" />
    <summary type="html"><![CDATA[telnetでメールを送信する方法]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2013/02/23/telnet-smtp/"><![CDATA[<p><img alt="lisp" src="/images/mail-logo-100.png" /></p>
<p>何回やってもpostfixの設定の仕方を覚えられないので、今更ながら最低限のプロトコルを理解するためにtelnetからsmtpでメールを送信してみようと思い立ちました。</p>
<p>以下は自分のgmailアドレスにtelnetでメールしてみたときの個人的な手順メモです。</p>
<div class="toc">
<ul>
<li><a href="#_1">手順</a><ul>
<li><a href="#1-mx">1. 該当メールアドレスのMXレコードを調べる</a></li>
<li><a href="#2-telnet25smtp">2. telnetで25番ポートに接続してsmtpを話す</a></li>
<li><a href="#3">3. メールの確認</a></li>
</ul>
</li>
<li><a href="#postfix">postfixの設定メモ</a></li>
</ul>
</div>
<h2 id="_1">手順</h2>
<h3 id="1-mx">1. 該当メールアドレスのMXレコードを調べる</h3>
<p>普通のメールアドレスの@以下はドメイン名になっている場合がほとんどですが、DNSのAレコードに登録されているのはホスト名なのでメールサービスを提供しているホスト名を調べる必要があります。そのときに使うのがMXレコードで、nslookupでも以下のようにして調べることができます。</p>
<div class="pygments_murphy"><pre>% nslookup -type=mx gmail.com
Server:         192.168.1.1
Address:        192.168.1.1#53

Non-authoritative answer:
gmail.com       mail exchanger = 5 gmail-smtp-in.l.google.com.
gmail.com       mail exchanger = 10 alt1.gmail-smtp-in.l.google.com.
gmail.com       mail exchanger = 20 alt2.gmail-smtp-in.l.google.com.
gmail.com       mail exchanger = 30 alt3.gmail-smtp-in.l.google.com.
gmail.com       mail exchanger = 40 alt4.gmail-smtp-in.l.google.com.

Authoritative answers can be found from:
</pre></div>

<p>複数のホストが優先度をつけて登録されているので、この場合は <em>gmail-smtp-in.l.google.com</em> を使えばいいということになるみたいです。</p>
<h3 id="2-telnet25smtp">2. telnetで25番ポートに接続してsmtpを話す</h3>
<p>smtpはテキストベースのプロトコルなのでtelnetからそのままサーバとやりとりできます。
smtpプロトコルの詳細は省略しますが、最低限必要なコマンドは以下の5つだけ。</p>
<ul>
<li>HELO - 通信開始</li>
<li>MAIL FROM - 送信元メールアドレス。ドメインのIPと送信元のIPが一致している必要がある。dynamic DNSのドメイン名でも大丈夫。ユーザ名部分は実際に存在しなくてもよい(その場合は返信を受けとれない)</li>
<li>RCPT TO - 送信先メールアドレス</li>
<li>DATA - メール本体の開始。'.'(ピリオド)だけの行で本文終了。本文のFromとToはなんでもよい。普通のメーラのfromやtoで表示されるのはここの情報</li>
<li>QUIT - 通信終了</li>
</ul>
<div class="pygments_murphy"><pre>% telnet gmail-smtp-in.l.google.com 25
Trying 173.194.79.26...
Connected to gmail-smtp-in.l.google.com.
Escape character is &#39;^]&#39;.
220 mx.google.com ESMTP k8si26817952pax.291 - gsmtp
HELO
250 mx.google.com at your service
MAIL FROM:&lt;username@yourhostname&gt;
250 2.1.0 OK k8si26817952pax.291 - gsmtp
RCPT TO:&lt;username@gmail.com&gt;
250 2.1.5 OK k8si26817952pax.291 - gsmtp
DATA
354  Go ahead k8si26817952pax.291 - gsmtp
Subject: xxx
From: yyy
To: zzz

.
250 2.0.0 OK 1361347877 k8si26817952pax.291 - gsmtp
QUIT
221 2.0.0 closing connection k8si26817952pax.291 - gsmtp
Connection closed by foreign host.
</pre></div>

<h3 id="3">3. メールの確認</h3>
<p>gmail上でメールがきているか確認します。DATA部分を適当に書くとスパム判定されてしまいますが一応届くはず。</p>
<h2 id="postfix">postfixの設定メモ</h2>
<p>上記は直接gmailのsmtpサーバで送信しましたが、mailコマンドからローカルのpostfix経由で送るにはpostfixを適切に設定する必要があります。</p>
<p>MAIL FROMで使われるのはmyoriginの値になるようなので、送信だけでよいのであればmyoriginのIPが送信元のグローバルIPに一致するように設定しさえすればよいということですかね。</p>
<p>ちなみに、debianのaptからpostfixを「ローカルのみ」の設定でインストールしてしまうと、デフォルトのmain.cfにリレーしない設定になっているので、main.cfを以下のようにコメントアウト。</p>
<div class="pygments_murphy"><pre># default_transport = error
# relay_transport = error
</pre></div>

<p>あと、sakura vpsのお試し期間中はメール送信できない仕様なので、sakura vpsで試す際は注意。</p>
<p><a href="http://vps.sakura.ad.jp/terms.html">http://vps.sakura.ad.jp/terms.html</a></p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[Rainbow for Common Lisp 作りました]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2013/02/19/rainbow-for-common-lisp/" />
    <id>http://mojavy.com/blog/2013/02/19/rainbow-for-common-lisp/</id>
    <updated>2013-02-19T23:55:00Z</updated>
    <published>2013-02-19T23:55:00Z</published>
    <category scheme="http://mojavy.com/blog" term="ruby" />
    <category scheme="http://mojavy.com/blog" term="common lisp" />
    <summary type="html"><![CDATA[Rainbow for Common Lisp 作りました]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2013/02/19/rainbow-for-common-lisp/"><![CDATA[<p><img alt="lisp" src="/images/cl-rainbow-demo.png" /></p>
<p><a href="http://mojavy.com/blog/2013/02/18/ltsv-for-common-lisp/">昨日</a>のテンプレを流用して今日はcl-rainbowという地味なライブラリの宣伝をします。</p>
<p><a href="https://github.com/taksatou/cl-rainbow">https://github.com/taksatou/cl-rainbow</a></p>
<p>cl-rainbowとは、<a href="https://github.com/sickill/rainbow">rubygemにあるrainbow</a>をCommon Lispに移植したものです。
これを使うとターミナルの出力を簡単に色付けできます。</p>
<h3 id="_1">インストール</h3>
<p>現在(2013-02-19) quicklisp登録申請中です。登録されれば以下でインストールできます。</p>
<div class="pygments_murphy"><pre>(ql:quickload &#39;cl-rainbow)
</pre></div>

<h3 id="_2">使い方</h3>
<p>以下のように使います。</p>
<div class="pygments_murphy"><pre>(setf cl-rainbow:*enabled* t)
(print (cl-rainbow:color :red &quot;red string&quot;))
(print (cl-rainbow:color #x5599ff &quot;rgb color code&quot;))
(loop for c across &quot;RAINBOW&quot; do (format t &quot;~A&quot; (cl-rainbow:color (random #xffffff) c)))
</pre></div>

<p>特に解説は不要だと思いますが、端末はカラー表示に対応している必要があります。</p>
<p>RGBのカラーコード指定すると、256色にダウンサンプルして一番近い色を表示します。</p>
<p>その他、例にはのせてませんが、端末が対応していれば斜体や太字にもできます。詳細はソースを見てください。</p>
<h3 id="_3">まとめ</h3>
<p>ログ出力のときとかにちょっと便利なときがあるかもしれません。</p>
<p>リードマクロで文字列リテラルをごにょごにょして色付けできるようにするともうちょっと便利になるような気がするので、そのうちチャレンジしてみたいと思います。</p>
<p>フィードバック等ありましたらコメント頂けるとうれしいです。</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[LTSV for Common Lisp 作りました]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2013/02/18/ltsv-for-common-lisp/" />
    <id>http://mojavy.com/blog/2013/02/18/ltsv-for-common-lisp/</id>
    <updated>2013-02-18T20:30:00Z</updated>
    <published>2013-02-18T20:30:00Z</published>
    <category scheme="http://mojavy.com/blog" term="ltsv" />
    <category scheme="http://mojavy.com/blog" term="common lisp" />
    <summary type="html"><![CDATA[LTSV for Common Lisp 作りました]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2013/02/18/ltsv-for-common-lisp/"><![CDATA[<p><img alt="lisp" src="/images/lisp-alien-logo.png" /></p>
<p>ブームは過ぎ去ってしまいましたが、意外とまだなかったのでCommon LispのLTSVパーサつくりました。</p>
<p><a href="https://github.com/taksatou/cl-ltsv">https://github.com/taksatou/cl-ltsv</a></p>
<p><a href="http://ltsv.org/">http://ltsv.org/</a></p>
<h3 id="_1">インストール</h3>
<p>現在(2013-02-18) quicklisp登録申請中です。登録されれば以下でインストールできます。</p>
<div class="pygments_murphy"><pre>(ql:quickload &#39;cl-ltsv)
</pre></div>

<h3 id="_2">使い方</h3>
<p>以下のように使います。</p>
<div class="pygments_murphy"><pre>CL-USER&gt; (cl-ltsv:parse-line &quot;host:127.0.0.1    ident:- user:frank&quot;)
((&quot;host&quot; . &quot;127.0.0.1&quot;) (&quot;ident&quot; . &quot;-&quot;) (&quot;user&quot; . &quot;frank&quot;))

CL-USER&gt; (with-input-from-string (ss &quot;host:127.0.0.1    ident:- user:frank
host:127.0.0.1  ident:- user:jane
host:127.0.0.1  ident:- user:john&quot;)
           (cl-ltsv:with-ltsv-from-stream (entry ss)
             (print entry)))

((&quot;host&quot; . &quot;127.0.0.1&quot;) (&quot;ident&quot; . &quot;-&quot;) (&quot;user&quot; . &quot;frank&quot;)) 
((&quot;host&quot; . &quot;127.0.0.1&quot;) (&quot;ident&quot; . &quot;-&quot;) (&quot;user&quot; . &quot;jane&quot;)) 
((&quot;host&quot; . &quot;127.0.0.1&quot;) (&quot;ident&quot; . &quot;-&quot;) (&quot;user&quot; . &quot;john&quot;)) 
NIL

CL-USER&gt; (cl-ltsv:alist-ltsv &#39;((&quot;host&quot; . &quot;127.0.0.1&quot;) (&quot;ident&quot; . &quot;-&quot;) (&quot;user&quot; . &quot;frank&quot;)))
&quot;host:127.0.0.1 ident:- user:frank&quot;
</pre></div>

<ul>
<li>cl-ltsv:parse-lineするとalistを返します</li>
<li>cl-ltsv:with-ltsv-from-stream を使えば1行ずつパースしてループします</li>
<li>cl-ltsv:alist-ltsv でalistからltsv形式の文字列に変換できます</li>
</ul>
<h3 id="_3">まとめ</h3>
<p>ライブラリにするほどでもなかった気はしますが、Common Lispには文字列のsplitが標準でついてなくてちょっと面倒に感じることもあったのでないよりはましかな、ということで作りました。</p>
<p>フィードバック等ありましたらコメント頂けるとうれしいです。</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[common lispのdefconstantについての注意点]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2013/02/09/sbcl-defconstant/" />
    <id>http://mojavy.com/blog/2013/02/09/sbcl-defconstant/</id>
    <updated>2013-02-09T17:15:00Z</updated>
    <published>2013-02-09T17:15:00Z</published>
    <category scheme="http://mojavy.com/blog" term="common lisp" />
    <summary type="html"><![CDATA[common lispのdefconstantについての注意点]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2013/02/09/sbcl-defconstant/"><![CDATA[<p><img alt="lisp" src="/images/lisp-warinig-150.png" /></p>
<p>sbclでdefconstantすると以下のようなエラーがおきたりおきなかったりして不思議に思っていた。</p>
<div class="pygments_murphy"><pre>The constant CL-GEARMAN::+REQUEST-MAGIC+ is being redefined
(from #(0 82 69 81) to #(0 82 69 81))
   [Condition of type DEFCONSTANT-UNEQL]
See also:
  Common Lisp Hyperspec, DEFCONSTANT [:macro]
  SBCL Manual, Idiosyncrasies [:node]

Restarts:
 0: [CONTINUE] Go ahead and change the value.
 1: [ABORT] Keep the old value.
 2: [TRY-RECOMPILING] Recompile protocol and try loading it again
 3: [RETRY] Retry loading FASL for #&lt;CL-SOURCE-FILE &quot;cl-gearman&quot; &quot;src&quot; &quot;protocol&quot;&gt;.
 4: [ACCEPT] Continue, treating loading FASL for #&lt;CL-SOURCE-FILE &quot;cl-gearman&quot; &quot;src&quot; &quot;protocol&quot;&gt; as having been successful.
 5: [ABORT] Give up on &quot;cl-gearman&quot;
 --more--

Backtrace:
  0: (SB-C::%DEFCONSTANT ..)
  1: (SB-FASL::LOAD-FASL-GROUP ..)
  2: ((FLET SB-THREAD::WITH-RECURSIVE-LOCK-THUNK :IN SB-FASL::LOAD-AS-FASL))
  3: ((FLET #:WITHOUT-INTERRUPTS-BODY-88874 :IN SB-THREAD::CALL-WITH-RECURSIVE-LOCK))
  4: (SB-THREAD::CALL-WITH-RECURSIVE-LOCK ..)
  5: (SB-FASL::LOAD-AS-FASL ..)
  6: ((FLET SB-FASL::LOAD-STREAM :IN LOAD) ..)
  7: (LOAD ..)
  8: (SB-IMPL::%MAP-FOR-EFFECT-ARITY-1 ..)
</pre></div>

<p>先日公開したcl-gearmanでこれが発生していてしまい原因がわからずそのまま放置していたのだけど、以下のforumを発見した。</p>
<p><a href="http://www.lispforum.com/viewtopic.php?f=33&amp;t=4088">http://www.lispforum.com/viewtopic.php?f=33&amp;t=4088</a></p>
<blockquote>
<p>It's not a bug (in SBCL). The value in a DEFCONSTANT form is restricted
to being something that's EQL to itself each time it's evaluated (that's
horrible phrasing, I know), so using a vector is illegal (that is, you
can use a vector, but you have to make sure you return the same vector
each time -- so you can't use VECTOR or #(...) for the value).</p>
</blockquote>
<p>DEFCONSTANTフォームの値はそれが何度評価されてもEQLになるようなものでなければならないらしい。
なので、vectorをDEFCONSTANTでバインドすることは可能だけど、DEFCONSTANTフォームの値の場所にVECTOR や #(...)で記述したフォームを書くことはできない。</p>
<p>CLtL2にもちゃんと書いてあった。</p>
<blockquote>
<p>defconstantはdefparameterに似ているが、名前の値が固定されていることを前提としており、コンパイラは、コンパイルされるプログラムでの値について仮定を置くことが許されている。 (...中略...) コンパイラは置き換えたオブジェクトのコピーが定数の実際の値とeqlになるように注意しなければならない。たとえば、コンパイラは数のコピーは自由に作ってもよいが、値がリストであるときは十分に注意しなければならない。</p>
</blockquote>
<p>なるほど。</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[Quicklinks 4]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2013/02/06/quicklinks4/" />
    <id>http://mojavy.com/blog/2013/02/06/quicklinks4/</id>
    <updated>2013-02-06T21:50:00Z</updated>
    <published>2013-02-06T21:50:00Z</published>
    <category scheme="http://mojavy.com/blog" term="quicklinks" />
    <summary type="html"><![CDATA[Quicklinks 4]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2013/02/06/quicklinks4/"><![CDATA[<p><a href="http://mojavy.com/blog/2012/11/14/quicklinks3/">前回</a> から2ヵ月くらいあいてしまいました。古いブックマークはブックマークしたこと自体を忘れてしまうのでもうちょいまめにまとめたいです。</p>
<h4 id="q-gears"><a href="http://q-gears.sourceforge.net/index.phtml?content=1">Q-Gears</a></h4>
<p>FF7のゲームエンジンのクローンを目指したものだそうです。
LinuxやWindowsで動くようにクロスプラットフォームな設計になっていて、将来的にはsquareの他のゲームも動かすためのフレームワークとしても提供することも考えているようです。</p>
<ul>
<li><a href="http://q-gears.sourceforge.net/gears.pdf">http://q-gears.sourceforge.net/gears.pdf</a></li>
</ul>
<p>この資料にはシステムの概要が書かれてます。リバースエンジニアリングして集めた情報と思われますが、読み物としてもおもしろそうです。</p>
<h4 id="riemann"><a href="http://riemann.io/">Riemann</a></h4>
<p>Clojureで書かれたnetwork event stream processing systemとのこと。</p>
<p><a href="http://riemann.io/concepts.html">ここ</a>のイラストと説明を見れば大体イメージはわくと思います。
コンセプト的にはfluentdに近い気がしますが、集める対象がログではなくイベントそれ自体なので守備範囲はちょっと違うようです。
Riemann自体が落ちたときにどうなるか、とか実際に運用するとなると色々気になるところはありそうですが試してみる価値はありそうです。</p>
<p>設定をClojureで書けるというのもとがってていいと思います。</p>
<h4 id="whistlepig"><a href="https://github.com/wmorgan/whistlepig">whistlepig</a></h4>
<p>Cで書かれた軽量なリアルタイム全文検索のためのライブラリです。
複数プロセスでも同時にインデックスを読み書きできるようで、なかなか便利そうです。今度詳細を調べてみようと思います。</p>
<h4 id="montezuma"><a href="http://code.google.com/p/montezuma/">Montezuma</a></h4>
<p>こっちはFerretをCommon Lispに移植したもの。ちなみにFerretはLuceneをRubyに移植したものです。
これはこれで便利だと思います。</p>
<h4 id="openrtb"><a href="http://code.google.com/p/openrtb/">OpenRTB</a></h4>
<p>広告業界ではread-time biddingが最近のトレンドのようなので、関係者はこれを読んで理解を深めましょう。</p>
<h4 id="ios-security-internals"><a href="http://365.rsaconference.com/servlet/JiveServlet/previewBody/3488-102-1-4589/MBS-402.pdf">iOS Security Internals</a></h4>
<p>jailbreakやったりする人がつくった資料のようです。
これもなかなか興味深いです。</p>
<h4 id="unreal4"><a href="http://www.unrealengine.com/unreal_engine_4/">UNREAL4</a></h4>
<p>Unity3でも十分すごいと思いましたが、最近のゲームエンジンはどれもすごいですね。</p>
<ul>
<li>http://www.wmtdesigners.com/wordpress/game-2012-06-19</li>
</ul>
<h4 id="leap-motion"><a href="https://www.leapmotion.com/">Leap Motion</a></h4>
<p>xboxのkinect的なものですが、それよりはるかに上回る精度らしいです。プレオーダーしたので届いたら色々遊んでみます。</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://mojavy.com/blog</uri>
    </author>
    <title type="html"><![CDATA[人気プログラミング言語ランキング(stackoverflow調べ)]]></title>
    <link rel="alternate" type="text/html" href="http://mojavy.com/blog/2013/02/05/popular-programming-languages/" />
    <id>http://mojavy.com/blog/2013/02/05/popular-programming-languages/</id>
    <updated>2013-02-05T23:00:00Z</updated>
    <published>2013-02-05T23:00:00Z</published>
    <category scheme="http://mojavy.com/blog" term="programming" />
    <summary type="html"><![CDATA[人気プログラミング言語ランキング(stackoverflow調べ)]]></summary>
    <content type="html" xml:base="http://mojavy.com/blog/2013/02/05/popular-programming-languages/"><![CDATA[<p><img alt="stack" src="/images/stackoverflow-200.png" /></p>
<p>なんとなく気になったのでstackoverflowのでの人気プログラミング言語ランキングをつくってみました。(2013-02-05現在)</p>
<div class="pygments_murphy"><pre>1.   c#              411382pt
2.   java            361120pt
3.   php             337941pt
4.   javascript      321791pt
5.   c++             175790pt
6.   python          160796pt
7.   html            145373pt
8.   objective-c     119891pt
9.   sql             115147pt
10.  css             113039pt
11.  c               83501pt
12.  ruby            64350pt
13.  xml             56444pt
14.  regex           51670pt
15.  vb.net          41260pt
16.  html5           27217pt
17.  linq            26200pt
18.  actionscript-3  24286pt
19.  perl            24092pt
20.  r               23256pt
21.  delphi          18866pt
22.  tsql            18119pt
23.  matlab          15289pt
24.  xaml            14115pt
25.  scala           13444pt
26.  vba             12300pt
27.  css3            11564pt
28.  xslt            11032pt
29.  haskell         9827pt
30.  assembly        7580pt
31.  razor           7385pt
32.  actionscript    6440pt
33.  excel-vba       6309pt
34.  groovy          5551pt
35.  vbscript        4926pt
36.  c++11           4894pt
37.  vb6             4886pt
38.  xhtml           4675pt
39.  plsql           4548pt
40.  svg             4540pt
41.  f#              4341pt
42.  python-3.x      4229pt
43.  awk             3481pt
44.  wsdl            3249pt
45.  lua             3183pt
46.  erlang          3077pt
47.  coffeescript    2754pt
48.  c#-3.0          2615pt
49.  latex           2570pt
50.  lisp            2395pt
51.  mathematica     2395pt
52.  prolog          2317pt
53.  scheme          2199pt
54.  uml             2093pt
55.  applescript     2092pt

-- 次点

go         1648pt
ocaml      1329pt
d          877pt
</pre></div>

<h3 id="_1">補足</h3>
<ul>
<li>stackoverflow APIを利用して調べました。stackoverflow公式のものではありません。</li>
<li>ランキングは質問につけられたタグの件数順です。</li>
<li>プログラミング言語のタグは、tag infoのエントリに/language/i がマッチするかどうかで抽出し、明らかにプログラミング言語じゃないものは手動で適当に除外しました。</li>
<li>マークアップ言語とかバージョン違いで複数ある言語とか微妙なのはそのまま残しました。</li>
<li>次点以下の言語は、apiをしばらくクロールしてもでてこなかった言語のうち思いついたものを手動でしらべました。</li>
</ul>
<h3 id="_2">所感</h3>
<p>C#が1位なのはちょっと意外でしたがそれ以外は大体イメージ通りでした。
質問が多い順でもあるので、下位にある言語は質問が少なくて逆にイケてると言えなくもないですね。</p>
<p>D言語すばらしい。</p>
<p>ともあれ、stackoverflowのAPIは結構充実してるので色々遊べそうです。</p>
<ul>
<li><a href="http://api.stackoverflow.com/1.0/usage">http://api.stackoverflow.com/1.0/usage</a></li>
</ul>]]></content>
  </entry>
</feed>
