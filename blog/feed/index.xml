<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>mojavy.com</title>
    <link>http://mojavy.com/blog</link>
    <description></description>
    <pubDate>Wed, 12 Jun 2013 08:36:07 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>暗号利用モードについて</title>
      <link>http://mojavy.com/blog/2013/06/12/block-cipher-modes-of-operation/</link>
      <pubDate>Wed, 12 Jun 2013 08:36:07 JST</pubDate>
      <category><![CDATA[security]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/06/12/block-cipher-modes-of-operation/</guid>
      <description>暗号利用モードについて</description>
      <content:encoded><![CDATA[<p>AESを使おうと思ったけどどの暗号利用モードをつかえばいいかわからなかったので調べたことをまとめておきます。</p>
<h2 id="_1">暗号利用モードとは</h2>
<p><a href="http://ja.wikipedia.org/wiki/%E6%9A%97%E5%8F%B7%E5%88%A9%E7%94%A8%E3%83%A2%E3%83%BC%E3%83%89">Wikipedia/暗号利用モード</a></p>
<blockquote>
<p>暗号利用モード（あんごうりようモード、Block cipher modes of operation）とは、ブロック暗号を利用して、ブロック長よりも長いメッセージを暗号化するメカニズムのことである。
<br>
ECBモード（単純なブロック暗号の利用法）では、ある鍵で同一の平文を暗号化すると、同一の暗号文になる。したがって、長いメッセージ（画像データなど）のある部分が他の部分と同じであるかどうかが、暗号文の比較によって判断できてしまうので、他のモードが必要となった。
<br>
暗号利用モードには、秘匿用の利用モードと、認証用の利用モードとがある。
<br>
<br></p>
</blockquote>
<h2 id="_2">秘匿用利用モード</h2>
<p><a href="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation">Wikipediaの図</a> も参考にするとわかりやすい。
以下は概要だけ。</p>
<h3 id="ecb">ECB</h3>
<p>各ブロックを単純に一つずつ処理するだけ。暗号が一致したブロックは復号した平文も一致する。
1つ以上のブロックを単一のパスワードで暗号化するのであれば使うべきではない。</p>
<h3 id="cbc">CBC</h3>
<p>直前の暗号テキストブロックを次の平文テキストブロックにXORしてからブロック暗号処理することを繰り返す。
最初のブロックはIV(<a href="https://en.wikipedia.org/wiki/Initialization_vector">Initialization Vector</a>)をつかって暗号化する。</p>
<p>暗号化は前から順番にする必要があるが、複合は1つ前のブロック前が分かればできるので並列化が可能。</p>
<h3 id="cfb">CFB</h3>
<p>CBCと似ているが、直前の暗号テキストブロックを再度ブロック暗号処理したものに次の平文テキストブロックをXORしたものを暗号テキストとする。
最初のブロックはIVだけブロック暗号処理してXORする。
CBCとはXORのタイミングが違うだけ。</p>
<p>特徴もCBCと同じで、暗号化処理は並列化できないが複合は可能。</p>
<h3 id="ofb">OFB</h3>
<p>IVを繰り返しブロック暗号処理したものにそれぞれ平文ブロックをXORしていったものを暗号テキストとする。
すべての操作で直前のものが必要となるので暗号化・復号の両方とも並列化はできないが、IVのブロック暗号処理は事前に計算することができる。</p>
<h3 id="ctr-icm-sic">CTR (ICM, SIC)</h3>
<p>OFBに似ているが、IVではなくカウンターの値をインクリメントしつつブロック暗号処理したものに平文ブロックをXORする。
カウンターは十分に長い間繰り返しが発生しない一意な値を出力する任意の関数であれば何でもよいが、単に1ずつ増やすカウンターを使うことが多い。</p>
<p>暗号・復号いずれも並列化が可能だが、入力に決定的な値を使うことについては議論の余地がある。</p>
<h3 id="_3">ディスク用のもの</h3>
<p>ディスクを暗号化するには特別な考慮が必要になるため専用のものがいくつか存在する。</p>
<ul>
<li>LRW</li>
<li>XEX</li>
<li>XTS</li>
<li>CMC</li>
</ul>
<h4 id="_4">参考</h4>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Disk_encryption_theory">http://en.wikipedia.org/wiki/Disk_encryption_theory</a></li>
<li><a href="http://csrc.nist.gov/publications/nistpubs/800-38E/nist-sp-800-38E.pdf">http://csrc.nist.gov/publications/nistpubs/800-38E/nist-sp-800-38E.pdf</a></li>
<li><a href="http://axelkenzo.ru/downloads/1619-2007-NIST-Submission.pdf">http://axelkenzo.ru/downloads/1619-2007-NIST-Submission.pdf</a></li>
</ul>
<h2 id="_5">認証用の利用モード</h2>
<p>秘匿化とあわせて認証とデータの完全性を保証するためのモード。
通常はMAC(Massage Authentication Code, authentication tag)を組みあわせることで実現する。</p>
<ul>
<li><a href="http://en.wikipedia.org/wiki/CCM_mode">CCM</a></li>
<li><a href="http://en.wikipedia.org/wiki/CWC_mode">CWC</a></li>
<li><a href="http://en.wikipedia.org/wiki/OCB_mode">OCB</a></li>
<li><a href="http://en.wikipedia.org/wiki/EAX_mode">EAX</a></li>
<li><a href="http://en.wikipedia.org/wiki/Galois/Counter_Mode">GCM</a></li>
</ul>
<h2 id="_6">その他</h2>
<ul>
<li>上記では触れなかったが、並列化できるかどうかの他にもエラー検出が可能かどうかや組み合わせて使用するブロック暗号化方式の特徴なども考慮して選択する必要がある</li>
<li>特許になっているものも多いので使用する際は要確認</li>
<li>mysqlのaes_encrypt()ではECBをつかっているのでセキュリティ強度的にはあまりよろしくない</li>
</ul>
<h2 id="_7">参考</h2>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation">http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation</a></li>
<li><a href="http://en.wikipedia.org/wiki/Authenticated_encryption">http://en.wikipedia.org/wiki/Authenticated_encryption</a></li>
<li><a href="http://en.wikipedia.org/wiki/Message_authentication_code">http://en.wikipedia.org/wiki/Message_authentication_code</a></li>
<li><a href="http://en.wikipedia.org/wiki/OCB_mode">http://en.wikipedia.org/wiki/OCB_mode</a></li>
<li><a href="http://www.heliontech.com/aes_modes_basic.htm">http://www.heliontech.com/aes_modes_basic.htm</a></li>
<li><a href="http://www.triplefalcon.com/Lexicon/Encryption-Block-Mode-1.htm">http://www.triplefalcon.com/Lexicon/Encryption-Block-Mode-1.htm</a></li>
<li><a href="http://www.schneier.com/blog/archives/2009/07/another_new_aes.html">http://www.schneier.com/blog/archives/2009/07/another_new_aes.html</a></li>
<li><a href="http://stackoverflow.com/questions/1220751/how-to-choose-an-aes-encryption-mode-cbc-ecb-ctr-ocb-cfb">http://stackoverflow.com/questions/1220751/how-to-choose-an-aes-encryption-mode-cbc-ecb-ctr-ocb-cfb</a></li>
<li><a href="http://stackoverflow.com/questions/2797692/whats-the-best-way-to-store-sensitive-data-in-mysql">http://stackoverflow.com/questions/2797692/whats-the-best-way-to-store-sensitive-data-in-mysql</a></li>
<li><a href="http://www.cs.ucdavis.edu/~rogaway/ocb/license.htm">http://www.cs.ucdavis.edu/~rogaway/ocb/license.htm</a></li>
</ul>]]></content:encoded>
    </item>
    <item>
      <title>Mach-Oバイナリのライブラリロードパスをカスタマイズする方法</title>
      <link>http://mojavy.com/blog/2013/05/17/mach-o-rpath/</link>
      <pubDate>Fri, 17 May 2013 19:46:31 JST</pubDate>
      <category><![CDATA[osx]]></category>
      <category><![CDATA[unix]]></category>
      <category><![CDATA[elf]]></category>
      <category><![CDATA[mach-o]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/05/17/mach-o-rpath/</guid>
      <description>Mach-Oバイナリのライブラリロードパスをカスタマイズする方法</description>
      <content:encoded><![CDATA[<p><img alt="matrix" src="/images/matrix3.png" /></p>
<p>ライブラリの単体テストをするときとかに、実行プログラムがロードする共有ライブラリのパスを任意のディレクトリで上書きしたいときがある。</p>
<p>例えば以下のようなディレクトリ構成で、<code>project/t/mytest</code>というバイナリをビルドするときに<code>project/src/libmy.so</code>をリンクするようにしておけば作業しやすい。</p>
<div class="pygments_murphy"><pre>└── project
    ├── src
    │   ├── libmy.a
    │   ├── libmy.so -&gt; libmy.so.1
    │   ├── libmy.so.1
    │   ├── Makefile
    │   ├── mylib.c
    │   ├── mylib.h
    │   └── mylib.o
    └── t
        ├── Makefile
        ├── mytest
        ├── mytest.c
        └── mytest.o
</pre></div>

<p>こういうときは、<code>mytest</code>をビルドするときに以下のようにしてrpathを相対パスで追加していた。</p>
<div class="pygments_murphy"><pre>$ cc -I../src -L../src -Wl,-rpath=../src *.c -lmy -o mytest
$ readelf -d mytest
Dynamic section at offset 0xe30 contains 22 entries:
  Tag        Type                         Name/Value
 0x0000000000000001 (NEEDED)             Shared library: [libmy.so.1]
 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]
 0x000000000000000f (RPATH)              Library rpath: [../src]
 0x000000000000000c (INIT)               0x4004c8
 0x000000000000000d (FINI)               0x4006f8
 0x000000006ffffef5 (GNU_HASH)           0x400298
 0x0000000000000005 (STRTAB)             0x4003c0
 0x0000000000000006 (SYMTAB)             0x4002d0
 0x000000000000000a (STRSZ)              134 (bytes)
 0x000000000000000b (SYMENT)             24 (bytes)
 0x0000000000000015 (DEBUG)              0x0
 0x0000000000000003 (PLTGOT)             0x600fe8
 0x0000000000000002 (PLTRELSZ)           48 (bytes)
 0x0000000000000014 (PLTREL)             RELA
 0x0000000000000017 (JMPREL)             0x400498
 0x0000000000000007 (RELA)               0x400480
 0x0000000000000008 (RELASZ)             24 (bytes)
 0x0000000000000009 (RELAENT)            24 (bytes)
 0x000000006ffffffe (VERNEED)            0x400460
 0x000000006fffffff (VERNEEDNUM)         1
 0x000000006ffffff0 (VERSYM)             0x400446
 0x0000000000000000 (NULL)               0x0
</pre></div>

<p>しかし、OSXの場合は上記のように単に実行バイナリ側にrpathを追加しただけだと、ローダがrpathを設定するコマンドより先にライブラリをロードするコマンドを実行しようとして該当ファイルがみつけられなくて以下のようなエラーになってしまう.</p>
<div class="pygments_murphy"><pre>dyld: Library not loaded: libmy.1.dylib
  Referenced from: /Users/path/to/project/t/./mytest
  Reason: image not found
zsh: trace trap  ./mytest
</pre></div>

<p><code>otool -l &lt;executable file&gt;</code>でロードコマンドの詳細をみると以下のようなエントリがみつかるが、ここのnameの値はライブラリ側の<code>install_path</code>が設定される。</p>
<div class="pygments_murphy"><pre>-- 中略
Load command 11
          cmd LC_LOAD_DYLIB
      cmdsize 40
         name libmy.1.dylib (offset 24)
   time stamp 2 Thu Jan  1 09:00:02 1970
      current version 1.0.0
compatibility version 0.0.0
</pre></div>

<p><code>install_path</code>は<code>soname</code>のかわりのようなもので、なにも指定しなければ出力ファイル名になる。
ここに<code>@executable_path</code>や<code>@rpath</code>をつかうことによって、このダイナミックライブラリをリンクする側のバイナリに応じて挙動をかえることができる。
これらの変数(?)の詳細は参考リンクに解説がある。</p>
<p>要は、ELFのrpathとおなじような挙動にしたければ、 <code>-Wl,-install_name,@rpath/libmy.1.dylib</code> というようなオプション付きでライブラリをビルドすればよい。</p>
<p>また、<code>-Wl,-install_name,@executable_path/../src/libmy.1.dylib</code>のようにすると実行ファイルからの相対パスにすることができる。</p>
<p>この情報はリンクされる側のライブラリに埋めこまれている点に注意。</p>
<p>ELFに比べると柔軟にロードパスを制御することができると思われるが、うまく活用するのはちょっと難しそう。</p>
<h4 id="_1">参考リンク</h4>
<ul>
<li><a href="https://wincent.com/wiki/@executable_path,_@load_path_and_@rpath">@executable_path, @load_path and @rpath </a> </li>
<li><a href="https://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/DynamicLibraryDesignGuidelines.html">DynamicLibraryDesignGuidelines</a> </li>
</ul>]]></content:encoded>
    </item>
    <item>
      <title>ワイヤレスなRaspberry Pi環境をつくる</title>
      <link>http://mojavy.com/blog/2013/04/28/wireless-raspberry-pi/</link>
      <pubDate>Sun, 28 Apr 2013 01:54:53 JST</pubDate>
      <category><![CDATA[raspberry pi]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/04/28/wireless-raspberry-pi/</guid>
      <description>ワイヤレスなRaspberry Pi環境をつくる</description>
      <content:encoded><![CDATA[<p><img alt="raspberry" src="/images/raspberry-pi-150.png" /></p>
<p>Raspberry Pi遊ぶからにはその小ささを生かしたことがしたいですよね。
というわけで手始めにワイヤレス化しました。手順は非常に簡単で、ほぼAmazonで買ったパーツを差すだけで達成できました。</p>
<p>Raspberry Piを標準的な構成でうごかすとLANケーブル、電源、 キーボード、ディスプレイの4本コードがのびることになりますが、sshで接続できればディスプレイもキーボードも不要なのであと必要なのはネットワーク環境と電源だけです。</p>
<p>電源は 5V 700mA なので、普通のスマートフォン用バッテリーがそのまま使えます。
5V 700mAを越えていれば何でもいいと思いますが、今回は以下をつかいました。</p>
<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=armyofpigs-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B0067TQQI8" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

<p><br></p>
<p>ネットワークはUSBの無線LAN受信機を使います。
これも何でもいいと思いますが、あまり最新のモデルだとドライバが対応してないかもしれないのでちょっと古めのもののほうが無難です。以下の商品は問題なく動きました。</p>
<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=armyofpigs-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B003NSAMW2" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

<p>wifiの設定はX Windowの設定画面からしました。<code>startx</code>でデスクトップを起動すると<code>WiFi Config</code>というアイコンがあるのでそこから設定できます。
ターミナルで<code>ifconfig</code>を実行してwlan0にinet addrが割り当てられていることを確認できればOKです。</p>
<div class="pygments_murphy"><pre>pi@raspberrypi ~ $ /sbin/ifconfig
eth0      Link encap:Ethernet  HWaddr b8:27:eb:90:32:15
          UP BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:8 errors:0 dropped:0 overruns:0 frame:0
          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:1104 (1.0 KiB)  TX bytes:1104 (1.0 KiB)

wlan0     Link encap:Ethernet  HWaddr 10:6f:3f:ec:5f:b8
          inet addr:192.168.1.13  Bcast:192.168.1.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:4285 errors:0 dropped:0 overruns:0 frame:0
          TX packets:673 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:937903 (915.9 KiB)  TX bytes:81630 (79.7 KiB)
</pre></div>

<p>ここで確認したIPアドレスにsshしてつながれば完了です。</p>]]></content:encoded>
    </item>
    <item>
      <title>Raspberry Pi はじめました</title>
      <link>http://mojavy.com/blog/2013/04/28/raspberry-pi/</link>
      <pubDate>Sun, 28 Apr 2013 01:30:01 JST</pubDate>
      <category><![CDATA[raspberry pi]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/04/28/raspberry-pi/</guid>
      <description>Raspberry Pi はじめました</description>
      <content:encoded><![CDATA[<p><img alt="raspberry" src="/images/raspberry-pi-150.png" /></p>
<p>前々から気になってたRaspberry Piを手に入れました。</p>
<p>最終的にはセンサーとかいろいろつけてインタラクティブなおもちゃをつくりたいですが、当面の目標は秋月電子で調達してきたLCDディスプレイに文字を表示させるためのドライバを書くことにしようと思います。</p>
<p>Raspberry Piのセットアップ手順はぐぐればすぐでてくるので割愛しますが、そのままだとsdcardの空き領域がつかえないので起動時にマウントできるようにするまでの手順だけメモしときます。</p>
<div class="pygments_murphy"><pre>pi@raspberrypi ~ $ sudo fdisk /dev/mmcblk0

Command (m for help): p

Disk /dev/mmcblk0: 31.7 GB, 31674335232 bytes
4 heads, 16 sectors/track, 966624 cylinders, total 61863936 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x00014d34

        Device Boot      Start         End      Blocks   Id  System
/dev/mmcblk0p1            8192      122879       57344    c  W95 FAT32 (LBA)
/dev/mmcblk0p2          122880     3788799     1832960   83  Linux

Command (m for help): n
Partition type:
   p   primary (2 primary, 0 extended, 2 free)
   e   extended
Select (default p):
Using default response p
Partition number (1-4, default 3):
Using default value 3
First sector (2048-61863935, default 2048): 3788800
Last sector, +sectors or +size{K,M,G} (3788800-61863935, default 61863935):
Using default value 61863935

Command (m for help): p

Disk /dev/mmcblk0: 31.7 GB, 31674335232 bytes
4 heads, 16 sectors/track, 966624 cylinders, total 61863936 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x00014d34

        Device Boot      Start         End      Blocks   Id  System
/dev/mmcblk0p1            8192      122879       57344    c  W95 FAT32 (LBA)
/dev/mmcblk0p2          122880     3788799     1832960   83  Linux
/dev/mmcblk0p3         3788800    61863935    29037568   83  Linux

Command (m for help): w
The partition table has been altered!

Calling ioctl() to re-read partition table.

WARNING: Re-reading the partition table failed with error 16: Device or resource busy.
The kernel still uses the old table. The new table will be used at
the next reboot or after you run partprobe(8) or kpartx(8)
Syncing disks.

pi@raspberrypi ~ $ sudo mkfs.ext4 /dev/mmcblk0p3
mke2fs 1.42.5 (29-Jul-2012)
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
1815072 inodes, 7259392 blocks
362969 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=0
222 block groups
32768 blocks per group, 32768 fragments per group
8176 inodes per group
Superblock backups stored on blocks:
        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,
        4096000

Allocating group tables: done
Writing inode tables: done
Creating journal (32768 blocks):
done
Writing superblocks and filesystem accounting information: done
</pre></div>

<p>上記のように、<code>fdisk</code>でパーティションをきってrebootしたあと、<code>mkfs.ext4</code>でフォーマットします。
最後に<code>/etc/fstab</code>に以下を追記してもう一度再起動して完了です。 マウントするディレクトリ(以下だと<code>/home</code>)は適当にかえてください。/homeにマウントする場合はpiユーザのホームディレクトリをコピーしておくといいと思います。</p>
<div class="pygments_murphy"><pre>/dev/mmcblk0p3 /home            ext4    defaults,noatime  0       2
</pre></div>

<div class="pygments_murphy"><pre>pi@raspberrypi ~ $ df -h
Filesystem      Size  Used Avail Use% Mounted on
rootfs          1.8G  1.4G  246M  86% /
/dev/root       1.8G  1.4G  246M  86% /
devtmpfs        212M     0  212M   0% /dev
tmpfs            44M  276K   44M   1% /run
tmpfs           5.0M     0  5.0M   0% /run/lock
tmpfs            88M     0   88M   0% /run/shm
/dev/mmcblk0p1   56M   19M   38M  34% /boot
/dev/mmcblk0p3   28G  172M   26G   1% /home
</pre></div>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=armyofpigs-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B003VNKNF0" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>]]></content:encoded>
    </item>
    <item>
      <title>TOMLノススメ</title>
      <link>http://mojavy.com/blog/2013/04/26/toml/</link>
      <pubDate>Fri, 26 Apr 2013 20:21:11 JST</pubDate>
      <category><![CDATA[tips]]></category>
      <category><![CDATA[toml]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/04/26/toml/</guid>
      <description>TOMLノススメ</description>
      <content:encoded><![CDATA[<p><img alt="github" src="/images/github-logo-transparent-200.png" /> </p>
<h2 id="toml">TOMLとは</h2>
<p><a href="https://github.com/mojombo/toml">https://github.com/mojombo/toml</a> </p>
<p>Tom's Obvious, Minimal Language (TOML) とはgithubの中の人が提案している設定ファイルのためのミニ言語で、以下のような特徴があります。</p>
<ul>
<li>人間が読み書きしやすい</li>
<li>標準的なデータ型が利用できる</li>
<li>曖昧さが発生する余地が極力排除されている</li>
<li>パーサをかくのが簡単</li>
</ul>
<h2 id="toml_1">なぜTOML?</h2>
<p>例えば、YAMLを設定ファイルに使っているシステムは多いですが、<a href="http://yaml.org/spec/1.2/spec.pdf">YAMLの仕様書</a>は80ページもあり正しく使うのは意外と大変です。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>
<p>またJSONはカッコやダブルクオートの割合が多すぎますし、コメントも使えません。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> </p>
<p>TOMLをつかえばそのようなストレスはありません。</p>
<h2 id="toml_2">TOMLの使い方</h2>
<p>TOMLの書き方は<a href="https://github.com/mojombo/toml">本家のドキュメント</a> をみてもらえばすぐわかると思います。</p>
<p>TOMLのライブラリは各種言語に対応したものが既にたくさんあります。
言語によっては複数の実装が存在するものもありますが、とりあえずはgithub上でのstarの数が一番多いものから試すといいと思います。</p>
<p>わざわざ説明するほどの内容でもないですが、ここでは一応rubyでの使い方を紹介します。
<code>gem install toml</code>でインストールして、以下のようにするだけです。YAMLの場合と大体同じですね。</p>
<div class="pygments_murphy"><pre><span class="nb">require</span> <span class="s1">&#39;toml&#39;</span>

<span class="no">TOML</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&quot;thing = 9&quot;</span><span class="p">)</span>
<span class="c1"># =&gt; {&quot;thing&quot; =&gt; 9}</span>

<span class="no">TOML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="s2">&quot;my_file.toml&quot;</span><span class="p">)</span>
<span class="c1"># =&gt; {&quot;whatever&quot; =&gt; &quot;keys&quot;}</span>
</pre></div>

<h3 id="_1">その他</h3>
<ul>
<li>TOMLでは日付型も定義されていて、それもUTC固定というのが地味にいいです</li>
<li>githubのコードハイライトは既にTOMLに対応してます</li>
<li>emacsユーザはtoml-modeというのがmelpaに登録されているので、<code>M-x list-packages</code>からインストールできます。</li>
</ul>
<h3 id="_2">まとめ</h3>
<p>TOMLという設定ファイルのための新しいフォーマットを紹介しました。
設定ファイルにYAMLやJSONつかってるひとはTOMLに移行すると幸せになれるかもしれません。</p>
<div class="footnote">
<hr />
<ol>
<li id="fn:1">
<p>仕様を正確に実装したYAMLパーサはほとんど存在しないとかいう話もちらほら&#160;<a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
<li id="fn:2">
<p><a href="https://github.com/mojombo/toml/issues/2">https://github.com/mojombo/toml/issues/2</a> &#160;<a href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text">&#8617;</a></p>
</li>
</ol>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Quicklinks 5</title>
      <link>http://mojavy.com/blog/2013/04/23/quicklinks5/</link>
      <pubDate>Tue, 23 Apr 2013 20:20:23 JST</pubDate>
      <category><![CDATA[quicklinks]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/04/23/quicklinks5/</guid>
      <description>Quicklinks 5</description>
      <content:encoded><![CDATA[<p><img alt="ruby" src="/images/ruby-logo.png" /> </p>
<h3 id="messagepack">MessagePack</h3>
<p><a href="https://github.com/msgpack/msgpack/issues/121">https://github.com/msgpack/msgpack/issues/121</a> </p>
<p>盛り上がってたのはもう2か月くらい前ですが議論はまだ進行中のようです。
技術的な面だけでなく日本のコミュニティの外国からの見えかたとか政治力とかといった点も興味深かったです。</p>
<ul>
<li><a href="http://www.geekpage.jp/blog/?id=2013/2/26/1">http://www.geekpage.jp/blog/?id=2013/2/26/1</a> </li>
</ul>
<h3 id="toml">toml</h3>
<p><a href="https://github.com/mojombo/toml">https://github.com/mojombo/toml</a> </p>
<p>日本でLTSVが流行ってたくらいの時期にtomlというミニ言語も流行っていたらしいです。
あらゆる設定ファイルはこのフォーマットになればいいと思います。</p>
<h3 id="rubymotion">RubyMotion</h3>
<p><a href="http://www.rubymotion.com/">http://www.rubymotion.com/</a></p>
<p>rubyをつかったiOSアプリのためのツールチェイン。
rubyのコードをllvmベースのマシン語にコンパイルするので高速に実行できるとのこと。
既存のrubyコードがすべてそのまま動くというわけではないみたいですが、XCodeとObjective-C使わなくていいというのは魅力的ですね。</p>
<ul>
<li><a href="http://rubysource.com/getting-to-know-rubymotion-with-laurent-sansonetti/">http://rubysource.com/getting-to-know-rubymotion-with-laurent-sansonetti/</a> </li>
<li><a href="http://d.hatena.ne.jp/naoya/20120831/1346409758">http://d.hatena.ne.jp/naoya/20120831/1346409758</a> </li>
</ul>
<h3 id="mobiruby">MobiRuby</h3>
<p><a href="http://mobiruby.org/">http://mobiruby.org/</a> </p>
<p>これもrubyでiOSアプリをつくるためのものですが、こちらはmrubyをベースにしたruby実行環境をiOSの上に構築するので既存のrubyのコードがほとんどそのまま動くそうです。</p>
<h3 id="ruboto">Ruboto</h3>
<p><a href="http://ruboto.org/">http://ruboto.org/</a> </p>
<p>こっちはrubyでAndroidアプリをつくるためのもの。jrubyベース。
これに関しては<a href="http://mojavy.com/blog/2013/03/29/ruboto/">別途記事書きました</a></p>
<h3 id="genome-compiler">genome compiler</h3>
<p><a href="http://www.genomecompiler.com">http://www.genomecompiler.com</a> </p>
<p>塩基配列をリッチなUIでデザインするためのエディタ的なもの。
ゲノムをソースコードのアナロジーでつかうならコンパイルは遺伝子発現だと思うけど、これで実際にできるのはデザインした配列を生合成業者に注文するところまで。</p>
<h3 id="_1">七葉院まゆせ</h3>
<p><a href="http://shichihain.com/">http://shichihain.com/</a> </p>
<p>CVは金元寿子さんだそうです。帰省の際は両備バス利用したいと思います。</p>
<ul>
<li><a href="http://rocketnews24.com/2013/03/12/303309/">http://rocketnews24.com/2013/03/12/303309/</a></li>
</ul>
<h3 id="_2">その他</h3>
<p>つかれてきたので以下簡易版</p>
<ul>
<li>gadget
<ul></li>
<li><a href="http://www.raspberrypi.org/">Raspberry Pi</a> : ついに実機ゲットしました</li>
<li><a href="http://www.google.com/glass/">Google Glass</a> : ほしい</li>
<li><a href="http://compressorheadband.com/">Compressorhead</a>  : リアルにメタルでできたメタルバンド
<ul></li>
<li><a href="http://www.youtube.com/watch?v=3RBSkq-_St8">http://www.youtube.com/watch?v=3RBSkq-_St8</a>
</ul>
</ul></li>
<li>フロントエンド関係
<ul></li>
<li><a href="http://www.createjs.com/#!/EaselJS">EaselJS</a> : 便利</li>
<li><a href="http://appkitbox.com/testkit">Remote TestKit for Android</a> : 便利</li>
<li><a href="http://peerjs.com/">peerjs</a> 
<ul></li>
<li><a href="http://www.infoq.com/jp/news/2013/03/peerjs-0.1.7-released">http://www.infoq.com/jp/news/2013/03/peerjs-0.1.7-released</a> </li>
<li><a href="http://blog.livedoor.jp/kotesaki/archives/1794148.html">http://blog.livedoor.jp/kotesaki/archives/1794148.html</a> 
</ul>
</ul></li>
<li>ruby
<ul></li>
<li><a href="http://www.ruby-lang.org/ja/news/2013/02/24/ruby-2-0-0-p0-is-released/">ruby 2.0</a> </li>
<li><a href="http://weblog.rubyonrails.org/2013/2/25/Rails-4-0-beta1/">rails 4</a>
</ul></li>
<li>misc
<ul></li>
<li><a href="http://podcast.bulknews.net/">Tatsuhiko Miyagawa's Podcast</a> </li>
<li><a href="http://quickdocs.org/">Quickdocs</a> </li>
<li><a href="https://github.com/rui314/8cc">toy compiler</a> : コンパイラの学習によい</li>
<li><a href="https://github.com/twitter/fatcache">fatcache</a> : SSDのせたマシンでRedis走らせればいいんじゃないかと思ってしまう
</ul></li>
</ul>]]></content:encoded>
    </item>
    <item>
      <title>inf-php.elがmelpaに登録されました</title>
      <link>http://mojavy.com/blog/2013/04/21/inf-php-on-melpa/</link>
      <pubDate>Sun, 21 Apr 2013 16:56:41 JST</pubDate>
      <category><![CDATA[php]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/04/21/inf-php-on-melpa/</guid>
      <description>inf-php.elがmelpaに登録されました</description>
      <content:encoded><![CDATA[<p><img alt="emacs" src="/images/carbon-emacs-icon-200.png" /> </p>
<p><a href="http://mojavy.com/blog/2013/04/05/emacs-inf-php-mode/">先日つくったinf-php</a> が <a href="http://melpa.milkbox.net/">melpa</a> に登録されました。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>
<p>emacs24 以降をつかっている人は<code>M-x list-packages</code> からinf-phpをインストールできるようになります。</p>
<div class="footnote">
<hr />
<ol>
<li id="fn:1">
<p>初めてmelpaにpull requestを送ってみましたが、送って1分でmergeされるという爆速対応でした。&#160;<a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
</ol>
</div>]]></content:encoded>
    </item>
    <item>
      <title>emacsでphpのインタラクティブシェルを動かすinf-php.elを書いた</title>
      <link>http://mojavy.com/blog/2013/04/05/emacs-inf-php-mode/</link>
      <pubDate>Fri, 05 Apr 2013 19:49:49 JST</pubDate>
      <category><![CDATA[php]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/04/05/emacs-inf-php-mode/</guid>
      <description>emacsでphpのインタラクティブシェルを動かすinf-php.elを書いた</description>
      <content:encoded><![CDATA[<p><img alt="emacs" src="/images/carbon-emacs-icon-200.png" /> </p>
<p>phper人口は多いはずなのになぜかどこにも見つからなかったので<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>emacsでphpのインタラクティブシェルを動かすための<a href="https://github.com/taksatou/inf-php">inf-php.el</a> を書いた。</p>
<h4 id="install">install</h4>
<p>auto-installがはいっていれば、<code>(auto-install-from-url "https://raw.github.com/taksatou/inf-php/master/inf-php.el")</code>で、はいってなければ <a href="https://raw.github.com/taksatou/inf-php/master/inf-php.el">inf-php.el</a> をダウンロードして適当にload-pathの通った場所に配置して、<code>.emacs</code>に以下を追記</p>
<div class="pygments_murphy"><pre>(require &#39;inf-php)
</pre></div>

<h4 id="usage">usage</h4>
<p>現状のキーバインドは以下の通り</p>
<div class="pygments_murphy"><pre>(define-key php-mode-map &quot;\C-c\C-s&quot; &#39;inf-php)              ;; inf-phpを起動する
(define-key php-mode-map &quot;\C-c\C-z&quot; &#39;php-switch-to-inf)    ;; inf-rubyバッファに切り替える
(define-key php-mode-map &quot;\M-\C-x&quot; &#39;php-send-definition)   ;; 現在カーソルがあるところの関数をinf-phpに送る
(define-key php-mode-map &quot;\C-c\C-x&quot; &#39;php-send-definition)  ;; 同上
(define-key php-mode-map &quot;\C-c\M-x&quot; &#39;php-send-definition-and-go)  ;; 同上だが送った後バッファを切り替える
(define-key php-mode-map &quot;\C-c\C-r&quot; &#39;php-send-region)             ;; 現在のregionを送る
(define-key php-mode-map &quot;\C-c\M-r&quot; &#39;php-send-region-and-go)      ;; 同上だが送った後バッファを切り替える
(define-key php-mode-map &quot;\C-x\C-e&quot; &#39;php-send-last-sexp)          ;; 直前のsexpをinf-phpに送る
</pre></div>

<h4 id="misc">misc</h4>
<p>フィードバック、要望等ありましたらgithubからおねがいします。</p>
<div class="footnote">
<hr />
<ol>
<li id="fn:1">
<p>と思ったら、<a href="https://github.com/ieure/php_repl">php_repl</a> なるものが存在していた。php_replのほうが機能的には充実してそう。inf-phpは依存がほぼないのでインストールが簡単という点がメリットなのでまあよしとします(2013/04/05 20:57:35 追記)&#160;<a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
</ol>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Rubotoを使ってRubyでAndroidアプリをかく</title>
      <link>http://mojavy.com/blog/2013/03/29/ruboto/</link>
      <pubDate>Fri, 29 Mar 2013 21:53:15 JST</pubDate>
      <category><![CDATA[android]]></category>
      <category><![CDATA[ruby]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/03/29/ruboto/</guid>
      <description>Rubotoを使ってRubyでAndroidアプリをかく</description>
      <content:encoded><![CDATA[<p><img alt="ruboto" src="/images/ruboto-200.png" /></p>
<p>最近iOSアプリ界隈では<a href="http://www.rubymotion.com/">RubyMotion</a>や<a href="http://mobiruby.org/">MobiRuby</a>が盛り上がってきてますが、Androidでも<a href="http://ruboto.org/">Ruboto</a>をつかえば簡単にrubyで開発することができるようになります。</p>
<p>そもそもjavaで実装された処理系であれば大抵javaクラスの呼びだしは簡単にできるようになっているので、jrubyやjythonでandroidアプリを開発することは以前から可能でした。
しかし、以下のような問題があって実際にやるとなるとそれなりに面倒なものでした。</p>
<ol>
<li>jrubyやjythonをdalvikvm用バイナリ(dex)にコンパイルするのに時間がかかる<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li>
<li>androidのjavaでは使えない機能を使って処理系を実装してある場合があるので、何らかの方法で回避する必要がある</li>
<li>スクリプトのソースファイルの配置やパスの設定を自分でやる必要があり、パッケージングが面倒 </li>
<li>アプリのフットプリントが大きくなる<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li>
</ol>
<p>Rubotoをつかえばこのあたりの面倒をみてくれるので、ほとんどjavaを書く必要がなくなります。Ruboto自体は結構前からありますが、ここ1年くらいでもろもろの機能が充実してきて大分実用的になってきた感があります。</p>
<p>以下Rubotoの使用方法について簡単に紹介します。</p>
<h2 id="_1">インストール</h2>
<div class="pygments_murphy"><pre>gem install ruboto
gem install jruby-jars
</pre></div>

<p>また、<code>ANDROID_HOME</code>環境変数の設定と、android sdkの <code>tools/</code> と <code>platform-tools/</code>にはあらかじめパスをとおしておきます</p>
<h2 id="_2">雛形の生成</h2>
<div class="pygments_murphy"><pre>ruboto gen app --package org.rubyandroid.new_demo

# 以下のようにしてより詳細に設定することもできます
# ruboto gen app --package org.rubyandroid.new_demo --path ./myapp --name MyApp --target android-17 --min-sdk android-10 --activity MainActivityName
</pre></div>

<h2 id="_3">ビルドとインストール</h2>
<p>rakeからビルドできるようになっています。また、rubyスクリプトの更新はコンパイル不要で反映できます。
あとは普通にrubyを書くだけです。</p>
<div class="pygments_murphy"><pre>cd new_demo
rake
rake install

#
# edit ruby scripts..
#

rake update_scripts
</pre></div>

<h2 id="rubygems">rubygemsを使う</h2>
<p>通常の<code>Gemfile</code>と同じ内容を、<code>Gemfile.apk</code>という名前のファイルに書いてプロジェクトのルートディレクトリに置いておけば、<code>rake</code>した際に<code>libs/bundle.jar</code>を生成してapkにいれてくれます。</p>
<p>詳細は以下の例を参考にしてください。
<a href="https://github.com/ruboto/ruboto/wiki/Tutorial%3A-Using-an-SQLite-database-with-ActiveRecord">https://github.com/ruboto/ruboto/wiki/Tutorial%3A-Using-an-SQLite-database-with-ActiveRecord</a></p>
<h2 id="_4">補足</h2>
<p>rubotoではjrubyの実行環境は別途Ruboto Core platformというapkで提供されています。そのためアプリ本体にruby処理系を同梱する必要がなく、省サイズでコンパイルも速くなるというメリットがあります。しかし、このやり方だとRuboto Core platformを別途インストールしてもらう必要がでてきてしまい、実際にGoogle Playで配布するようなアプリでは受け入れ難いと思います。</p>
<p>これを回避する方法も提供されていて、プロジェクトを生成する際に<code>--with-jruby</code>というオプションをつければjrubyを同梱したapkをビルドできるようになりますが、この場合は前述のメリットはうけられなくなります。ただ、コンパイル時間に関しては、rubyスクリプトだけを触っている限りは、dexの再コンパイルは必要ないのでそれほど気にならないと思います。</p>
<h2 id="_5">まとめ</h2>
<ul>
<li>androidで素のjrubyを使うのは茨の道ですが、rubotoを使えば非常に簡単にrubyを使えるようになります</li>
<li>jrubyなので普通のrubygemsやjavaでかかれたライブラリもそのまま使えます</li>
<li>javaで開発した場合はコンパイル〜再インストールが毎回必要になりますが、<code>.rb</code>の更新反映は高速にできるので開発効率があがります</li>
<li>まだそれほど使い込んでないので思わぬはまりどころがあるかもしれません</li>
</ul>
<div class="footnote">
<hr />
<ol>
<li id="fn:1">
<p>dxが分割コンパイルに対応してないので回避しづらい&#160;<a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
<li id="fn:2">
<p>ファイルサイズも実行時のメモリ使用量も&#160;<a href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text">&#8617;</a></p>
</li>
</ol>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Mac OSXでシェルスクリプトをキーボードショートカットに登録する方法</title>
      <link>http://mojavy.com/blog/2013/03/28/mac-shell-script-keyboard-shortcut/</link>
      <pubDate>Thu, 28 Mar 2013 02:50:01 JST</pubDate>
      <category><![CDATA[mac]]></category>
      <category><![CDATA[shell]]></category>
      <category><![CDATA[tips]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/03/28/mac-shell-script-keyboard-shortcut/</guid>
      <description>Mac OSXでシェルスクリプトをキーボードショートカットに登録する方法</description>
      <content:encoded><![CDATA[<p><img alt="automator" src="/images/automator.png" /></p>
<p>概要を以下にメモ</p>
<ol>
<li>Automatorを起動</li>
<li>サービスを選択</li>
<li>右ペインの上部、「次の選択項目を受け取ります」を入力なしにする</li>
<li>左ペインからシェルスクリプトを実行をダブルクリック</li>
<li>デフォルトで<code>cat</code>になっている内容を任意のシェルスクリプトにする</li>
<li>右上の実行ボタンからテスト</li>
<li>適当な名前をつけて保存して閉じる</li>
<li>システム環境設定＞キーボードを開く</li>
<li>キーボードショートカットのタブを選択</li>
<li>サービスを選択してさっき保存したautomatorの名前をみつける</li>
<li>好きなショートカットを設定する</li>
</ol>
<p>参考: <a href="http://superuser.com/questions/45740/fast-user-switching-apple-menu/46308#46308">http://superuser.com/questions/45740/fast-user-switching-apple-menu/46308#46308</a></p>
<h4 id="_1">備考</h4>
<ul>
<li>新規作成したworkflowは保存して閉じるまでシステム設定のキーボードショートカットの項目に反映されない</li>
<li>workflowは$HOME/Library/Services に保存される</li>
</ul>]]></content:encoded>
    </item>
  </channel>
</rss>
