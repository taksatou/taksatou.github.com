<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>mojavy.com</title>
    <link>http://mojavy.com/blog</link>
    <description></description>
    <pubDate>Sun, 20 Oct 2013 02:32:40 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>趣味ブログ初めました</title>
      <link>http://mojavy.com/blog/2013/10/20/start-hobby-blog/</link>
      <pubDate>Sun, 20 Oct 2013 02:32:40 JST</pubDate>
      <category><![CDATA[blog]]></category>
      <category><![CDATA[hobby]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/10/20/start-hobby-blog/</guid>
      <description>趣味ブログ初めました</description>
      <content:encoded><![CDATA[<p>なんとなく気が向いたので趣味ブログをはじめました。</p>
<p><a href="http://mojavy.tumblr.com/">http://mojavy.tumblr.com/</a> </p>
<p>誰の役にもたたなそうなことをだらだら書こうと思います。</p>]]></content:encoded>
    </item>
    <item>
      <title>reveal.js をつかってブログ記事からスライドを生成する</title>
      <link>http://mojavy.com/blog/2013/10/18/revealjs/</link>
      <pubDate>Fri, 18 Oct 2013 22:00:24 JST</pubDate>
      <category><![CDATA[blog]]></category>
      <category><![CDATA[reveal.js]]></category>
      <category><![CDATA[blogofile]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/10/18/revealjs/</guid>
      <description>reveal.js をつかってブログ記事からスライドを生成する</description>
      <content:encoded><![CDATA[<h3 id="_1">はじめに</h3>
<p>これは以下のような人を対象にしたポストです</p>
<ul>
<li class="fragment">スライドをmarkdownでつくりたい</li>
<li class="fragment">ブログはmarkdownでかいている</li>
<li class="fragment">ずぼらするためには努力を惜しまない</li>
</ul>

<h3 id="_2">デモ</h3>
<p>とりあえず以下のスライドをみてください。</p>
<ul>
<li><a href="/slide/2013/10/18/revealjs/">/slide/2013/10/18/revealjs/</a> </li>
</ul>
<h3 id="revealjs">reveal.jsとは</h3>
<p>HTMLでかけるプレゼンツールです。詳細は以下等を参照してください。</p>
<ul>
<li><a href="http://lab.hakim.se/reveal-js">http://lab.hakim.se/reveal-js/</a> </li>
</ul>
<h3 id="static-cms">static CMS</h3>
<p>説明は省略します。このブログはblogofileでできていますが、jekyllやhakyllのようなものでもほぼ同等なことができます。</p>
<ul>
<li><a href="http://jekyllrb.com/">http://jekyllrb.com/</a> </li>
<li><a href="http://www.blogofile.com/">http://www.blogofile.com/</a> </li>
<li><a href="http://jaspervdj.be/hakyll/">http://jaspervdj.be/hakyll/</a> </li>
</ul>
<h3 id="_3">やり方</h3>
<p>reveal.jsのmarkdown埋め込み機能をつかうだけです。reveal.jsのREADMEを読むとめんどうなように見えますが、 <a href="https://github.com/taksatou/taksatou.github.com/blob/master/_blogofile/_templates/revealjs.mako">revealjs.mako</a>  のようにテンプレートを書くだけ。とはいえ多少のコーディングが必要です。</p>
<p>詳細は以下のソースをみてください。</p>
<ul>
<li><a href="https://github.com/taksatou/taksatou.github.com/blob/master/_blogofile/_templates/revealjs.mako">revealjs.mako</a> </li>
<li><a href="https://github.com/taksatou/taksatou.github.com/blob/master/_blogofile/_controllers/blog/slide.py">slide.py</a> </li>
</ul>
<h2 id="code-highlight">code highlight</h2>
<p>コードハイライトつかえます。</p>
<div class="pygments_borland"><pre><span class="cp">#include &lt;stdio.h&gt;</span>

<span class="c1">// highlight test</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello, world!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>

<h3 id="fragment">fragment</h3>
<p>fragmentもつかえます。</p>
<p class="fragment">... to step through ...</p>

<ol>
<li class="fragment"><code>any type</code></li>
<li class="fragment"><em>of view</em></li>
<li class="fragment"><strong>fragments</strong></li>
</ol>

<h3 id="_4">長所</h3>
<ul>
<li class="fragment">ブログ書くついてでにスライドもできる</li>
<li class="fragment">スライドの共有が簡単</li>
<li class="fragment">パワポ不要</li>
<li class="fragment">さりげなくギークっぽさがアピールできる</li>
</ul>

<h3 id="_5">短所</h3>
<ul>
<li class="fragment">ブログとスライドのそれぞれの完成度を両立した記事にまとめるのは難しい</li>
<li class="fragment">多少はhtmlを書く必要があるときもある</li>
</ul>

<h3 id="_6">まとめ</h3>
<ul>
<li class="fragment">blogofileにreveal.jsを組み込んだ話を紹介しました</li>
<li class="fragment">reveal.jsかっこいいです</li>
</ul>]]></content:encoded>
    </item>
    <item>
      <title>オーバーフローしにくい組み合わせの数の計算方法</title>
      <link>http://mojavy.com/blog/2013/10/17/calculate-combinations/</link>
      <pubDate>Thu, 17 Oct 2013 21:13:58 JST</pubDate>
      <category><![CDATA[algorithms]]></category>
      <category><![CDATA[programming]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/10/17/calculate-combinations/</guid>
      <description>オーバーフローしにくい組み合わせの数の計算方法</description>
      <content:encoded><![CDATA[<p>Cで組み合わせの数を計算するときに定義通り計算するとすぐにオーバーフローしてしまう。
例えば以下のような実装だと、<img src="/images/cca79b0e713c769c64899333d0fe43e6.png"> 程度でも結果がおかしくなってしまう。</p>
<div class="pygments_borland"><pre><span class="cp">#include &lt;iostream&gt;</span>

<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="n">uint64_t</span> <span class="n">fac</span><span class="p">(</span><span class="n">uint64_t</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">n</span> <span class="o">*</span> <span class="n">fac</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="k">else</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">uint64_t</span> <span class="n">combinations</span><span class="p">(</span><span class="n">uint64_t</span> <span class="n">n</span><span class="p">,</span> <span class="n">uint64_t</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">fac</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">fac</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="o">*</span> <span class="n">fac</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">k</span><span class="p">));</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">combinations</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c1">// =&gt; 10</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">combinations</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c1">// =&gt; 252</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">combinations</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c1">// =&gt; 184756</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">combinations</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="mi">15</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c1">// =&gt; 0 !?</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>

<p>とりあえず素因数分解してやれば解決するのでいままでそうしてたのだけど、もっとかっこいい方法がないものかと思って探してみたらKnuth先生の本で以下のようなアルゴリズムが紹介されているらしい。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> 
これはかっこいい。</p>
<div class="pygments_borland"><pre><span class="n">uint64_t</span> <span class="n">combinations2</span><span class="p">(</span><span class="n">uint64_t</span> <span class="n">n</span><span class="p">,</span> <span class="n">uint64_t</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">uint64_t</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">uint64_t</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">d</span> <span class="o">&lt;=</span> <span class="n">k</span><span class="p">;</span> <span class="o">++</span><span class="n">d</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">r</span> <span class="o">*=</span> <span class="n">n</span><span class="o">--</span><span class="p">;</span>
        <span class="n">r</span> <span class="o">/=</span> <span class="n">d</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">combinations2</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="mi">15</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c1">// =&gt; 155117520</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">combinations2</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c1">// =&gt; 118264581564861424</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">combinations2</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c1">// これはオーバーフローする</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>

<p>結果の値が範囲内ならオーバーフローしないのか、というとそういうわけではないけどナイーブな実装に比べるとずっと計算できる範囲が広いので、値のレンジがあらかじめわかっているのであればこれで十分ですね。</p>
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=armyofpigs-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4756145434" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

<div class="footnote">
<hr />
<ol>
<li id="fn:1">
<p><a href="http://stackoverflow.com/questions/1838368/calculating-the-amount-of-combinations">http://stackoverflow.com/questions/1838368/calculating-the-amount-of-combinations</a>   残念ながらvol2は手元にはない&#160;<a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
</ol>
</div>]]></content:encoded>
    </item>
    <item>
      <title>mustache基礎文法最速マスター</title>
      <link>http://mojavy.com/blog/2013/10/01/mustache-quick-master/</link>
      <pubDate>Tue, 01 Oct 2013 00:08:09 JST</pubDate>
      <category><![CDATA[ruby]]></category>
      <category><![CDATA[mustache]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/10/01/mustache-quick-master/</guid>
      <description>mustache基礎文法最速マスター</description>
      <content:encoded><![CDATA[<p><img alt="mustache" src="/images/mustache-logo-250.png" /> </p>
<p>mustacheはシンプルなテンプレートエンジンなので本家の英語マニュアル <a href="http://mustache.github.io/mustache.5.html">mustache(5)</a> を見ても大したことはないですが、日本語情報の需要もそれなりにあると思うのでまとめておきます。</p>
<p>以下の内容はrubygemの<code>mustache-0.99.4</code>で確認しています。
他の言語の場合は適宜置きかえてください。</p>
<h2 id="_1">目次</h2>
<div class="toc">
<ul>
<li><a href="#_1">目次</a></li>
<li><a href="#_2">変数の展開</a></li>
<li><a href="#_3">変数のエスケープ</a></li>
<li><a href="#_4">条件分岐</a></li>
<li><a href="#_5">ループ</a></li>
<li><a href="#lambda">無名関数 (Lambda)</a></li>
<li><a href="#_6">コメント</a></li>
<li><a href="#_7">まとめ</a></li>
</ul>
</div>
<h2 id="_2">変数の展開</h2>
<p><code>{{name}}</code>のように2つのブレースで囲ったタグは、<code>name</code>という名前のキーの値でおきかえられます。</p>
<p>対応するキーが見つからなかった場合はデフォルトでは空文字になります。</p>
<div class="pygments_borland"><pre><span class="no">Mustache</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s2">&quot;Hello, {{world}}!&quot;</span><span class="p">,</span> <span class="n">world</span><span class="p">:</span> <span class="s2">&quot;mustache&quot;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;Hello, mustache!&quot;</span>
<span class="no">Mustache</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s2">&quot;{{no_such_key}}&quot;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;&quot;</span>
</pre></div>

<h2 id="_3">変数のエスケープ</h2>
<p>デフォルトではHTMLエスケープが有効になります。アンエスケープされたHTMLが使いたい場合は<code>{{{name}}}</code>のように3つのブレースで囲います。</p>
<div class="pygments_borland"><pre><span class="no">Mustache</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s2">&quot;{{html}}&quot;</span><span class="p">,</span>  <span class="n">html</span><span class="p">:</span> <span class="s2">&quot;&lt;b&gt;GitHub&lt;/b&gt;&quot;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;&amp;lt;b&amp;gt;GitHub&amp;lt;/b&amp;gt;&quot;</span>
<span class="no">Mustache</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s2">&quot;{{{html}}}&quot;</span><span class="p">,</span> <span class="n">html</span><span class="p">:</span> <span class="s2">&quot;&lt;b&gt;GitHub&lt;/b&gt;&quot;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;&lt;b&gt;GitHub&lt;/b&gt;&quot;</span>
</pre></div>

<h2 id="_4">条件分岐</h2>
<p><code>{{#name}} ... {{/name}}</code>のように、2つのタグに<code>#</code>と<code>/</code>をそれぞれつけたタグで囲われたブロックはセクションといいます。</p>
<p>セクションのキーに対応する値にbool値を渡せばif文のような使い方ができます。
<code>#</code>のかわりに<code>^</code>をつかうと真偽を反転できます。</p>
<div class="pygments_borland"><pre><span class="n">template</span> <span class="o">=</span> <span class="o">&lt;&lt;</span><span class="no">DOC</span>
<span class="sh">{{#condition}}</span>
<span class="sh">It is true.</span>
<span class="sh">{{/condition}}</span>
<span class="sh">{{^condition}}</span>
<span class="sh">No not true.</span>
<span class="sh">{{/condition}}</span>
<span class="no">DOC</span>
<span class="no">Mustache</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">template</span><span class="p">,</span> <span class="n">condition</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="c1"># =&gt; &quot;It is true.\n&quot;</span>
<span class="no">Mustache</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">template</span><span class="p">,</span> <span class="n">condition</span><span class="p">:</span> <span class="kp">false</span><span class="p">)</span> <span class="c1"># =&gt; &quot;No not true.\n&quot;</span>
</pre></div>

<h2 id="_5">ループ</h2>
<p>セクションのキーに対応する値に配列を渡した場合は、それぞれの要素を引数として中のブロックが繰り返し評価されます。</p>
<div class="pygments_borland"><pre><span class="n">template</span> <span class="o">=</span> <span class="o">&lt;&lt;</span><span class="no">DOC</span>
<span class="sh">{{#animals}}</span>
<span class="sh">{{name}}</span>
<span class="sh">{{/animals}}</span>
<span class="no">DOC</span>
<span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="n">animals</span><span class="p">:</span> <span class="o">[</span><span class="p">{</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;cat&quot;</span><span class="p">},</span> <span class="p">{</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;dog&quot;</span><span class="p">},</span> <span class="p">{</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;pig&quot;</span><span class="p">}</span><span class="o">]</span><span class="p">}</span>
<span class="no">Mustache</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">template</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> <span class="c1"># =&gt; &quot;cat\ndog\npig\n&quot;</span>
</pre></div>

<h2 id="lambda">無名関数 (Lambda)</h2>
<p>セクションのキーに対応する値に呼び出し可能なオブジェクトを渡した場合は、そのブロック内のテキストを引数として実行され、その返り値が結果として出力されます。</p>
<div class="pygments_borland"><pre><span class="n">template</span> <span class="o">=</span> <span class="o">&lt;&lt;</span><span class="no">DOC</span>
<span class="sh">{{#proc}}</span>
<span class="sh">mojavy is bad</span>
<span class="sh">{{/proc}}</span>
<span class="no">DOC</span>
<span class="no">Mustache</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">template</span><span class="p">,</span> <span class="nb">proc</span><span class="p">:</span> <span class="o">-&gt;</span><span class="n">text</span><span class="p">{</span><span class="n">text</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/bad/</span><span class="p">,</span> <span class="s1">&#39;nice&#39;</span><span class="p">)})</span> <span class="c1"># =&gt; &quot;mojavy is nice\n&quot;</span>
</pre></div>

<h2 id="_6">コメント</h2>
<p><code>!</code>をつけるとコメントになります</p>
<div class="pygments_borland"><pre><span class="no">Mustache</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s2">&quot;Comment here: {{! ignore me }}&quot;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;Comment here: &quot;</span>
</pre></div>

<h2 id="_7">まとめ</h2>
<p>mustacheの基本的な機能について簡単なサンプルコードとともに解説しました。
ここではrubyのmustacheを使用しましたが、他の言語でも同様の機能が使えます。
一部の機能については省略しているので、より詳細な情報については本家ドキュメントを参照してください。</p>]]></content:encoded>
    </item>
    <item>
      <title>debianパッケージをchefで削除する場合はpurgeを使う方がよい</title>
      <link>http://mojavy.com/blog/2013/09/10/chef-purge-package/</link>
      <pubDate>Tue, 10 Sep 2013 19:39:49 JST</pubDate>
      <category><![CDATA[chef]]></category>
      <category><![CDATA[ruby]]></category>
      <category><![CDATA[debian]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/09/10/chef-purge-package/</guid>
      <description>debianパッケージをchefで削除する場合はpurgeを使う方がよい</description>
      <content:encoded><![CDATA[<p>apt-getコマンドにはパッケージを削除するためのコマンドが2種類ある</p>
<ul>
<li>remove: パッケージを削除するが設定ファイルはそのまま残す</li>
<li>purge: パッケージを削除するとき設定ファイルも削除する</li>
</ul>
<p>chefをつかっているということは設定ファイルもchefで管理しているはずなので、設定ファイルを残す必要はない。
さらに、依存で入ったパッケージも一緒に削除されるように、<code>options "--auto-remove"</code>などとしてやるとよい。</p>
<p>ゴミは混乱の元なので早めに消すべし。</p>]]></content:encoded>
    </item>
    <item>
      <title>chef soloでAuthenticationFailedといわれたときの対応</title>
      <link>http://mojavy.com/blog/2013/09/09/chef-solo-ssh-config/</link>
      <pubDate>Mon, 09 Sep 2013 20:43:04 JST</pubDate>
      <category><![CDATA[chef]]></category>
      <category><![CDATA[ruby]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/09/09/chef-solo-ssh-config/</guid>
      <description>chef soloでAuthenticationFailedといわれたときの対応</description>
      <content:encoded><![CDATA[<p>公開鍵認証なホストに対してパスフレーズ入力無しでsshログインができるにもかかわらず、</p>
<div class="pygments_borland"><pre><span class="nv">$ </span>knife solo cook myhost
Running Chef on myhost...
Checking Chef version...
Enter the password <span class="k">for </span>username@myhost:
ERROR: Net::SSH::AuthenticationFailed: username
</pre></div>

<p>のようにいわれてchef soloの実行に失敗してしまうときがある。</p>
<p>パスフレーズ入力無しでsshできたということは、普通は以下のうちの少くとも1つは満たされている。</p>
<ol>
<li>ssh-agentに対象の秘密鍵が登録されている</li>
<li>デフォルトパス($HOME/.ssh/id_rsa とか)に対象のパスフレーズ無し秘密鍵が保存されている</li>
<li>ssh_configでパスフレーズ無し秘密鍵を指定している</li>
</ol>
<p>それなのに<code>AuthenticationFailed</code>失敗してしまうのは、Net:SSHがデフォルトでは公開鍵認証を試行しない場合があるため。 <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> 
これを回避するには、ssh_configで<code>PubkeyAuthentication yes</code>を明示すればよい。</p>
<p>なお、<code>Net::SSH</code>がどのような動きをしているかは以下のスニペットを試すとよい。</p>
<div class="pygments_borland"><pre><span class="nb">require</span> <span class="s1">&#39;net/ssh&#39;</span>
<span class="no">Net</span><span class="o">::</span><span class="no">SSH</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="s2">&quot;myhost&quot;</span><span class="p">,</span> <span class="s2">&quot;username&quot;</span><span class="p">,</span> <span class="ss">:verbose</span> <span class="o">=&gt;</span> <span class="ss">:debug</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">p</span> <span class="n">x</span> <span class="p">}</span>
</pre></div>

<h3 id="_1">備考</h3>
<p>使ったのは以下のバージョン</p>
<ul>
<li>chef: 11.6.0</li>
<li>knife-solo: 0.3.0</li>
</ul>
<div class="footnote">
<hr />
<ol>
<li id="fn:1">
<p>この挙動は<code>knife solo</code>コマンドに<code>-i</code>オプションを渡しても変わらなかった。&#160;<a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
</ol>
</div>]]></content:encoded>
    </item>
    <item>
      <title>ptraceを駆使してscreenifyっぽいことをするreptyrがすごい</title>
      <link>http://mojavy.com/blog/2013/07/12/reptyr/</link>
      <pubDate>Fri, 12 Jul 2013 19:15:50 JST</pubDate>
      <category><![CDATA[C]]></category>
      <category><![CDATA[linux]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/07/12/reptyr/</guid>
      <description>ptraceを駆使してscreenifyっぽいことをするreptyrがすごい</description>
      <content:encoded><![CDATA[<p>reptyrというおもしろいものをみつけたのでご紹介</p>
<h2 id="reptyr">reptyr とは</h2>
<p>reptyrとは"re-ptying"するためのプログラムで、起動中のプロセスを新しい別のターミナルにもってくることができます。
例えば、うっかりscreenやtmuxの外で起動してしまった長い時間のかかるバッチ処理を、起動したままscreenの中にもってくることができます。</p>
<p><a href="https://github.com/nelhage/reptyr">https://github.com/nelhage/reptyr</a> </p>
<h2 id="_1">使い方</h2>
<div class="pygments_borland"><pre><span class="nv">$ </span>reptyr PID
</pre></div>

<p>現在のターミナル内にもってきたいプロセスのpidを引数にします。
attach後は、そのプロセスの入出力は^Cや^Zも含めて新しいターミナル側を向きます。</p>
<h2 id="screenify">それscreenifyでできるよ</h2>
<p>screenifyと呼ばれるスクリプトが昔からあって、それはgdbつかって似たようなことをやってるらしいです。
でもreptyrならもっとうまくできます。</p>
<p>例えば従来のscreenifyには以下のような問題がありました。</p>
<ul>
<li>screenifyでattachしたプロセスは、元のターミナルから入力をうけつけてしまう</li>
<li>ncursesをつかってるプログラムをscreenifyすると、そのプログラムはwindowのリサイズがとれなくなる</li>
<li>screenifyした新しいターミナルでは^Cがきかない</li>
</ul>
<p>reptyrはこういった問題を全部解決できます。</p>
<h2 id="_2">移植性</h2>
<p>reptyrは対象プロセスを操作するのにptraceをつかっているのでLinuxに強く依存しており、Linuxだけをサポートしています。
SolarisやBSDに移植することも技術的には可能ですが、現状はプラットフォーム固有の部分を抽象化するようにはデザインされていないようです。</p>
<p>reptyrは現状ではi386, x86_64, ARMをサポートしています。他のアーキテクチャへの対応はarch以下に対応コードを追加すれば比較的容易です。</p>
<h2 id="ptrace_scope-on-ubuntu-maverick-and-up">ptrace_scope on Ubuntu Maverick and up</h2>
<p>Ubuntu Maverick以降ではptraceの機能がデフォルトで無効になっています。
以下コマンドで一時的に有効にできます。</p>
<div class="pygments_borland"><pre><span class="nv">$ </span><span class="nb">echo </span>0 &gt; /proc/sys/kernel/yama/ptrace_scope
</pre></div>

<p>rootで<code>/etc/sysctl.d/10-ptrace.conf</code>を編集すると永続的に変更できます。また<code>ptrace_scope</code>に関する詳細な説明もここに書いてあります。</p>
<h2 id="_3">どうやってるの？</h2>
<p>ソースを追ってみたところ以下のような処理をしているようです。</p>
<ol>
<li>reptyrプロセス側でptyをつくる</li>
<li>attach対象のプロセスのttyのtermios設定をptyにコピーする</li>
<li>ptraceで対象プロセスをattachしてレジスタ内容を一旦退避</li>
<li>attachしたプロセス側でmmapし、そこにreptyrプロセス側でつくったptyをコピー</li>
<li>attachしたプロセス側でコピーしたptyをopenし、setsid〜ioctlでそこに制御端末を割り当てる</li>
<li>attachしたプロセス側でdup2して入出力をttyに向ける</li>
<li>レジスタ内容を復元、後始末してptraceをdetach</li>
</ol>
<p>reptyrのキモは5の制御端末をptyに割り当てるところで、これをすることによって従来のscreenifyの問題が回避できます。</p>
<p>しかし、単に<code>ioctl</code>の<code>TIOCSCTTY</code>するだけではうまくいかないのでちょっとしたトリックが必要です。詳細は<a href="http://blog.nelhage.com/2011/02/changing-ctty/">http://blog.nelhage.com/2011/02/changing-ctty/</a> に解説があります。
reptyrの作者は自力でこの方法を思いついたそうですが、同様のテクニックは <a href="https://github.com/ThomasHabets/injcode">injcode</a> や<a href="http://www.ohloh.net/p/neercs">neercs</a> でも使用されているそうです。</p>
<h2 id="reptyr_1">reptyrってどう読むの？</h2>
<p><code>repeater</code>のように発音してもいいけど曖昧なので<code>re-P-T-Y-er</code> (たぶんリ・ピーティーワイアー)のように発音してもよいそうです。</p>
<h2 id="_4">制約</h2>
<ul>
<li>backgroundにしたときは前のターミナルでbgやfgを実行する必要があります。background制御はshellがやっているので、これを直すにはshell側に手をいれる必要があります。</li>
<li>現状では子プロセスがあるプロセスはattachできません</li>
</ul>
<h2 id="_5">類似のもの</h2>
<ul>
<li><a href="https://github.com/ThomasHabets/injcode">injcode</a> </li>
<li><a href="http://www.ohloh.net/p/neercs">neercs</a> </li>
</ul>
<h2 id="_6">参考</h2>
<ul>
<li><a href="http://blog.nelhage.com/2011/01/reptyr-attach-a-running-process-to-a-new-terminal/">http://blog.nelhage.com/2011/01/reptyr-attach-a-running-process-to-a-new-terminal/</a> </li>
<li><a href="http://blog.nelhage.com/2011/02/changing-ctty/">http://blog.nelhage.com/2011/02/changing-ctty/</a> </li>
<li><a href="http://blog.habets.pp.se/2009/03/Moving-a-process-to-another-terminal">http://blog.habets.pp.se/2009/03/Moving-a-process-to-another-terminal</a> </li>
</ul>
<h2 id="_7">まとめ</h2>
<p>reptyrは1000行くらいの小さなプログラムですが、なかなかおもしろいハックだと思うので興味がある方はソースを読んでみて下さい。</p>]]></content:encoded>
    </item>
    <item>
      <title>C言語でtuple</title>
      <link>http://mojavy.com/blog/2013/07/10/c-tuple/</link>
      <pubDate>Wed, 10 Jul 2013 21:02:39 JST</pubDate>
      <category><![CDATA[C]]></category>
      <category><![CDATA[programming]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/07/10/c-tuple/</guid>
      <description>C言語でtuple</description>
      <content:encoded><![CDATA[<p>Cをつかってるとtupleっぽいものがあれば便利なのに、と思うときが時々あります。</p>
<p>別にtupleなんてなくても</p>
<div class="pygments_borland"><pre><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
   <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">;</span>
   <span class="kt">int</span> <span class="o">*</span><span class="n">i</span><span class="p">;</span>
<span class="p">}</span> <span class="n">tuple</span><span class="p">;</span>
</pre></div>

<p>のようにして構造体をつかえばいいのですが、必要になるたびにこれをするのはちょっとめんどくさいですよね。</p>
<p>というわけで色々試行錯誤してみたところ、以下のようにしてunionの配列にするというのがそこそこ便利だったので紹介します。</p>
<p>以下は使用例です。</p>
<div class="pygments_borland"><pre><span class="cp">#include &lt;stdio.h&gt;</span>

<span class="k">typedef</span> <span class="k">union</span> <span class="p">{</span>
    <span class="kt">void</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
<span class="p">}</span> <span class="n">tuple_u</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">tuple_u</span> <span class="n">tuple</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
    <span class="n">tuple</span> <span class="n">t</span> <span class="o">=</span> <span class="p">{</span> <span class="p">{</span> <span class="p">.</span><span class="n">s</span> <span class="o">=</span> <span class="s">&quot;hoge&quot;</span> <span class="p">},</span> <span class="p">{</span> <span class="p">.</span><span class="n">i</span> <span class="o">=</span> <span class="mi">123</span> <span class="p">}</span> <span class="p">};</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s, %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">i</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>

<p>C99のdesignated initializerをつかえば初期化もまあそこそこ書きやすいし、型の組み合わせもある程度柔軟にできます。</p>
<p>C++ではなくあえてCをつかうような人の多くは独自のコンテナライブラリのようなものをもってると思いますが、上記のようなtupleがあれば便利な場面は結構あるのではないかと思います。</p>]]></content:encoded>
    </item>
    <item>
      <title>Quicklinks 6</title>
      <link>http://mojavy.com/blog/2013/06/15/quicklinks6/</link>
      <pubDate>Sat, 15 Jun 2013 23:20:27 JST</pubDate>
      <category><![CDATA[quicklinks]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/06/15/quicklinks6/</guid>
      <description>Quicklinks 6</description>
      <content:encoded><![CDATA[<p><img alt="leaf" src="/images/leaf.jpg" /> </p>
<p>最近道端の植物を観察するのがマイブームです。
写真は六本木ヒルズにあるミニ庭園っぽいとこに植えてあった草。名前はわからない。
おもしろい植物があってもなかなか名前を同定するところまで到達できないのがつらいところ。</p>
<h3 id="go">Go</h3>
<ul>
<li><a href="http://ukai-go-talks.appspot.com/2013/gocon.slide">http://ukai-go-talks.appspot.com/2013/gocon.slide</a> </li>
<li><a href="http://blogger.ukai.org/2013/04/go-conference-2013-spring.html">http://blogger.ukai.org/2013/04/go-conference-2013-spring.html</a> </li>
<li><a href="http://talks.golang.org/2012/splash.article">http://talks.golang.org/2012/splash.article</a></li>
<li><a href="http://golang.jp/">http://golang.jp/</a> </li>
<li><a href="http://d.hatena.ne.jp/Jxck/20130530/1369928762">http://d.hatena.ne.jp/Jxck/20130530/1369928762</a> </li>
</ul>
<p>最近まわりで評判がよくて久々試してみたら思いの外よかったので真面目にやってみようかという気になりました。
勝手なイメージでは、ErlangとCとJavascriptのいいとこ取りしてる感じ。</p>
<p>Race Detectorなんてものもあるらしい。すごい。</p>
<h3 id="trick-2013">TRICK 2013</h3>
<ul>
<li><a href="https://sites.google.com/site/trickcontest2013/home/ja">https://sites.google.com/site/trickcontest2013/home/ja</a> </li>
<li><a href="https://github.com/tric/trick2013">https://github.com/tric/trick2013</a> </li>
</ul>
<p>これに入賞するにはプログラミングスキルだけじゃなくてセンスと教養と変態性が必要だと感じました。</p>
<h2 id="_1">電王戦</h2>
<ul>
<li><a href="http://ex.nicovideo.jp/denousen2013/">http://ex.nicovideo.jp/denousen2013/</a> </li>
<li><a href="http://www.tanaka.ecc.u-tokyo.ac.jp/~ktanaka/denou2/">http://www.tanaka.ecc.u-tokyo.ac.jp/~ktanaka/denou2/</a> </li>
</ul>
<p>人同士が対戦してるのを見るのは別のおもしろさがあるので人間が負けたからといってどうということもないとは思いますが、
実際コンピュータが勝ってしまうとちょっと寂しくも感じてしまいますね。</p>
<p>ちなみに将棋の探索木データは一部公開されているようです。
今のところ使い道は特に思いうかびませんが、こういうものの存在を覚えておくとAIとかを書きたくなったときとかに参考にできるかも。</p>
<h3 id="ternjs">ternjs</h3>
<ul>
<li><a href="http://ternjs.net/">http://ternjs.net/</a> </li>
</ul>
<p>IDEでのJavaやC#みたいなインテリジェントなエディタサポートをJavascriptでもできるようにするためのものです。普通に便利ですね。</p>
<h3 id="xbox-one-ps4">Xbox One, PS4</h3>
<ul>
<li><a href="http://www.xbox.com/en-US/xboxone/meet-xbox-one">http://www.xbox.com/en-US/xboxone/meet-xbox-one</a> </li>
<li><a href="http://www.jp.playstation.com/ps4/">http://www.jp.playstation.com/ps4/</a> </li>
<li><a href="http://youtu.be/pGQXdEHc3LY">http://youtu.be/pGQXdEHc3LY</a> </li>
<li><a href="http://youtu.be/njfj6KwEAfg">http://youtu.be/njfj6KwEAfg</a> </li>
</ul>
<p>もはやぱっと見では実写と見分けがつかないです。</p>
<h3 id="haswell">Haswell</h3>
<ul>
<li><a href="http://www.intel.com/content/www/us/en/processors/core/4th-gen-core-family-desktop-vol-1-datasheet.html">http://www.intel.com/content/www/us/en/processors/core/4th-gen-core-family-desktop-vol-1-datasheet.html</a> </li>
<li><a href="http://ascii.jp/elem/000/000/726/726151/">http://ascii.jp/elem/000/000/726/726151/</a> </li>
</ul>
<p>何やらおもしろそうな新機能が導入されたようです。</p>
<h3 id="nsa">NSAのリークの話</h3>
<ul>
<li><a href="http://wired.jp/2013/06/11/nsa-leaker-outs-himself/">http://wired.jp/2013/06/11/nsa-leaker-outs-himself</a> </li>
</ul>
<p>一個人が天下のアンクル・サムさんに喧嘩を売るという映画のような展開で野次馬せずにはいられません。</p>]]></content:encoded>
    </item>
    <item>
      <title>暗号利用モードについて</title>
      <link>http://mojavy.com/blog/2013/06/12/block-cipher-modes-of-operation/</link>
      <pubDate>Wed, 12 Jun 2013 08:36:07 JST</pubDate>
      <category><![CDATA[security]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/06/12/block-cipher-modes-of-operation/</guid>
      <description>暗号利用モードについて</description>
      <content:encoded><![CDATA[<p>AESを使おうと思ったけどどの暗号利用モードをつかえばいいかわからなかったので調べたことをまとめておきます。</p>
<h2 id="_1">暗号利用モードとは</h2>
<p><a href="http://ja.wikipedia.org/wiki/%E6%9A%97%E5%8F%B7%E5%88%A9%E7%94%A8%E3%83%A2%E3%83%BC%E3%83%89">Wikipedia/暗号利用モード</a></p>
<blockquote>
<p>暗号利用モード（あんごうりようモード、Block cipher modes of operation）とは、ブロック暗号を利用して、ブロック長よりも長いメッセージを暗号化するメカニズムのことである。
<br>
ECBモード（単純なブロック暗号の利用法）では、ある鍵で同一の平文を暗号化すると、同一の暗号文になる。したがって、長いメッセージ（画像データなど）のある部分が他の部分と同じであるかどうかが、暗号文の比較によって判断できてしまうので、他のモードが必要となった。
<br>
暗号利用モードには、秘匿用の利用モードと、認証用の利用モードとがある。
<br>
<br></p>
</blockquote>
<h2 id="_2">秘匿用利用モード</h2>
<p><a href="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation">Wikipediaの図</a> も参考にするとわかりやすい。
以下は概要だけ。</p>
<h3 id="ecb">ECB</h3>
<p>各ブロックを単純に一つずつ処理するだけ。暗号が一致したブロックは復号した平文も一致する。
1つ以上のブロックを単一のパスワードで暗号化するのであれば使うべきではない。</p>
<h3 id="cbc">CBC</h3>
<p>直前の暗号テキストブロックを次の平文テキストブロックにXORしてからブロック暗号処理することを繰り返す。
最初のブロックはIV(<a href="https://en.wikipedia.org/wiki/Initialization_vector">Initialization Vector</a>)をつかって暗号化する。</p>
<p>暗号化は前から順番にする必要があるが、複合は1つ前のブロック前が分かればできるので並列化が可能。</p>
<h3 id="cfb">CFB</h3>
<p>CBCと似ているが、直前の暗号テキストブロックを再度ブロック暗号処理したものに次の平文テキストブロックをXORしたものを暗号テキストとする。
最初のブロックはIVだけブロック暗号処理してXORする。
CBCとはXORのタイミングが違うだけ。</p>
<p>特徴もCBCと同じで、暗号化処理は並列化できないが複合は可能。</p>
<h3 id="ofb">OFB</h3>
<p>IVを繰り返しブロック暗号処理したものにそれぞれ平文ブロックをXORしていったものを暗号テキストとする。
すべての操作で直前のものが必要となるので暗号化・復号の両方とも並列化はできないが、IVのブロック暗号処理は事前に計算することができる。</p>
<h3 id="ctr-icm-sic">CTR (ICM, SIC)</h3>
<p>OFBに似ているが、IVではなくカウンターの値をインクリメントしつつブロック暗号処理したものに平文ブロックをXORする。
カウンターは十分に長い間繰り返しが発生しない一意な値を出力する任意の関数であれば何でもよいが、単に1ずつ増やすカウンターを使うことが多い。</p>
<p>暗号・復号いずれも並列化が可能だが、入力に決定的な値を使うことについては議論の余地がある。</p>
<h3 id="_3">ディスク用のもの</h3>
<p>ディスクを暗号化するには特別な考慮が必要になるため専用のものがいくつか存在する。</p>
<ul>
<li>LRW</li>
<li>XEX</li>
<li>XTS</li>
<li>CMC</li>
</ul>
<h4 id="_4">参考</h4>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Disk_encryption_theory">http://en.wikipedia.org/wiki/Disk_encryption_theory</a></li>
<li><a href="http://csrc.nist.gov/publications/nistpubs/800-38E/nist-sp-800-38E.pdf">http://csrc.nist.gov/publications/nistpubs/800-38E/nist-sp-800-38E.pdf</a></li>
<li><a href="http://axelkenzo.ru/downloads/1619-2007-NIST-Submission.pdf">http://axelkenzo.ru/downloads/1619-2007-NIST-Submission.pdf</a></li>
</ul>
<h2 id="_5">認証用の利用モード</h2>
<p>秘匿化とあわせて認証とデータの完全性を保証するためのモード。
通常はMAC(Massage Authentication Code, authentication tag)を組みあわせることで実現する。</p>
<ul>
<li><a href="http://en.wikipedia.org/wiki/CCM_mode">CCM</a></li>
<li><a href="http://en.wikipedia.org/wiki/CWC_mode">CWC</a></li>
<li><a href="http://en.wikipedia.org/wiki/OCB_mode">OCB</a></li>
<li><a href="http://en.wikipedia.org/wiki/EAX_mode">EAX</a></li>
<li><a href="http://en.wikipedia.org/wiki/Galois/Counter_Mode">GCM</a></li>
</ul>
<h2 id="_6">その他</h2>
<ul>
<li>上記では触れなかったが、並列化できるかどうかの他にもエラー検出が可能かどうかや組み合わせて使用するブロック暗号化方式の特徴なども考慮して選択する必要がある</li>
<li>特許になっているものも多いので使用する際は要確認</li>
<li>mysqlのaes_encrypt()ではECBをつかっているのでセキュリティ強度的にはあまりよろしくない</li>
</ul>
<h2 id="_7">参考</h2>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation">http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation</a></li>
<li><a href="http://en.wikipedia.org/wiki/Authenticated_encryption">http://en.wikipedia.org/wiki/Authenticated_encryption</a></li>
<li><a href="http://en.wikipedia.org/wiki/Message_authentication_code">http://en.wikipedia.org/wiki/Message_authentication_code</a></li>
<li><a href="http://en.wikipedia.org/wiki/OCB_mode">http://en.wikipedia.org/wiki/OCB_mode</a></li>
<li><a href="http://www.heliontech.com/aes_modes_basic.htm">http://www.heliontech.com/aes_modes_basic.htm</a></li>
<li><a href="http://www.triplefalcon.com/Lexicon/Encryption-Block-Mode-1.htm">http://www.triplefalcon.com/Lexicon/Encryption-Block-Mode-1.htm</a></li>
<li><a href="http://www.schneier.com/blog/archives/2009/07/another_new_aes.html">http://www.schneier.com/blog/archives/2009/07/another_new_aes.html</a></li>
<li><a href="http://stackoverflow.com/questions/1220751/how-to-choose-an-aes-encryption-mode-cbc-ecb-ctr-ocb-cfb">http://stackoverflow.com/questions/1220751/how-to-choose-an-aes-encryption-mode-cbc-ecb-ctr-ocb-cfb</a></li>
<li><a href="http://stackoverflow.com/questions/2797692/whats-the-best-way-to-store-sensitive-data-in-mysql">http://stackoverflow.com/questions/2797692/whats-the-best-way-to-store-sensitive-data-in-mysql</a></li>
<li><a href="http://www.cs.ucdavis.edu/~rogaway/ocb/license.htm">http://www.cs.ucdavis.edu/~rogaway/ocb/license.htm</a></li>
</ul>]]></content:encoded>
    </item>
  </channel>
</rss>
