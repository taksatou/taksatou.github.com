<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>mojavy.com</title>
    <link>http://mojavy.com/blog</link>
    <description></description>
    <pubDate>Tue, 23 Apr 2013 20:20:23 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Quicklinks 5</title>
      <link>http://mojavy.com/blog/2013/04/23/quicklinks5/</link>
      <pubDate>Tue, 23 Apr 2013 20:20:23 JST</pubDate>
      <category><![CDATA[quicklinks]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/04/23/quicklinks5/</guid>
      <description>Quicklinks 5</description>
      <content:encoded><![CDATA[<p><img alt="ruby" src="/images/ruby-logo.png" /> </p>
<h3 id="messagepack">MessagePack</h3>
<p><a href="https://github.com/msgpack/msgpack/issues/121">https://github.com/msgpack/msgpack/issues/121</a> </p>
<p>盛り上がってたのはもう2か月くらい前ですが議論はまだ進行中のようです。
技術的な面だけでなく日本のコミュニティの外国からの見えかたとか政治力とかといった点も興味深かったです。</p>
<ul>
<li><a href="http://www.geekpage.jp/blog/?id=2013/2/26/1">http://www.geekpage.jp/blog/?id=2013/2/26/1</a> </li>
</ul>
<h3 id="toml">toml</h3>
<p><a href="https://github.com/mojombo/toml">https://github.com/mojombo/toml</a> </p>
<p>日本でLTSVが流行ってたくらいの時期にtomlというミニ言語も流行っていたらしいです。
あらゆる設定ファイルはこのフォーマットになればいいと思います。</p>
<h3 id="rubymotion">RubyMotion</h3>
<p><a href="http://www.rubymotion.com/">http://www.rubymotion.com/</a></p>
<p>rubyをつかったiOSアプリのためのツールチェイン。
rubyのコードをllvmベースのマシン語にコンパイルするので高速に実行できるとのこと。
既存のrubyコードがすべてそのまま動くというわけではないみたいですが、XCodeとObjective-C使わなくていいというのは魅力的ですね。</p>
<ul>
<li><a href="http://rubysource.com/getting-to-know-rubymotion-with-laurent-sansonetti/">http://rubysource.com/getting-to-know-rubymotion-with-laurent-sansonetti/</a> </li>
<li><a href="http://d.hatena.ne.jp/naoya/20120831/1346409758">http://d.hatena.ne.jp/naoya/20120831/1346409758</a> </li>
</ul>
<h3 id="mobiruby">MobiRuby</h3>
<p><a href="http://mobiruby.org/">http://mobiruby.org/</a> </p>
<p>これもrubyでiOSアプリをつくるためのものですが、こちらはmrubyをベースにしたruby実行環境をiOSの上に構築するので既存のrubyのコードがほとんどそのまま動くそうです。</p>
<h3 id="ruboto">Ruboto</h3>
<p><a href="http://ruboto.org/">http://ruboto.org/</a> </p>
<p>こっちはrubyでAndroidアプリをつくるためのもの。jrubyベース。
これに関しては<a href="http://mojavy.com/blog/2013/03/29/ruboto/">別途記事書きました</a></p>
<h3 id="genome-compiler">genome compiler</h3>
<p><a href="http://www.genomecompiler.com">http://www.genomecompiler.com</a> </p>
<p>塩基配列をリッチなUIでデザインするためのエディタ的なもの。
ゲノムをソースコードのアナロジーでつかうならコンパイルは遺伝子発現だと思うけど、これで実際にできるのはデザインした配列を生合成業者に注文するところまで。</p>
<h3 id="_1">七葉院まゆせ</h3>
<p><a href="http://shichihain.com/">http://shichihain.com/</a> </p>
<p>CVは金元寿子さんだそうです。帰省の際は両備バス利用したいと思います。</p>
<ul>
<li><a href="http://rocketnews24.com/2013/03/12/303309/">http://rocketnews24.com/2013/03/12/303309/</a></li>
</ul>
<h3 id="_2">その他</h3>
<p>つかれてきたので以下簡易版</p>
<ul>
<li>gadget
<ul></li>
<li><a href="http://www.raspberrypi.org/">Raspberry Pi</a> : ついに実機ゲットしました</li>
<li><a href="http://www.google.com/glass/">Google Glass</a> : ほしい</li>
<li><a href="http://compressorheadband.com/">Compressorhead</a>  : リアルにメタルでできたメタルバンド
<ul></li>
<li><a href="http://www.youtube.com/watch?v=3RBSkq-_St8">http://www.youtube.com/watch?v=3RBSkq-_St8</a>
</ul>
</ul></li>
<li>フロントエンド関係
<ul></li>
<li><a href="http://www.createjs.com/#!/EaselJS">EaselJS</a> : 便利</li>
<li><a href="http://appkitbox.com/testkit">Remote TestKit for Android</a> : 便利</li>
<li><a href="http://peerjs.com/">peerjs</a> 
<ul></li>
<li><a href="http://www.infoq.com/jp/news/2013/03/peerjs-0.1.7-released">http://www.infoq.com/jp/news/2013/03/peerjs-0.1.7-released</a> </li>
<li><a href="http://blog.livedoor.jp/kotesaki/archives/1794148.html">http://blog.livedoor.jp/kotesaki/archives/1794148.html</a> 
</ul>
</ul></li>
<li>ruby
<ul></li>
<li><a href="http://www.ruby-lang.org/ja/news/2013/02/24/ruby-2-0-0-p0-is-released/">ruby 2.0</a> </li>
<li><a href="http://weblog.rubyonrails.org/2013/2/25/Rails-4-0-beta1/">rails 4</a>
</ul></li>
<li>misc
<ul></li>
<li><a href="http://podcast.bulknews.net/">Tatsuhiko Miyagawa's Podcast</a> </li>
<li><a href="http://quickdocs.org/">Quickdocs</a> </li>
<li><a href="https://github.com/rui314/8cc">toy compiler</a> : コンパイラの学習によい</li>
<li><a href="https://github.com/twitter/fatcache">fatcache</a> : SSDのせたマシンでRedis走らせればいいんじゃないかと思ってしまう
</ul></li>
</ul>]]></content:encoded>
    </item>
    <item>
      <title>inf-php.elがmelpaに登録されました</title>
      <link>http://mojavy.com/blog/2013/04/21/inf-php-on-melpa/</link>
      <pubDate>Sun, 21 Apr 2013 16:56:41 JST</pubDate>
      <category><![CDATA[php]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/04/21/inf-php-on-melpa/</guid>
      <description>inf-php.elがmelpaに登録されました</description>
      <content:encoded><![CDATA[<p><img alt="emacs" src="/images/carbon-emacs-icon-200.png" /> </p>
<p><a href="http://mojavy.com/blog/2013/04/05/emacs-inf-php-mode/">先日つくったinf-php</a> が <a href="http://melpa.milkbox.net/">melpa</a> に登録されました。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>
<p>emacs24 以降をつかっている人は<code>M-x list-packages</code> からinf-phpをインストールできるようになります。</p>
<div class="footnote">
<hr />
<ol>
<li id="fn:1">
<p>初めてmelpaにpull requestを送ってみましたが、送って1分でmergeされるという爆速対応でした。&#160;<a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
</ol>
</div>]]></content:encoded>
    </item>
    <item>
      <title>emacsでphpのインタラクティブシェルを動かすinf-php.elを書いた</title>
      <link>http://mojavy.com/blog/2013/04/05/emacs-inf-php-mode/</link>
      <pubDate>Fri, 05 Apr 2013 19:49:49 JST</pubDate>
      <category><![CDATA[php]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/04/05/emacs-inf-php-mode/</guid>
      <description>emacsでphpのインタラクティブシェルを動かすinf-php.elを書いた</description>
      <content:encoded><![CDATA[<p><img alt="emacs" src="/images/carbon-emacs-icon-200.png" /> </p>
<p>phper人口は多いはずなのになぜかどこにも見つからなかったので<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>emacsでphpのインタラクティブシェルを動かすための<a href="https://github.com/taksatou/inf-php">inf-php.el</a> を書いた。</p>
<h4 id="install">install</h4>
<p>auto-installがはいっていれば、<code>(auto-install-from-url "https://raw.github.com/taksatou/inf-php/master/inf-php.el")</code>で、はいってなければ <a href="https://raw.github.com/taksatou/inf-php/master/inf-php.el">inf-php.el</a> をダウンロードして適当にload-pathの通った場所に配置して、<code>.emacs</code>に以下を追記</p>
<div class="pygments_murphy"><pre>(require &#39;inf-php)
</pre></div>

<h4 id="usage">usage</h4>
<p>現状のキーバインドは以下の通り</p>
<div class="pygments_murphy"><pre>(define-key php-mode-map &quot;\C-c\C-s&quot; &#39;inf-php)              ;; inf-phpを起動する
(define-key php-mode-map &quot;\C-c\C-z&quot; &#39;php-switch-to-inf)    ;; inf-rubyバッファに切り替える
(define-key php-mode-map &quot;\M-\C-x&quot; &#39;php-send-definition)   ;; 現在カーソルがあるところの関数をinf-phpに送る
(define-key php-mode-map &quot;\C-c\C-x&quot; &#39;php-send-definition)  ;; 同上
(define-key php-mode-map &quot;\C-c\M-x&quot; &#39;php-send-definition-and-go)  ;; 同上だが送った後バッファを切り替える
(define-key php-mode-map &quot;\C-c\C-r&quot; &#39;php-send-region)             ;; 現在のregionを送る
(define-key php-mode-map &quot;\C-c\M-r&quot; &#39;php-send-region-and-go)      ;; 同上だが送った後バッファを切り替える
(define-key php-mode-map &quot;\C-x\C-e&quot; &#39;php-send-last-sexp)          ;; 直前のsexpをinf-phpに送る
</pre></div>

<h4 id="misc">misc</h4>
<p>フィードバック、要望等ありましたらgithubからおねがいします。</p>
<div class="footnote">
<hr />
<ol>
<li id="fn:1">
<p>と思ったら、<a href="https://github.com/ieure/php_repl">php_repl</a> なるものが存在していた。php_replのほうが機能的には充実してそう。inf-phpは依存がほぼないのでインストールが簡単という点がメリットなのでまあよしとします(2013/04/05 20:57:35 追記)&#160;<a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
</ol>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Rubotoを使ってRubyでAndroidアプリをかく</title>
      <link>http://mojavy.com/blog/2013/03/29/ruboto/</link>
      <pubDate>Fri, 29 Mar 2013 21:53:15 JST</pubDate>
      <category><![CDATA[android]]></category>
      <category><![CDATA[ruby]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/03/29/ruboto/</guid>
      <description>Rubotoを使ってRubyでAndroidアプリをかく</description>
      <content:encoded><![CDATA[<p><img alt="ruboto" src="/images/ruboto-200.png" /></p>
<p>最近iOSアプリ界隈では<a href="http://www.rubymotion.com/">RubyMotion</a>や<a href="http://mobiruby.org/">MobiRuby</a>が盛り上がってきてますが、Androidでも<a href="http://ruboto.org/">Ruboto</a>をつかえば簡単にrubyで開発することができるようになります。</p>
<p>そもそもjavaで実装された処理系であれば大抵javaクラスの呼びだしは簡単にできるようになっているので、jrubyやjythonでandroidアプリを開発することは以前から可能でした。
しかし、以下のような問題があって実際にやるとなるとそれなりに面倒なものでした。</p>
<ol>
<li>jrubyやjythonをdalvikvm用バイナリ(dex)にコンパイルするのに時間がかかる<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li>
<li>androidのjavaでは使えない機能を使って処理系を実装してある場合があるので、何らかの方法で回避する必要がある</li>
<li>スクリプトのソースファイルの配置やパスの設定を自分でやる必要があり、パッケージングが面倒 </li>
<li>アプリのフットプリントが大きくなる<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li>
</ol>
<p>Rubotoをつかえばこのあたりの面倒をみてくれるので、ほとんどjavaを書く必要がなくなります。Ruboto自体は結構前からありますが、ここ1年くらいでもろもろの機能が充実してきて大分実用的になってきた感があります。</p>
<p>以下Rubotoの使用方法について簡単に紹介します。</p>
<h2 id="_1">インストール</h2>
<div class="pygments_murphy"><pre>gem install ruboto
gem install jruby-jars
</pre></div>

<p>また、<code>ANDROID_HOME</code>環境変数の設定と、android sdkの <code>tools/</code> と <code>platform-tools/</code>にはあらかじめパスをとおしておきます</p>
<h2 id="_2">雛形の生成</h2>
<div class="pygments_murphy"><pre>ruboto gen app --package org.rubyandroid.new_demo

# 以下のようにしてより詳細に設定することもできます
# ruboto gen app --package org.rubyandroid.new_demo --path ./myapp --name MyApp --target android-17 --min-sdk android-10 --activity MainActivityName
</pre></div>

<h2 id="_3">ビルドとインストール</h2>
<p>rakeからビルドできるようになっています。また、rubyスクリプトの更新はコンパイル不要で反映できます。
あとは普通にrubyを書くだけです。</p>
<div class="pygments_murphy"><pre>cd new_demo
rake
rake install

#
# edit ruby scripts..
#

rake update_scripts
</pre></div>

<h2 id="rubygems">rubygemsを使う</h2>
<p>通常の<code>Gemfile</code>と同じ内容を、<code>Gemfile.apk</code>という名前のファイルに書いてプロジェクトのルートディレクトリに置いておけば、<code>rake</code>した際に<code>libs/bundle.jar</code>を生成してapkにいれてくれます。</p>
<p>詳細は以下の例を参考にしてください。
<a href="https://github.com/ruboto/ruboto/wiki/Tutorial%3A-Using-an-SQLite-database-with-ActiveRecord">https://github.com/ruboto/ruboto/wiki/Tutorial%3A-Using-an-SQLite-database-with-ActiveRecord</a></p>
<h2 id="_4">補足</h2>
<p>rubotoではjrubyの実行環境は別途Ruboto Core platformというapkで提供されています。そのためアプリ本体にruby処理系を同梱する必要がなく、省サイズでコンパイルも速くなるというメリットがあります。しかし、このやり方だとRuboto Core platformを別途インストールしてもらう必要がでてきてしまい、実際にGoogle Playで配布するようなアプリでは受け入れ難いと思います。</p>
<p>これを回避する方法も提供されていて、プロジェクトを生成する際に<code>--with-jruby</code>というオプションをつければjrubyを同梱したapkをビルドできるようになりますが、この場合は前述のメリットはうけられなくなります。ただ、コンパイル時間に関しては、rubyスクリプトだけを触っている限りは、dexの再コンパイルは必要ないのでそれほど気にならないと思います。</p>
<h2 id="_5">まとめ</h2>
<ul>
<li>androidで素のjrubyを使うのは茨の道ですが、rubotoを使えば非常に簡単にrubyを使えるようになります</li>
<li>jrubyなので普通のrubygemsやjavaでかかれたライブラリもそのまま使えます</li>
<li>javaで開発した場合はコンパイル〜再インストールが毎回必要になりますが、<code>.rb</code>の更新反映は高速にできるので開発効率があがります</li>
<li>まだそれほど使い込んでないので思わぬはまりどころがあるかもしれません</li>
</ul>
<div class="footnote">
<hr />
<ol>
<li id="fn:1">
<p>dxが分割コンパイルに対応してないので回避しづらい&#160;<a href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
<li id="fn:2">
<p>ファイルサイズも実行時のメモリ使用量も&#160;<a href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text">&#8617;</a></p>
</li>
</ol>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Mac OSXでシェルスクリプトをキーボードショートカットに登録する方法</title>
      <link>http://mojavy.com/blog/2013/03/28/mac-shell-script-keyboard-shortcut/</link>
      <pubDate>Thu, 28 Mar 2013 02:50:01 JST</pubDate>
      <category><![CDATA[mac]]></category>
      <category><![CDATA[shell]]></category>
      <category><![CDATA[tips]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/03/28/mac-shell-script-keyboard-shortcut/</guid>
      <description>Mac OSXでシェルスクリプトをキーボードショートカットに登録する方法</description>
      <content:encoded><![CDATA[<p><img alt="automator" src="/images/automator.png" /></p>
<p>概要を以下にメモ</p>
<ol>
<li>Automatorを起動</li>
<li>サービスを選択</li>
<li>右ペインの上部、「次の選択項目を受け取ります」を入力なしにする</li>
<li>左ペインからシェルスクリプトを実行をダブルクリック</li>
<li>デフォルトで<code>cat</code>になっている内容を任意のシェルスクリプトにする</li>
<li>右上の実行ボタンからテスト</li>
<li>適当な名前をつけて保存して閉じる</li>
<li>システム環境設定＞キーボードを開く</li>
<li>キーボードショートカットのタブを選択</li>
<li>サービスを選択してさっき保存したautomatorの名前をみつける</li>
<li>好きなショートカットを設定する</li>
</ol>
<p>参考: <a href="http://superuser.com/questions/45740/fast-user-switching-apple-menu/46308#46308">http://superuser.com/questions/45740/fast-user-switching-apple-menu/46308#46308</a></p>
<h4 id="_1">備考</h4>
<ul>
<li>新規作成したworkflowは保存して閉じるまでシステム設定のキーボードショートカットの項目に反映されない</li>
<li>workflowは$HOME/Library/Services に保存される</li>
</ul>]]></content:encoded>
    </item>
    <item>
      <title>hekyllのimpress.jsスライドを自動的にグリッド配置するjekyllプラグイン</title>
      <link>http://mojavy.com/blog/2013/03/26/jekyll-plugin/</link>
      <pubDate>Tue, 26 Mar 2013 20:37:24 JST</pubDate>
      <category><![CDATA[jekyll]]></category>
      <category><![CDATA[impress.js]]></category>
      <category><![CDATA[ruby]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/03/26/jekyll-plugin/</guid>
      <description>hekyllのimpress.jsスライドを自動的にグリッド配置するjekyllプラグイン</description>
      <content:encoded><![CDATA[<p><a href="https://github.com/bmcmurray/hekyll">hekyll</a>は<a href="https://github.com/bartaz/impress.js/">impress.js</a>用<a href="https://github.com/mojombo/jekyll">jekyll</a>テンプレのようなものだけど、スライドの位置を個別に指定する必要があってめんどうだったので適当なグリッドに配置するプラグインを書いた。</p>
<h3 id="jekyll">jekyllのプラグインについて</h3>
<p><a href="https://github.com/mojombo/jekyll/wiki/Plugins">https://github.com/mojombo/jekyll/wiki/Plugins</a>に必要なことは大体書いてある。</p>
<p>jekyllのディレクトリに<code>_plugins</code>ディレクトリを作り、その中に<code>*.rb</code>をおいておけば自動的にロードされる。
プラグインの種類はおおまかに以下の4通り。サンプルは本家wikiにあるのでメモもかねて概要だけ。</p>
<ul>
<li>Generators 
<ul></li>
<li>カテゴリ別とか期間別といった任意のルールでページを生成する
</ul></li>
<li>Converters
<ul></li>
<li>hamlとかjsonとかのフォーマット変換をする
</ul></li>
<li>Tags
<ul></li>
<li>liquidテンプレートエンジンのタグを追加する</li>
<li>たとえば、<code>{{ your_tag }}</code> というタグをつかいたければ、<code>Liquid::Tag</code>を継承したクラスをつくって、<code>Liquid::Template.register_tag('your_tag', Jekyll::YourTag)</code> などとする
</ul></li>
<li>Filters
<ul></li>
<li>liquidのフィルタを追加する</li>
<li>フィルタとはいいつつどんな関数でも登録できる</li>
<li>適当にモジュールをつくって、<code>Liquid::Template.register_filter(Jekyll::YourModule)</code>とすると、<code>{{ 'arg' | your_filter }}</code> のようにして呼びだせる
</ul></li>
</ul>
<h3 id="_1">ソース</h3>
<p>wikiで説明されているpluginの書き方を踏まえた上で、それを完全に無視する方法で実装した。
Postクラスを拡張してhekyllにあうようにliquidに渡すデータを上書きしてるだけ。</p>
<p>もっといい方法はあると思う。</p>
<div class="pygments_murphy"><pre><span class="k">def</span> <span class="nf">once</span><span class="p">(</span><span class="n">tag</span><span class="p">)</span>
  <span class="k">unless</span> <span class="p">(</span><span class="vi">@__once_executed__</span> <span class="o">||=</span> <span class="o">[]</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span> <span class="n">tag</span>
    <span class="k">yield</span>
    <span class="vi">@__once_executed__</span> <span class="o">&lt;&lt;</span> <span class="n">tag</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">module</span> <span class="nn">Jekyll</span>
  <span class="k">class</span> <span class="nc">Post</span>

    <span class="k">def</span> <span class="nf">grid_position</span>
      <span class="n">pos</span> <span class="o">=</span> <span class="vi">@site</span><span class="o">.</span><span class="n">posts</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
      <span class="n">siz</span> <span class="o">=</span> <span class="no">Math</span><span class="o">::</span><span class="n">sqrt</span><span class="p">(</span><span class="vi">@site</span><span class="o">.</span><span class="n">posts</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">ceil</span>
      <span class="p">{</span>
        <span class="s2">&quot;x&quot;</span> <span class="o">=&gt;</span> <span class="mi">1000</span> <span class="o">*</span> <span class="p">(</span><span class="n">pos</span> <span class="o">%</span> <span class="n">siz</span><span class="p">),</span>
        <span class="s2">&quot;y&quot;</span> <span class="o">=&gt;</span> <span class="mi">1000</span> <span class="o">*</span> <span class="p">(</span><span class="n">pos</span> <span class="o">/</span> <span class="n">siz</span><span class="p">),</span>
      <span class="p">}</span>
    <span class="k">end</span>

    <span class="n">once</span><span class="p">(</span><span class="ss">:redefine_to_liquid</span><span class="p">)</span> <span class="k">do</span>
      <span class="k">alias</span> <span class="n">__old_to_liquid</span> <span class="n">to_liquid</span>
      <span class="k">def</span> <span class="nf">to_liquid</span>

        <span class="n">dat</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">data</span><span class="o">[</span><span class="s2">&quot;data&quot;</span><span class="o">]</span>

        <span class="k">if</span> <span class="n">dat</span><span class="o">.</span><span class="n">nil?</span>
          <span class="nb">self</span><span class="o">.</span><span class="n">data</span><span class="o">[</span><span class="s2">&quot;data&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">grid_position</span>
        <span class="k">end</span>
        <span class="n">__old_to_liquid</span>
      <span class="k">end</span>
    <span class="k">end</span>

  <span class="k">end</span>
<span class="k">end</span>
</pre></div>

<p><a href="https://gist.github.com/taksatou/5244991">https://gist.github.com/taksatou/5244991</a></p>
<h3 id="_2">まとめ</h3>
<p>impress.jsをつかっておいて単なるグリッドというのもどうかとは思いますが、位置決めをする部分をかえればなんとでもなるのでひまなときにがんばればいいと思います</p>]]></content:encoded>
    </item>
    <item>
      <title>pythonのswigエクステンションからdebian packageをつくる手順メモ</title>
      <link>http://mojavy.com/blog/2013/02/27/building-python-debian-package/</link>
      <pubDate>Wed, 27 Feb 2013 23:46:03 JST</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[debian]]></category>
      <category><![CDATA[linux]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/02/27/building-python-debian-package/</guid>
      <description>pythonのswigエクステンションからdebian packageをつくる手順メモ</description>
      <content:encoded><![CDATA[<p><img alt="debian" src="/images/debian-200.png" /></p>
<p>注: 以下は古めの環境(Lenny or Squeeze)と古めのpython (2.5 or 2.6)をターゲットにしたときの手順なので、最新の環境では別な方法があるかもしれません。</p>
<h2 id="_1">目次</h2>
<div class="toc">
<ul>
<li><a href="#_1">目次</a><ul>
<li><a href="#1">1. 必要なパッケージをインストール</a></li>
<li><a href="#2-setuppy">2. setup.pyをかく</a></li>
<li><a href="#3">3. ビルド確認</a></li>
<li><a href="#4-debianize">4. debianizeする</a></li>
<li><a href="#5-deb">5. debをつくる</a></li>
<li><a href="#_2">その他ツール等</a></li>
</ul>
</li>
</ul>
</div>
<h3 id="1">1. 必要なパッケージをインストール</h3>
<ul>
<li>python-setuptools</li>
<li>python-all-dev</li>
<li>python-support</li>
<li>python-stdeb</li>
<li>swig</li>
<li>debhelper</li>
<li>devscripts</li>
<li>dh_make</li>
</ul>
<p>たぶんこれだけあれば大丈夫。(python-supportはdeprecatedらしいけどここでは無視)</p>
<h3 id="2-setuppy">2. setup.pyをかく</h3>
<p><code>apt-get source python-xxx</code>で適当なパッケージのソースをダウンロードして参考にするとよい</p>
<p>以下例</p>
<div class="pygments_murphy"><pre><span class="c">#!/usr/bin/python</span>

<span class="kn">from</span> <span class="nn">setuptools</span> <span class="kn">import</span> <span class="n">setup</span><span class="p">,</span> <span class="n">Extension</span>

<span class="n">__version__</span> <span class="o">=</span> <span class="s">&quot;0.0.1&quot;</span>

<span class="n">setup</span><span class="p">(</span><span class="n">name</span>         <span class="o">=</span> <span class="s">&quot;yourext&quot;</span><span class="p">,</span>
      <span class="n">version</span>      <span class="o">=</span> <span class="n">__version__</span><span class="p">,</span>
      <span class="n">author</span>       <span class="o">=</span> <span class="s">&quot;Your Name&quot;</span><span class="p">,</span>
      <span class="n">author_email</span> <span class="o">=</span> <span class="s">&quot;yourname@example.com,</span>
      <span class="n">url</span>          <span class="o">=</span> <span class="s">&quot;http://example.com/python-yourext&quot;</span><span class="p">,</span>
      <span class="n">download_url</span> <span class="o">=</span> <span class="s">&quot;http://example.com/python-yourext-</span><span class="si">%s</span><span class="s">.tgz&quot;</span> <span class="o">%</span> <span class="n">__version__</span><span class="p">,</span>
      <span class="n">description</span>  <span class="o">=</span> <span class="s">&quot;yourext client library for python&quot;</span><span class="p">,</span>
      <span class="n">long_description</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;README.md&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">(),</span>
      <span class="n">license</span>      <span class="o">=</span> <span class="s">&quot;LGPL&quot;</span><span class="p">,</span>
      <span class="n">platforms</span>    <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Platform Independent&quot;</span><span class="p">],</span>
      <span class="n">classifiers</span>  <span class="o">=</span> <span class="p">[</span>
        <span class="s">&quot;Development Status :: 5 - Production/Stable&quot;</span><span class="p">,</span>
        <span class="s">&quot;Intended Audience :: Developers&quot;</span><span class="p">,</span>
        <span class="s">&quot;License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)&quot;</span><span class="p">,</span>
        <span class="s">&quot;Operating System :: OS Independent&quot;</span><span class="p">,</span>
        <span class="s">&quot;Programming Language :: Python&quot;</span><span class="p">,</span>
        <span class="s">&quot;Topic :: Software Development :: Libraries :: Python Modules&quot;</span>
      <span class="p">],</span>
      <span class="n">ext_modules</span>  <span class="o">=</span> <span class="p">[</span>
        <span class="n">Extension</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;yourext&#39;</span><span class="p">,</span>
                  <span class="n">sources</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;path_to_swig/yourext.i&#39;</span><span class="p">],</span>
                  <span class="n">include_dirs</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;path_to_lib/include&#39;</span><span class="p">],</span>
                  <span class="n">library_dirs</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;path_to_lib/lib&#39;</span><span class="p">],</span>
                  <span class="n">libraries</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;yourlibrary&#39;</span><span class="p">],</span>
                  <span class="n">define_macros</span><span class="o">=</span><span class="p">[(</span><span class="n">FOO_BAR</span><span class="p">,</span> <span class="mi">123</span><span class="p">),</span> <span class="p">(</span><span class="n">DEBUG</span><span class="p">,</span> <span class="bp">None</span><span class="p">)],</span>
                  <span class="n">extra_compile_args</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;-std=gnu99&#39;</span><span class="p">,</span> <span class="s">&#39;-Wextra&#39;</span><span class="p">],</span>
                  <span class="p">)</span>
      <span class="p">],</span>
      <span class="n">py_modules</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;pure_python_module_name&#39;</span><span class="p">,</span> <span class="s">&#39;foo.bar&#39;</span><span class="p">],</span>
      <span class="n">include_dirs</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;&#39;</span><span class="p">],</span>
<span class="p">)</span>
</pre></div>

<ul>
<li>ext_modulesの中にExtensionをかく
<ul></li>
<li>Extension.sources にはswigの定義ファイルを直接指定できる</li>
<li>Extension.include_dirs, Extension.library_dirs, Extension.librariesはそれぞれgccでいう<code>-I, -L, -l</code>の値</li>
<li>Extension.define_macrosはタプルで渡す。上の例だと <code>-DFOO_BAR=123 -DDEBUG</code> の意味</li>
<li>Extension.extra_compile_args はその他のコンパイルオプション
</ul></li>
<li>platforms, classifiersの内容はpython-cjsonあたりからコピーした</li>
<li>pure pythonの部分はpy_modulesにモジュール名を列挙する。パスではない</li>
<li>swigが生成した<code>.py</code>ファイルをpy_modulesに含める汎用的な方法は見つからなかった。(必要な場合はスクリプトでinclude_dirsにコピーすることで対応できる)</li>
</ul>
<h3 id="3">3. ビルド確認</h3>
<p>以下コマンドでpython extのビルドを確認する。成功すると、buildディレクトリ以下に共有ライブラリが生成される</p>
<p><code>python setup.py build</code></p>
<h3 id="4-debianize">4. debianizeする</h3>
<p>以下コマンドでdebianパッケージに必要なファイルを生成する。このときegg-info等も生成される</p>
<p><code>python setup.py --command-package=stdeb.command debianize --force-buildsystem=True</code></p>
<h3 id="5-deb">5. debをつくる</h3>
<p><code>debuild -uc -us</code></p>
<p><code>-uc -us</code>は署名を省略するためのオプション。</p>
<p>成功すると、親ディレクトリにdebファイルができてるはず</p>
<h3 id="_2">その他ツール等</h3>
<ul>
<li>dupload: リポジトリにアップロードするためのもの</li>
<li>dlocate: <code>dlocate -S filename</code> のようにすればそのファイルを含むパッケージを調べることができる</li>
<li>cdbs: debianパッケージを作成するための別なやりかた(?)。 ちゃんとしらべてない</li>
</ul>]]></content:encoded>
    </item>
    <item>
      <title>The P Convention</title>
      <link>http://mojavy.com/blog/2013/02/24/the-p-convention/</link>
      <pubDate>Sun, 24 Feb 2013 14:42:00 JST</pubDate>
      <category><![CDATA[lisp]]></category>
      <category><![CDATA[programming]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/02/24/the-p-convention/</guid>
      <description>The P Convention</description>
      <content:encoded><![CDATA[<p><img alt="lisp" src="/images/lisplogo_fancy_128.png" /></p>
<p>Lispには'p'という接尾辞がつく名前の関数があるが、この'p'はpredicateのこと。</p>
<p><a href="http://catb.org/jargon/html/p-convention.html">The -P Convention</a></p>
<p>ところが、HaskellやOCamlにも'p'という接尾辞がつく関数があって、そちらはprimeの意味で使うらしい。
シングルクオート(ダッシュ)記号は英語だとprimeというので、例えば<code>foo'</code>という名前の関数は<code>foo</code>という名前のヘルパー関数的なもの、ということになる。</p>
<p><a href="http://stackoverflow.com/questions/5279286/foop-a-naming-convention-its-a-helper-recursive-function-for-foo-what-do">“foop”: a naming convention? It's a helper recursive function for “foo”; what does the suffix “p” mean?</a></p>
<p>ちなみに、OCamlだとシングルクオートが識別子につかえるのでfoo'という名前の関数も結構あるらしい。</p>
<p>まぎらわしい、かと思ったけど使う文脈が違うし意外とそうでもないか。</p>]]></content:encoded>
    </item>
    <item>
      <title>telnetでメールを送信する方法</title>
      <link>http://mojavy.com/blog/2013/02/23/telnet-smtp/</link>
      <pubDate>Sat, 23 Feb 2013 18:17:17 JST</pubDate>
      <category><![CDATA[postfix]]></category>
      <category><![CDATA[tips]]></category>
      <category><![CDATA[smtp]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/02/23/telnet-smtp/</guid>
      <description>telnetでメールを送信する方法</description>
      <content:encoded><![CDATA[<p><img alt="lisp" src="/images/mail-logo-100.png" /></p>
<p>何回やってもpostfixの設定の仕方を覚えられないので、今更ながら最低限のプロトコルを理解するためにtelnetからsmtpでメールを送信してみようと思い立ちました。</p>
<p>以下は自分のgmailアドレスにtelnetでメールしてみたときの個人的な手順メモです。</p>
<div class="toc">
<ul>
<li><a href="#_1">手順</a><ul>
<li><a href="#1-mx">1. 該当メールアドレスのMXレコードを調べる</a></li>
<li><a href="#2-telnet25smtp">2. telnetで25番ポートに接続してsmtpを話す</a></li>
<li><a href="#3">3. メールの確認</a></li>
</ul>
</li>
<li><a href="#postfix">postfixの設定メモ</a></li>
</ul>
</div>
<h2 id="_1">手順</h2>
<h3 id="1-mx">1. 該当メールアドレスのMXレコードを調べる</h3>
<p>普通のメールアドレスの@以下はドメイン名になっている場合がほとんどですが、DNSのAレコードに登録されているのはホスト名なのでメールサービスを提供しているホスト名を調べる必要があります。そのときに使うのがMXレコードで、nslookupでも以下のようにして調べることができます。</p>
<div class="pygments_murphy"><pre>% nslookup -type=mx gmail.com
Server:         192.168.1.1
Address:        192.168.1.1#53

Non-authoritative answer:
gmail.com       mail exchanger = 5 gmail-smtp-in.l.google.com.
gmail.com       mail exchanger = 10 alt1.gmail-smtp-in.l.google.com.
gmail.com       mail exchanger = 20 alt2.gmail-smtp-in.l.google.com.
gmail.com       mail exchanger = 30 alt3.gmail-smtp-in.l.google.com.
gmail.com       mail exchanger = 40 alt4.gmail-smtp-in.l.google.com.

Authoritative answers can be found from:
</pre></div>

<p>複数のホストが優先度をつけて登録されているので、この場合は <em>gmail-smtp-in.l.google.com</em> を使えばいいということになるみたいです。</p>
<h3 id="2-telnet25smtp">2. telnetで25番ポートに接続してsmtpを話す</h3>
<p>smtpはテキストベースのプロトコルなのでtelnetからそのままサーバとやりとりできます。
smtpプロトコルの詳細は省略しますが、最低限必要なコマンドは以下の5つだけ。</p>
<ul>
<li>HELO - 通信開始</li>
<li>MAIL FROM - 送信元メールアドレス。ドメインのIPと送信元のIPが一致している必要がある。dynamic DNSのドメイン名でも大丈夫。ユーザ名部分は実際に存在しなくてもよい(その場合は返信を受けとれない)</li>
<li>RCPT TO - 送信先メールアドレス</li>
<li>DATA - メール本体の開始。'.'(ピリオド)だけの行で本文終了。本文のFromとToはなんでもよい。普通のメーラのfromやtoで表示されるのはここの情報</li>
<li>QUIT - 通信終了</li>
</ul>
<div class="pygments_murphy"><pre>% telnet gmail-smtp-in.l.google.com 25
Trying 173.194.79.26...
Connected to gmail-smtp-in.l.google.com.
Escape character is &#39;^]&#39;.
220 mx.google.com ESMTP k8si26817952pax.291 - gsmtp
HELO
250 mx.google.com at your service
MAIL FROM:&lt;username@yourhostname&gt;
250 2.1.0 OK k8si26817952pax.291 - gsmtp
RCPT TO:&lt;username@gmail.com&gt;
250 2.1.5 OK k8si26817952pax.291 - gsmtp
DATA
354  Go ahead k8si26817952pax.291 - gsmtp
Subject: xxx
From: yyy
To: zzz

.
250 2.0.0 OK 1361347877 k8si26817952pax.291 - gsmtp
QUIT
221 2.0.0 closing connection k8si26817952pax.291 - gsmtp
Connection closed by foreign host.
</pre></div>

<h3 id="3">3. メールの確認</h3>
<p>gmail上でメールがきているか確認します。DATA部分を適当に書くとスパム判定されてしまいますが一応届くはず。</p>
<h2 id="postfix">postfixの設定メモ</h2>
<p>上記は直接gmailのsmtpサーバで送信しましたが、mailコマンドからローカルのpostfix経由で送るにはpostfixを適切に設定する必要があります。</p>
<p>MAIL FROMで使われるのはmyoriginの値になるようなので、送信だけでよいのであればmyoriginのIPが送信元のグローバルIPに一致するように設定しさえすればよいということですかね。</p>
<p>ちなみに、debianのaptからpostfixを「ローカルのみ」の設定でインストールしてしまうと、デフォルトのmain.cfにリレーしない設定になっているので、main.cfを以下のようにコメントアウト。</p>
<div class="pygments_murphy"><pre># default_transport = error
# relay_transport = error
</pre></div>

<p>あと、sakura vpsのお試し期間中はメール送信できない仕様なので、sakura vpsで試す際は注意。</p>
<p><a href="http://vps.sakura.ad.jp/terms.html">http://vps.sakura.ad.jp/terms.html</a></p>]]></content:encoded>
    </item>
    <item>
      <title>Rainbow for Common Lisp 作りました</title>
      <link>http://mojavy.com/blog/2013/02/19/rainbow-for-common-lisp/</link>
      <pubDate>Tue, 19 Feb 2013 23:55:00 JST</pubDate>
      <category><![CDATA[ruby]]></category>
      <category><![CDATA[common lisp]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2013/02/19/rainbow-for-common-lisp/</guid>
      <description>Rainbow for Common Lisp 作りました</description>
      <content:encoded><![CDATA[<p><img alt="lisp" src="/images/cl-rainbow-demo.png" /></p>
<p><a href="http://mojavy.com/blog/2013/02/18/ltsv-for-common-lisp/">昨日</a>のテンプレを流用して今日はcl-rainbowという地味なライブラリの宣伝をします。</p>
<p><a href="https://github.com/taksatou/cl-rainbow">https://github.com/taksatou/cl-rainbow</a></p>
<p>cl-rainbowとは、<a href="https://github.com/sickill/rainbow">rubygemにあるrainbow</a>をCommon Lispに移植したものです。
これを使うとターミナルの出力を簡単に色付けできます。</p>
<h3 id="_1">インストール</h3>
<p>現在(2013-02-19) quicklisp登録申請中です。登録されれば以下でインストールできます。</p>
<div class="pygments_murphy"><pre>(ql:quickload &#39;cl-rainbow)
</pre></div>

<h3 id="_2">使い方</h3>
<p>以下のように使います。</p>
<div class="pygments_murphy"><pre>(setf cl-rainbow:*enabled* t)
(print (cl-rainbow:color :red &quot;red string&quot;))
(print (cl-rainbow:color #x5599ff &quot;rgb color code&quot;))
(loop for c across &quot;RAINBOW&quot; do (format t &quot;~A&quot; (cl-rainbow:color (random #xffffff) c)))
</pre></div>

<p>特に解説は不要だと思いますが、端末はカラー表示に対応している必要があります。</p>
<p>RGBのカラーコード指定すると、256色にダウンサンプルして一番近い色を表示します。</p>
<p>その他、例にはのせてませんが、端末が対応していれば斜体や太字にもできます。詳細はソースを見てください。</p>
<h3 id="_3">まとめ</h3>
<p>ログ出力のときとかにちょっと便利なときがあるかもしれません。</p>
<p>リードマクロで文字列リテラルをごにょごにょして色付けできるようにするともうちょっと便利になるような気がするので、そのうちチャレンジしてみたいと思います。</p>
<p>フィードバック等ありましたらコメント頂けるとうれしいです。</p>]]></content:encoded>
    </item>
  </channel>
</rss>
