<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>mojavy.com</title>
    <link>http://mojavy.com/blog</link>
    <description></description>
    <pubDate>Fri, 09 Nov 2012 13:24:10 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>gearman</title>
      <link>http://mojavy.com/blog/2012/11/10/gearman</link>
      <pubDate>Sat, 10 Nov 2012 20:00:00 JST</pubDate>
      <category><![CDATA[gearman]]></category>
      <category><![CDATA[web]]></category>
      <guid isPermaLink="true">http://mojavy.com/blog/2012/11/10/gearman</guid>
      <description>gearman</description>
      <content:encoded><![CDATA[<p><img alt="lisp" src="/images/lisp-alien-logo.png" /></p>
<p>gearmanは高速だけどデータは永続化しないものだとずっと思ってましたが、最近ジョブキューを使いたい場面があったので久しぶりに調べてみたらもはやそんなことはなかったです。いい機会なのでgearmanについてまとめておこうと思います。</p>
<div class="toc">
<ul>
<li><a href="#gearman">Gearmanとは</a></li>
<li><a href="#_1">インストール</a></li>
<li><a href="#_2">動作確認</a><ul>
<li><a href="#job-server">job serverの起動</a></li>
<li><a href="#hoge">hogeあ</a></li>
</ul>
</li>
<li><a href="#_3">ジョブの永続化</a></li>
<li><a href="#_4">スレッドモデル</a></li>
<li><a href="#tips">その他のtips</a></li>
<li><a href="#_5">リンク</a></li>
</ul>
</div>
<h2 id="gearman">Gearmanとは</h2>
<p>Gearmanとは、時間のかかる処理を複数のコンピュータに振り分けるように設計されたオープンソースのアプリケーションフレームワークです。
Gearmanを利用するアプリケーションには、client, job server, workerという3つの要素が存在します。
それぞれの役割は以下の通りです。</p>
<ul>
<li>job server: clientから受けとったジョブを適切なworkerに渡す</li>
<li>client: ジョブを生成してjob serverに送信する</li>
<li>worker: job serverを経由して、clientによってリクエストされたジョブを実行してそのレスポンスを返す</li>
</ul>
<p>clientとworkerはgearmanが提供しているAPIを通じてjob serverとやりとりします。gearman APIを実装したライブラリが多くのプログラミング言語で用意されています。また、gearmanというコマンドもあるのでシェルスクリプトからの利用も簡単です。 job serverには通常gearmandというデーモンを利用します。gearmandの実装には現在3種類あります。(<a href="https://launchpad.net/gearmand">C言語</a>, <a href="http://code.google.com/p/java-gearman-service/">Java</a>, <a href="http://search.cpan.org/dist/Gearman-Server/">Perl</a>)  また、libgearman-serverというライブラリも提供されており、これを利用して他のアプリケーションにjob serverを埋め込むことも簡単にできます。</p>
<p>以下ではCのgearmandを使用します。</p>
<h2 id="_1">インストール</h2>
<p>aptやrpmでもインストールできると思いますが、ここではソースからインストールします。</p>
<div class="pygments_murphy"><pre>wget https://launchpad.net/gearmand/1.2/1.1.3/+download/gearmand-1.1.3.tar.gz
tar xzf gearmand-1.1.3.tar.gz
<span class="nb">cd </span>gearmand-1.1.3
./configure
make
sudo make install
</pre></div>

<p>後述のジョブ永続化を利用したいのであれば、configureの前に永続化するストレージに応じたライブラリをインストールしておきます。
Debian系ならlibsqlite3-dev、libmysql++-dev、等です。必要なものが標準のパスにインストールされていればconfigureオプションは不要です。うまく認識されとconfigureの後に以下のようなログがでるの確認しておきます。</p>
<div class="pygments_murphy"><pre>#  :
#  :
   * Building with libsqlite3   yes
   * Building with libdrizzle   no
   * Building with libmemcached not found
   * Building with libpq        no
   * Building with tokyocabinet no
   * Building with libmysql     yes
</pre></div>

<p>その他の必要な依存ライブラリが足りなかった場合は適宜いれてください。</p>
<h2 id="_2">動作確認</h2>
<p><a href="http://gearman.org/index.php\?id=getting_started">本家サイトのチュートリアル</a>の内容そのままですが、以下のようにして動作を確認できます。</p>
<h3 id="job-server">job serverの起動</h3>
<p>ほげ</p>
<div class="pygments_murphy"><pre>$ gearmand
</pre></div>

<h3 id="hoge">hogeあ</h3>
<p>げあ
sddd</p>
<p>他にも色々なサンプルがgearmanのソースに含まれているのでそちらも参考にしてください。</p>
<h2 id="_3">ジョブの永続化</h2>
<ul>
<li>mysql</li>
<li>dizzle</li>
<li>sqlite3</li>
<li>postgresql</li>
<li>tokyocabinet</li>
<li>memcached</li>
</ul>
<p>redisとmongodbも開発中</p>
<h2 id="_4">スレッドモデル</h2>
<p>Cで実装されたgearmandはデフォルトではシングルスレッドですが、起動オプション</p>
<h2 id="tips">その他のtips</h2>
<ul>
<li>gearmanという名前はmanagerのアナグラムからつけられたそうです</li>
<li>gearmandとの通信にHTTPを利用することもできます</li>
</ul>
<h2 id="_5">リンク</h2>
<ul>
<li>http://gearman.org/</li>
<li>http://gearman.info/index.html</li>
</ul>]]></content:encoded>
    </item>
  </channel>
</rss>
